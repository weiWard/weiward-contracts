{
  "address": "0x12B8372c60843d402fB49095a33D80dEF7417436",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "cCapNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cCapDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilDen",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IETHmxMinter.ETHmxMintParams",
          "name": "mp",
          "type": "tuple"
        }
      ],
      "name": "EthmxMintParamsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthmxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthtxAMMSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "minMintPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "mu",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lambda",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct IETHmxMinter.ETHtxMintParams",
          "name": "mp",
          "type": "tuple"
        }
      ],
      "name": "EthtxMintParamsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthtxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "LpAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "LpRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "LpRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "LpShareSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "WethSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "addLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountETHIn",
          "type": "uint256"
        }
      ],
      "name": "ethmxFromEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountETHtxIn",
          "type": "uint256"
        }
      ],
      "name": "ethmxFromEthtx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethmxMintParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "cCapNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cCapDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilDen",
              "type": "uint32"
            }
          ],
          "internalType": "struct IETHmxMinter.ETHmxMintParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtxAMM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountETHIn",
          "type": "uint256"
        }
      ],
      "name": "ethtxFromEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtxMintParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "minMintPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "mu",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lambda",
              "type": "uint64"
            }
          ],
          "internalType": "struct IETHmxMinter.ETHtxMintParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inGenesis",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "liquidityPoolsAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpShare",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintWithETHtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintWithWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLiquidityPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ethmx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ethtx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ethtxAMM",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "cCapNum",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "cCapDen",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "zetaFloorNum",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "zetaFloorDen",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "zetaCeilNum",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "zetaCeilDen",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IETHmxMinter.ETHmxMintParams",
              "name": "ethmxMintParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "minMintPrice",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "mu",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lambda",
                  "type": "uint64"
                }
              ],
              "internalType": "struct IETHmxMinter.ETHtxMintParams",
              "name": "ethtxMintParams",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "lpShareNumerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lpShareDenominator",
              "type": "uint128"
            },
            {
              "internalType": "address[]",
              "name": "lps",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "lpRecipient",
              "type": "address"
            }
          ],
          "internalType": "struct ETHmxMinter.ETHmxMinterArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "postInit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "removeLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "cCapNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cCapDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaFloorDen",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilNum",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "zetaCeilDen",
              "type": "uint32"
            }
          ],
          "internalType": "struct IETHmxMinter.ETHmxMintParams",
          "name": "mp",
          "type": "tuple"
        }
      ],
      "name": "setEthmxMintParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthtxAMM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "minMintPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "mu",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lambda",
              "type": "uint64"
            }
          ],
          "internalType": "struct IETHmxMinter.ETHtxMintParams",
          "name": "mp",
          "type": "tuple"
        }
      ],
      "name": "setEthtxMintParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setLpRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setLpShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGiven",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b35c88a880f9dcbf8560642cd17d8282777458d576696151e5d50b202676f4e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x8e1b28FAa8C3A79BE31b5B6982221F18f4A0FA29",
    "contractAddress": null,
    "transactionIndex": 11,
    "gasUsed": "4975007",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000004000000000000000000000000200000000000000000000000000000040000000000000000000000000000000000000000000000000000000000400000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf860f282528f61790948c63409199fd0369cc9c5f1146554d24267d8c278e4d5",
    "transactionHash": "0x8b35c88a880f9dcbf8560642cd17d8282777458d576696151e5d50b202676f4e",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8692409,
        "transactionHash": "0x8b35c88a880f9dcbf8560642cd17d8282777458d576696151e5d50b202676f4e",
        "address": "0x12B8372c60843d402fB49095a33D80dEF7417436",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008e1b28faa8c3a79be31b5b6982221f18f4a0fa29"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xf860f282528f61790948c63409199fd0369cc9c5f1146554d24267d8c278e4d5"
      }
    ],
    "blockNumber": 8692409,
    "cumulativeGasUsed": "6322318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8e1b28FAa8C3A79BE31b5B6982221F18f4A0FA29"
  ],
  "solcInputHash": "b64ed1bd0442f95fc842a0027542327b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cCapNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cCapDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilDen\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IETHmxMinter.ETHmxMintParams\",\"name\":\"mp\",\"type\":\"tuple\"}],\"name\":\"EthmxMintParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthmxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthtxAMMSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minMintPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"mu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lambda\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct IETHmxMinter.ETHtxMintParams\",\"name\":\"mp\",\"type\":\"tuple\"}],\"name\":\"EthtxMintParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthtxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LpAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LpRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LpRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"LpShareSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WethSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETHIn\",\"type\":\"uint256\"}],\"name\":\"ethmxFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETHtxIn\",\"type\":\"uint256\"}],\"name\":\"ethmxFromEthtx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethmxMintParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cCapNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cCapDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilDen\",\"type\":\"uint32\"}],\"internalType\":\"struct IETHmxMinter.ETHmxMintParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtxAMM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETHIn\",\"type\":\"uint256\"}],\"name\":\"ethtxFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtxMintParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minMintPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"mu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lambda\",\"type\":\"uint64\"}],\"internalType\":\"struct IETHmxMinter.ETHtxMintParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inGenesis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"liquidityPoolsAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShare\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithETHtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLiquidityPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ethmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethtx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethtxAMM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cCapNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cCapDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilDen\",\"type\":\"uint32\"}],\"internalType\":\"struct IETHmxMinter.ETHmxMintParams\",\"name\":\"ethmxMintParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minMintPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"mu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lambda\",\"type\":\"uint64\"}],\"internalType\":\"struct IETHmxMinter.ETHtxMintParams\",\"name\":\"ethtxMintParams\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"lpShareNumerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lpShareDenominator\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"lps\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"lpRecipient\",\"type\":\"address\"}],\"internalType\":\"struct ETHmxMinter.ETHmxMinterArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"postInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cCapNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cCapDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaFloorDen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"zetaCeilDen\",\"type\":\"uint32\"}],\"internalType\":\"struct IETHmxMinter.ETHmxMintParams\",\"name\":\"mp\",\"type\":\"tuple\"}],\"name\":\"setEthmxMintParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthtxAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minMintPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"mu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lambda\",\"type\":\"uint64\"}],\"internalType\":\"struct IETHmxMinter.ETHtxMintParams\",\"name\":\"mp\",\"type\":\"tuple\"}],\"name\":\"setEthtxMintParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setLpRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setLpShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchanges/ETHmxMinter/ETHmxMinter.sol\":\"ETHmxMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x20f2d2dc1bd6616bf85e695f9139c2a949cfc4bd8e2f4de0c5d0f9bb54f8df9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v3.4.0-solc-0.7/contracts/access/OwnableUpgradeable.sol\\n *\\n * Changes:\\n * - Added owner argument to initializer\\n * - Reformatted styling in line with this repository.\\n */\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/* solhint-disable func-name-mixedcase */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tfunction __Ownable_init(address owner_) internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained(address owner_) internal initializer {\\n\\t\\t_owner = owner_;\\n\\t\\temit OwnershipTransferred(address(0), owner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5f32f6abe1fdaea0af2e09599e1bb2662cbfafe4bbc663a34d80a2bbfbb15220\",\"license\":\"MIT\"},\"contracts/exchanges/ETHmxMinter/ETHmxMinter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./ETHmxMinterData.sol\\\";\\nimport \\\"../../tokens/interfaces/IETHmx.sol\\\";\\nimport \\\"../interfaces/IETHmxMinter.sol\\\";\\nimport \\\"../../tokens/interfaces/IETHtx.sol\\\";\\nimport \\\"../interfaces/IETHtxAMM.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../libraries/UintLog.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\ninterface IPool {\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n}\\n\\ncontract ETHmxMinter is\\n\\tInitializable,\\n\\tContextUpgradeable,\\n\\tOwnableUpgradeable,\\n\\tPausableUpgradeable,\\n\\tETHmxMinterData,\\n\\tIETHmxMinter\\n{\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\tusing SafeMath for uint32;\\n\\tusing UintLog for uint256;\\n\\n\\tstruct ETHmxMinterArgs {\\n\\t\\taddress ethmx;\\n\\t\\taddress ethtx;\\n\\t\\taddress ethtxAMM;\\n\\t\\taddress weth;\\n\\t\\tETHmxMintParams ethmxMintParams;\\n\\t\\tETHtxMintParams ethtxMintParams;\\n\\t\\tuint128 lpShareNumerator;\\n\\t\\tuint128 lpShareDenominator;\\n\\t\\taddress[] lps;\\n\\t\\taddress lpRecipient;\\n\\t}\\n\\n\\tuint256 internal constant _GAS_PER_ETHTX = 21000; // per 1e18\\n\\tuint256 internal constant _GENESIS_START = 1620655200; // 05/10/2021 1400 UTC\\n\\tuint256 internal constant _GENESIS_END = 1621260000; // 05/17/2021 1400 UTC\\n\\tuint256 internal constant _GENESIS_AMOUNT = 3e21; // 3k ETH\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(address owner_) {\\n\\t\\tinit(owner_);\\n\\t}\\n\\n\\t/* Initializer */\\n\\n\\tfunction init(address owner_) public virtual initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t\\t__Pausable_init_unchained();\\n\\t}\\n\\n\\tfunction postInit(ETHmxMinterArgs memory _args) external virtual onlyOwner {\\n\\t\\taddress sender = _msgSender();\\n\\n\\t\\t_ethmx = _args.ethmx;\\n\\t\\temit EthmxSet(sender, _args.ethmx);\\n\\n\\t\\t_ethtx = _args.ethtx;\\n\\t\\temit EthtxSet(sender, _args.ethtx);\\n\\n\\t\\t_ethtxAMM = _args.ethtxAMM;\\n\\t\\temit EthtxAMMSet(sender, _args.ethtxAMM);\\n\\n\\t\\t_weth = _args.weth;\\n\\t\\temit WethSet(sender, _args.weth);\\n\\n\\t\\t_ethmxMintParams = _args.ethmxMintParams;\\n\\t\\temit EthmxMintParamsSet(sender, _args.ethmxMintParams);\\n\\n\\t\\t_inGenesis = block.timestamp <= _GENESIS_END;\\n\\t\\t_minMintPrice = _args.ethtxMintParams.minMintPrice;\\n\\t\\t_mu = _args.ethtxMintParams.mu;\\n\\t\\t_lambda = _args.ethtxMintParams.lambda;\\n\\t\\temit EthtxMintParamsSet(sender, _args.ethtxMintParams);\\n\\n\\t\\t_lpShareNum = _args.lpShareNumerator;\\n\\t\\t_lpShareDen = _args.lpShareDenominator;\\n\\t\\temit LpShareSet(sender, _args.lpShareNumerator, _args.lpShareDenominator);\\n\\n\\t\\tfor (uint256 i = 0; i < _lps.length(); i++) {\\n\\t\\t\\taddress lp = _lps.at(i);\\n\\t\\t\\t_lps.remove(lp);\\n\\t\\t\\temit LpRemoved(sender, lp);\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < _args.lps.length; i++) {\\n\\t\\t\\taddress lp = _args.lps[i];\\n\\t\\t\\t_lps.add(lp);\\n\\t\\t\\temit LpAdded(sender, lp);\\n\\t\\t}\\n\\n\\t\\t_lpRecipient = _args.lpRecipient;\\n\\t\\temit LpRecipientSet(sender, _args.lpRecipient);\\n\\t}\\n\\n\\tfunction addLp(address pool) external virtual override onlyOwner {\\n\\t\\tbool added = _lps.add(pool);\\n\\t\\trequire(added, \\\"ETHmxMinter: liquidity pool already added\\\");\\n\\t\\temit LpAdded(_msgSender(), pool);\\n\\t}\\n\\n\\tfunction mint() external payable virtual override whenNotPaused {\\n\\t\\trequire(block.timestamp >= _GENESIS_START, \\\"ETHmxMinter: before genesis\\\");\\n\\t\\tuint256 amountIn = msg.value;\\n\\t\\trequire(amountIn != 0, \\\"ETHmxMinter: cannot mint with zero amount\\\");\\n\\n\\t\\t// Convert to WETH\\n\\t\\taddress weth_ = weth();\\n\\t\\tIWETH(weth_).deposit{ value: amountIn }();\\n\\n\\t\\t// Check if we're in genesis\\n\\t\\tbool exitingGenesis;\\n\\t\\tuint256 ethToMintEthtx = amountIn;\\n\\t\\tif (_inGenesis) {\\n\\t\\t\\tuint256 totalGiven_ = _totalGiven.add(amountIn);\\n\\t\\t\\tif (block.timestamp >= _GENESIS_END || totalGiven_ >= _GENESIS_AMOUNT) {\\n\\t\\t\\t\\t// Exiting genesis\\n\\t\\t\\t\\tethToMintEthtx = totalGiven_;\\n\\t\\t\\t\\texitingGenesis = true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tethToMintEthtx = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Mint ETHtx and send ETHtx-WETH pair.\\n\\t\\t_mintEthtx(ethToMintEthtx);\\n\\n\\t\\t// Mint ETHmx to sender.\\n\\t\\tuint256 amountOut = ethmxFromEth(amountIn);\\n\\t\\t_mint(_msgSender(), amountOut);\\n\\t\\t_totalGiven += amountIn;\\n\\t\\t// WARN this could cause re-entrancy if we ever called an unkown address\\n\\t\\tif (exitingGenesis) {\\n\\t\\t\\t_inGenesis = false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mintWithETHtx(uint256 amount)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(amount != 0, \\\"ETHmxMinter: cannot mint with zero amount\\\");\\n\\n\\t\\tIETHtxAMM ammHandle = IETHtxAMM(ethtxAMM());\\n\\t\\tuint256 amountETHIn = ammHandle.ethToExactEthtx(amount);\\n\\t\\trequire(\\n\\t\\t\\tammHandle.ethNeeded() >= amountETHIn,\\n\\t\\t\\t\\\"ETHmxMinter: ETHtx value burnt exceeds ETH needed\\\"\\n\\t\\t);\\n\\n\\t\\taddress account = _msgSender();\\n\\t\\tIETHtx(ethtx()).burn(account, amount);\\n\\n\\t\\t_mint(account, amountETHIn);\\n\\t}\\n\\n\\tfunction mintWithWETH(uint256 amount)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(block.timestamp >= _GENESIS_START, \\\"ETHmxMinter: before genesis\\\");\\n\\t\\trequire(amount != 0, \\\"ETHmxMinter: cannot mint with zero amount\\\");\\n\\t\\taddress account = _msgSender();\\n\\n\\t\\t// Need ownership for router\\n\\t\\tIERC20(weth()).safeTransferFrom(account, address(this), amount);\\n\\n\\t\\t// Check if we're in genesis\\n\\t\\tbool exitingGenesis;\\n\\t\\tuint256 ethToMintEthtx = amount;\\n\\t\\tif (_inGenesis) {\\n\\t\\t\\tuint256 totalGiven_ = _totalGiven.add(amount);\\n\\t\\t\\tif (block.timestamp >= _GENESIS_END || totalGiven_ >= _GENESIS_AMOUNT) {\\n\\t\\t\\t\\t// Exiting genesis\\n\\t\\t\\t\\tethToMintEthtx = totalGiven_;\\n\\t\\t\\t\\texitingGenesis = true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tethToMintEthtx = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Mint ETHtx and send ETHtx-WETH pair.\\n\\t\\t_mintEthtx(ethToMintEthtx);\\n\\n\\t\\tuint256 amountOut = ethmxFromEth(amount);\\n\\t\\t_mint(account, amountOut);\\n\\t\\t_totalGiven += amount;\\n\\t\\t// WARN this could cause re-entrancy if we ever called an unkown address\\n\\t\\tif (exitingGenesis) {\\n\\t\\t\\t_inGenesis = false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pause() external virtual override onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external virtual override onlyOwner {\\n\\t\\trequire(token != _weth, \\\"ETHmxMinter: cannot recover WETH\\\");\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\n\\t\\temit Recovered(_msgSender(), token, to, amount);\\n\\t}\\n\\n\\tfunction removeLp(address pool) external virtual override onlyOwner {\\n\\t\\tbool removed = _lps.remove(pool);\\n\\t\\trequire(removed, \\\"ETHmxMinter: liquidity pool not present\\\");\\n\\t\\temit LpRemoved(_msgSender(), pool);\\n\\t}\\n\\n\\tfunction setEthmx(address addr) public virtual override onlyOwner {\\n\\t\\t_ethmx = addr;\\n\\t\\temit EthmxSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setEthmxMintParams(ETHmxMintParams memory mp)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_ethmxMintParams = mp;\\n\\t\\temit EthmxMintParamsSet(_msgSender(), mp);\\n\\t}\\n\\n\\tfunction setEthtxMintParams(ETHtxMintParams memory mp)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_minMintPrice = mp.minMintPrice;\\n\\t\\t_mu = mp.mu;\\n\\t\\t_lambda = mp.lambda;\\n\\t\\temit EthtxMintParamsSet(_msgSender(), mp);\\n\\t}\\n\\n\\tfunction setEthtx(address addr) public virtual override onlyOwner {\\n\\t\\t_ethtx = addr;\\n\\t\\temit EthtxSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setEthtxAMM(address addr) public virtual override onlyOwner {\\n\\t\\t_ethtxAMM = addr;\\n\\t\\temit EthtxAMMSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setLpRecipient(address account)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_lpRecipient = account;\\n\\t\\temit LpRecipientSet(_msgSender(), account);\\n\\t}\\n\\n\\tfunction setLpShare(uint128 numerator, uint128 denominator)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t// Also guarantees that the denominator cannot be zero.\\n\\t\\trequire(denominator > numerator, \\\"ETHmxMinter: cannot set lpShare >= 1\\\");\\n\\t\\t_lpShareNum = numerator;\\n\\t\\t_lpShareDen = denominator;\\n\\t\\temit LpShareSet(_msgSender(), numerator, denominator);\\n\\t}\\n\\n\\tfunction setWeth(address addr) public virtual override onlyOwner {\\n\\t\\t_weth = addr;\\n\\t\\temit WethSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction unpause() external virtual override onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction ethmx() public view virtual override returns (address) {\\n\\t\\treturn _ethmx;\\n\\t}\\n\\n\\tfunction ethmxMintParams()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (ETHmxMintParams memory)\\n\\t{\\n\\t\\treturn _ethmxMintParams;\\n\\t}\\n\\n\\tfunction ethmxFromEth(uint256 amountETHIn)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (amountETHIn == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tETHmxMintParams memory mp = _ethmxMintParams;\\n\\t\\tuint256 amountOut = _ethmxCurve(amountETHIn, mp);\\n\\n\\t\\tif (_inGenesis) {\\n\\t\\t\\tuint256 totalGiven_ = _totalGiven;\\n\\t\\t\\tuint256 totalEnd = totalGiven_.add(amountETHIn);\\n\\n\\t\\t\\tif (totalEnd > _GENESIS_AMOUNT) {\\n\\t\\t\\t\\t// Exiting genesis\\n\\t\\t\\t\\tuint256 amtUnder = _GENESIS_AMOUNT - totalGiven_;\\n\\t\\t\\t\\tamountOut -= amtUnder.mul(amountOut).div(amountETHIn);\\n\\t\\t\\t\\tuint256 added =\\n\\t\\t\\t\\t\\tamtUnder.mul(2).mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\t\\t\\t\\treturn amountOut.add(added);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn amountOut.mul(2);\\n\\t\\t}\\n\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction ethmxFromEthtx(uint256 amountETHtxIn)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn IETHtxAMM(ethtxAMM()).ethToExactEthtx(amountETHtxIn);\\n\\t}\\n\\n\\tfunction ethtx() public view virtual override returns (address) {\\n\\t\\treturn _ethtx;\\n\\t}\\n\\n\\tfunction ethtxMintParams()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (ETHtxMintParams memory)\\n\\t{\\n\\t\\treturn ETHtxMintParams(_minMintPrice, _mu, _lambda);\\n\\t}\\n\\n\\tfunction ethtxAMM() public view virtual override returns (address) {\\n\\t\\treturn _ethtxAMM;\\n\\t}\\n\\n\\tfunction ethtxFromEth(uint256 amountETHIn)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (amountETHIn == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tIETHtxAMM ammHandle = IETHtxAMM(_ethtxAMM);\\n\\t\\t(uint256 collat, uint256 liability) = ammHandle.cRatio();\\n\\t\\tuint256 gasPrice = ammHandle.gasPrice();\\n\\n\\t\\tuint256 basePrice;\\n\\t\\tuint256 lambda_;\\n\\t\\t{\\n\\t\\t\\tuint256 minMintPrice_ = _minMintPrice;\\n\\t\\t\\tuint256 mu_ = _mu;\\n\\t\\t\\tlambda_ = _lambda;\\n\\n\\t\\t\\tbasePrice = mu_.mul(gasPrice).add(minMintPrice_);\\n\\t\\t}\\n\\n\\t\\tif (liability == 0) {\\n\\t\\t\\t// If exiting genesis, flat 2x on minting price up to threshold\\n\\t\\t\\tif (_inGenesis) {\\n\\t\\t\\t\\tuint256 totalGiven_ = _totalGiven;\\n\\t\\t\\t\\tuint256 totalEnd = totalGiven_.add(amountETHIn);\\n\\n\\t\\t\\t\\tif (totalEnd > _GENESIS_AMOUNT) {\\n\\t\\t\\t\\t\\tuint256 amtOver = totalEnd - _GENESIS_AMOUNT;\\n\\t\\t\\t\\t\\tuint256 amtOut =\\n\\t\\t\\t\\t\\t\\t_ethToEthtx(basePrice.mul(2), amountETHIn - amtOver);\\n\\t\\t\\t\\t\\treturn amtOut.add(_ethToEthtx(basePrice, amtOver));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn _ethToEthtx(basePrice.mul(2), amountETHIn);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn _ethToEthtx(basePrice, amountETHIn);\\n\\t\\t}\\n\\n\\t\\tuint256 ethTarget;\\n\\t\\t{\\n\\t\\t\\t(uint256 cTargetNum, uint256 cTargetDen) = ammHandle.targetCRatio();\\n\\t\\t\\tethTarget = liability.mul(cTargetNum).div(cTargetDen);\\n\\t\\t}\\n\\n\\t\\tif (collat < ethTarget) {\\n\\t\\t\\tuint256 ethEnd = collat.add(amountETHIn);\\n\\t\\t\\tif (ethEnd <= ethTarget) {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\tamountETHIn = ethEnd - ethTarget;\\n\\t\\t\\tcollat = ethTarget;\\n\\t\\t}\\n\\n\\t\\tuint256 firstTerm = basePrice.mul(amountETHIn);\\n\\n\\t\\tuint256 collatDiff = collat - liability;\\n\\t\\tuint256 coeffA = lambda_.mul(liability).mul(gasPrice);\\n\\n\\t\\tuint256 secondTerm =\\n\\t\\t\\tbasePrice.mul(collatDiff).add(coeffA).mul(1e18).ln().mul(coeffA);\\n\\t\\tsecondTerm /= 1e18;\\n\\n\\t\\tuint256 thirdTerm = basePrice.mul(collatDiff.add(amountETHIn));\\n\\t\\t// avoids stack too deep error\\n\\t\\tthirdTerm = thirdTerm.add(coeffA).mul(1e18).ln().mul(coeffA) / 1e18;\\n\\n\\t\\tuint256 numerator = firstTerm.add(secondTerm).sub(thirdTerm).mul(1e18);\\n\\t\\tuint256 denominator = _GAS_PER_ETHTX.mul(basePrice).mul(basePrice);\\n\\t\\treturn numerator.div(denominator);\\n\\t}\\n\\n\\tfunction inGenesis() external view virtual override returns (bool) {\\n\\t\\treturn _inGenesis;\\n\\t}\\n\\n\\tfunction numLiquidityPools()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _lps.length();\\n\\t}\\n\\n\\tfunction liquidityPoolsAt(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn _lps.at(index);\\n\\t}\\n\\n\\tfunction lpRecipient() public view virtual override returns (address) {\\n\\t\\treturn _lpRecipient;\\n\\t}\\n\\n\\tfunction lpShare()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint128 numerator, uint128 denominator)\\n\\t{\\n\\t\\tnumerator = _lpShareNum;\\n\\t\\tdenominator = _lpShareDen;\\n\\t}\\n\\n\\tfunction totalGiven() public view virtual override returns (uint256) {\\n\\t\\treturn _totalGiven;\\n\\t}\\n\\n\\tfunction weth() public view virtual override returns (address) {\\n\\t\\treturn _weth;\\n\\t}\\n\\n\\t/* Internal Views */\\n\\n\\tfunction _ethmxCurve(uint256 amountETHIn, ETHmxMintParams memory mp)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 cRatioNum;\\n\\t\\tuint256 cRatioDen;\\n\\t\\tuint256 cTargetNum;\\n\\t\\tuint256 cTargetDen;\\n\\t\\t{\\n\\t\\t\\tIETHtxAMM ammHandle = IETHtxAMM(_ethtxAMM);\\n\\t\\t\\t(cRatioNum, cRatioDen) = ammHandle.cRatio();\\n\\n\\t\\t\\tif (cRatioDen == 0) {\\n\\t\\t\\t\\t// cRatio > cCap\\n\\t\\t\\t\\treturn amountETHIn.mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\t\\t\\t}\\n\\n\\t\\t\\t(cTargetNum, cTargetDen) = ammHandle.targetCRatio();\\n\\t\\t}\\n\\n\\t\\tuint256 ethEnd = cRatioNum.add(amountETHIn);\\n\\t\\tuint256 ethTarget = cRatioDen.mul(cTargetNum).div(cTargetDen);\\n\\t\\tuint256 ethCap = cRatioDen.mul(mp.cCapNum).div(mp.cCapDen);\\n\\t\\tif (cRatioNum >= ethCap) {\\n\\t\\t\\t// cRatio >= cCap\\n\\t\\t\\treturn amountETHIn.mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\t\\t}\\n\\n\\t\\tif (cRatioNum < ethTarget) {\\n\\t\\t\\t// cRatio < cTarget\\n\\t\\t\\tif (ethEnd > ethCap) {\\n\\t\\t\\t\\t// Add definite integral\\n\\t\\t\\t\\tuint256 curveAmt =\\n\\t\\t\\t\\t\\t_ethmxDefiniteIntegral(\\n\\t\\t\\t\\t\\t\\tethCap - ethTarget,\\n\\t\\t\\t\\t\\t\\tmp,\\n\\t\\t\\t\\t\\t\\tcTargetNum,\\n\\t\\t\\t\\t\\t\\tcTargetDen,\\n\\t\\t\\t\\t\\t\\tethTarget,\\n\\t\\t\\t\\t\\t\\tcRatioDen\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Add amount past cap\\n\\t\\t\\t\\tuint256 pastCapAmt =\\n\\t\\t\\t\\t\\t(ethEnd - ethCap).mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\n\\t\\t\\t\\t// add initial amount\\n\\t\\t\\t\\tuint256 flatAmt =\\n\\t\\t\\t\\t\\t(ethTarget - cRatioNum).mul(mp.zetaCeilNum).div(mp.zetaCeilDen);\\n\\n\\t\\t\\t\\treturn flatAmt.add(curveAmt).add(pastCapAmt);\\n\\t\\t\\t} else if (ethEnd > ethTarget) {\\n\\t\\t\\t\\t// Add definite integral for partial amount\\n\\t\\t\\t\\tuint256 ethOver = ethEnd - ethTarget;\\n\\t\\t\\t\\tuint256 curveAmt =\\n\\t\\t\\t\\t\\t_ethmxDefiniteIntegral(\\n\\t\\t\\t\\t\\t\\tethOver,\\n\\t\\t\\t\\t\\t\\tmp,\\n\\t\\t\\t\\t\\t\\tcTargetNum,\\n\\t\\t\\t\\t\\t\\tcTargetDen,\\n\\t\\t\\t\\t\\t\\tethTarget,\\n\\t\\t\\t\\t\\t\\tcRatioDen\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tuint256 ethBeforeCurve = amountETHIn - ethOver;\\n\\t\\t\\t\\tuint256 flatAmt =\\n\\t\\t\\t\\t\\tethBeforeCurve.mul(mp.zetaCeilNum).div(mp.zetaCeilDen);\\n\\t\\t\\t\\treturn flatAmt.add(curveAmt);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn amountETHIn.mul(mp.zetaCeilNum).div(mp.zetaCeilDen);\\n\\t\\t}\\n\\n\\t\\t// cTarget < cRatio < cCap\\n\\t\\tif (ethEnd > ethCap) {\\n\\t\\t\\tuint256 ethOver = ethEnd - ethCap;\\n\\t\\t\\tuint256 curveAmt =\\n\\t\\t\\t\\t_ethmxDefiniteIntegral(\\n\\t\\t\\t\\t\\tamountETHIn - ethOver,\\n\\t\\t\\t\\t\\tmp,\\n\\t\\t\\t\\t\\tcTargetNum,\\n\\t\\t\\t\\t\\tcTargetDen,\\n\\t\\t\\t\\t\\tcRatioNum,\\n\\t\\t\\t\\t\\tcRatioDen\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\tuint256 flatAmt = ethOver.mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\n\\t\\t\\treturn curveAmt.add(flatAmt);\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\t_ethmxDefiniteIntegral(\\n\\t\\t\\t\\tamountETHIn,\\n\\t\\t\\t\\tmp,\\n\\t\\t\\t\\tcTargetNum,\\n\\t\\t\\t\\tcTargetDen,\\n\\t\\t\\t\\tcRatioNum,\\n\\t\\t\\t\\tcRatioDen\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _ethmxDefiniteIntegral(\\n\\t\\tuint256 amountETHIn,\\n\\t\\tETHmxMintParams memory mp,\\n\\t\\tuint256 cTargetNum,\\n\\t\\tuint256 cTargetDen,\\n\\t\\tuint256 initCollateral,\\n\\t\\tuint256 liability\\n\\t) internal pure virtual returns (uint256) {\\n\\t\\tuint256 fctMulNum = mp.zetaFloorNum.mul(mp.zetaCeilDen).mul(cTargetDen);\\n\\t\\tuint256 fctMulDen = mp.zetaFloorDen.mul(mp.zetaCeilNum).mul(cTargetNum);\\n\\n\\t\\t// prettier-ignore\\n\\t\\tuint256 first =\\n\\t\\t\\tamountETHIn\\n\\t\\t\\t.mul(fctMulNum.mul(mp.cCapNum))\\n\\t\\t\\t.div(fctMulDen.mul(mp.cCapDen));\\n\\n\\t\\tuint256 second = amountETHIn.mul(mp.zetaFloorNum).div(mp.zetaFloorDen);\\n\\n\\t\\tuint256 tNum = fctMulNum.mul(amountETHIn);\\n\\t\\tuint256 tDen = fctMulDen.mul(2).mul(liability);\\n\\t\\tuint256 third = initCollateral.mul(2).add(amountETHIn);\\n\\t\\t// avoids stack too deep error\\n\\t\\tthird = third.mul(tNum).div(tDen);\\n\\n\\t\\treturn first.add(second).sub(third);\\n\\t}\\n\\n\\tfunction _ethToEthtx(uint256 gasPrice, uint256 amountETH)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(gasPrice != 0, \\\"ETHmxMinter: gasPrice is zero\\\");\\n\\t\\treturn amountETH.mul(1e18) / gasPrice.mul(_GAS_PER_ETHTX);\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\tIETHmx(ethmx()).mintTo(account, amount);\\n\\t}\\n\\n\\tfunction _mintEthtx(uint256 amountEthIn) internal virtual {\\n\\t\\t// Mint ETHtx.\\n\\t\\tuint256 ethtxToMint = ethtxFromEth(amountEthIn);\\n\\n\\t\\tif (ethtxToMint == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\taddress ethtx_ = ethtx();\\n\\t\\tIETHtx(ethtx_).mint(address(this), ethtxToMint);\\n\\n\\t\\t// Lock portion into liquidity in designated pools\\n\\t\\t(uint256 ethtxSentToLp, uint256 ethSentToLp) = _sendToLps(ethtxToMint);\\n\\n\\t\\t// Send the rest to the AMM.\\n\\t\\taddress ethtxAmm_ = ethtxAMM();\\n\\t\\tIERC20(weth()).safeTransfer(ethtxAmm_, amountEthIn.sub(ethSentToLp));\\n\\t\\tIERC20(ethtx_).safeTransfer(ethtxAmm_, ethtxToMint.sub(ethtxSentToLp));\\n\\t}\\n\\n\\tfunction _sendToLps(uint256 ethtxTotal)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 totalEthtxSent, uint256 totalEthSent)\\n\\t{\\n\\t\\tuint256 numLps = _lps.length();\\n\\t\\tif (numLps == 0) {\\n\\t\\t\\treturn (0, 0);\\n\\t\\t}\\n\\n\\t\\t(uint256 lpShareNum, uint256 lpShareDen) = lpShare();\\n\\t\\tif (lpShareNum == 0) {\\n\\t\\t\\treturn (0, 0);\\n\\t\\t}\\n\\n\\t\\tuint256 ethtxToLp = ethtxTotal.mul(lpShareNum).div(lpShareDen).div(numLps);\\n\\t\\tuint256 ethToLp = IETHtxAMM(ethtxAMM()).ethToExactEthtx(ethtxToLp);\\n\\t\\taddress ethtx_ = ethtx();\\n\\t\\taddress weth_ = weth();\\n\\t\\taddress to = lpRecipient();\\n\\n\\t\\tfor (uint256 i = 0; i < numLps; i++) {\\n\\t\\t\\taddress pool = _lps.at(i);\\n\\n\\t\\t\\tIERC20(ethtx_).safeIncreaseAllowance(pool, ethtxToLp);\\n\\t\\t\\tIERC20(weth_).safeIncreaseAllowance(pool, ethToLp);\\n\\n\\t\\t\\t(uint256 ethtxSent, uint256 ethSent, ) =\\n\\t\\t\\t\\tIPool(pool).addLiquidity(\\n\\t\\t\\t\\t\\tethtx_,\\n\\t\\t\\t\\t\\tweth_,\\n\\t\\t\\t\\t\\tethtxToLp,\\n\\t\\t\\t\\t\\tethToLp,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\tto,\\n\\t\\t\\t\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\ttotalEthtxSent = totalEthtxSent.add(ethtxSent);\\n\\t\\t\\ttotalEthSent = totalEthSent.add(ethSent);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x848122c2bb598266a07e93b30929e14b99cbe10fea36477130fe9faca9730272\",\"license\":\"Apache-2.0\"},\"contracts/exchanges/ETHmxMinter/ETHmxMinterData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"../interfaces/IETHmxMinter.sol\\\";\\n\\nabstract contract ETHmxMinterData {\\n\\taddress internal _ethmx;\\n\\taddress internal _ethtx;\\n\\taddress internal _ethtxAMM;\\n\\taddress internal _weth;\\n\\n\\t// ETHmx minting\\n\\tuint256 internal _totalGiven;\\n\\tIETHmxMinter.ETHmxMintParams internal _ethmxMintParams;\\n\\n\\t// ETHtx minting\\n\\tuint128 internal _minMintPrice;\\n\\tuint64 internal _mu;\\n\\tuint64 internal _lambda;\\n\\n\\t// Liquidity pool distribution\\n\\tuint128 internal _lpShareNum;\\n\\tuint128 internal _lpShareDen;\\n\\tEnumerableSet.AddressSet internal _lps;\\n\\taddress internal _lpRecipient;\\n\\n\\tbool internal _inGenesis;\\n\\n\\tuint256[39] private __gap;\\n}\\n\",\"keccak256\":\"0x3f9a171eb5bdefee56a3a85a73de2feca5484dda163ed33fabffac2683efa914\",\"license\":\"Apache-2.0\"},\"contracts/exchanges/interfaces/IETHmxMinter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IETHmxMinter {\\n\\t/* Types */\\n\\n\\tstruct ETHmxMintParams {\\n\\t\\t// Uses a single 32 byte slot and avoids stack too deep errors\\n\\t\\tuint32 cCapNum;\\n\\t\\tuint32 cCapDen;\\n\\t\\tuint32 zetaFloorNum;\\n\\t\\tuint32 zetaFloorDen;\\n\\t\\tuint32 zetaCeilNum;\\n\\t\\tuint32 zetaCeilDen;\\n\\t}\\n\\n\\tstruct ETHtxMintParams {\\n\\t\\tuint128 minMintPrice;\\n\\t\\tuint64 mu;\\n\\t\\tuint64 lambda;\\n\\t}\\n\\n\\t/* Views */\\n\\n\\tfunction ethmx() external view returns (address);\\n\\n\\tfunction ethmxMintParams() external view returns (ETHmxMintParams memory);\\n\\n\\tfunction ethmxFromEth(uint256 amountETHIn) external view returns (uint256);\\n\\n\\tfunction ethmxFromEthtx(uint256 amountETHtxIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethtx() external view returns (address);\\n\\n\\tfunction ethtxMintParams() external view returns (ETHtxMintParams memory);\\n\\n\\tfunction ethtxAMM() external view returns (address);\\n\\n\\tfunction ethtxFromEth(uint256 amountETHIn) external view returns (uint256);\\n\\n\\tfunction inGenesis() external view returns (bool);\\n\\n\\tfunction numLiquidityPools() external view returns (uint256);\\n\\n\\tfunction liquidityPoolsAt(uint256 index) external view returns (address);\\n\\n\\tfunction lpRecipient() external view returns (address);\\n\\n\\tfunction lpShare()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction totalGiven() external view returns (uint256);\\n\\n\\tfunction weth() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction addLp(address pool) external;\\n\\n\\tfunction mint() external payable;\\n\\n\\tfunction mintWithETHtx(uint256 amountIn) external;\\n\\n\\tfunction mintWithWETH(uint256 amountIn) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction removeLp(address pool) external;\\n\\n\\tfunction setEthmx(address addr) external;\\n\\n\\tfunction setEthmxMintParams(ETHmxMintParams memory mp) external;\\n\\n\\tfunction setEthtxMintParams(ETHtxMintParams memory mp) external;\\n\\n\\tfunction setEthtx(address addr) external;\\n\\n\\tfunction setEthtxAMM(address addr) external;\\n\\n\\tfunction setLpRecipient(address account) external;\\n\\n\\tfunction setLpShare(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setWeth(address addr) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent EthmxSet(address indexed author, address indexed addr);\\n\\tevent EthmxMintParamsSet(address indexed author, ETHmxMintParams mp);\\n\\tevent EthtxMintParamsSet(address indexed author, ETHtxMintParams mp);\\n\\tevent EthtxSet(address indexed author, address indexed addr);\\n\\tevent EthtxAMMSet(address indexed author, address indexed addr);\\n\\tevent LpAdded(address indexed author, address indexed account);\\n\\tevent LpRecipientSet(address indexed author, address indexed account);\\n\\tevent LpRemoved(address indexed author, address indexed account);\\n\\tevent LpShareSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent Recovered(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent WethSet(address indexed author, address indexed addr);\\n}\\n\",\"keccak256\":\"0x26605fb3b1ba9901a5b00f7ac1f3b93a5631e7d1ce146134d8fd733c6dac1f43\",\"license\":\"Apache-2.0\"},\"contracts/exchanges/interfaces/IETHtxAMM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IETHtxAMM {\\n\\t/* Views */\\n\\n\\tfunction cRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 numerator, uint256 denominator);\\n\\n\\tfunction cRatioBelowTarget() external view returns (bool);\\n\\n\\tfunction ethNeeded() external view returns (uint256);\\n\\n\\tfunction ethtx() external view returns (address);\\n\\n\\tfunction exactEthToEthtx(uint256 amountEthIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethToExactEthtx(uint256 amountEthtxOut)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction exactEthtxToEth(uint256 amountEthtxIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethtxToExactEth(uint256 amountEthOut)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethSupply() external view returns (uint256);\\n\\n\\tfunction ethSupplyTarget() external view returns (uint256);\\n\\n\\tfunction ethtxAvailable() external view returns (uint256);\\n\\n\\tfunction ethtxOutstanding() external view returns (uint256);\\n\\n\\tfunction feeLogic() external view returns (address);\\n\\n\\tfunction gasOracle() external view returns (address);\\n\\n\\tfunction gasPerETHtx() external pure returns (uint256);\\n\\n\\tfunction gasPrice() external view returns (uint256);\\n\\n\\tfunction gasPriceAtRedemption() external view returns (uint256);\\n\\n\\tfunction maxGasPrice() external view returns (uint256);\\n\\n\\tfunction targetCRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction weth() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction swapEthForEthtx(uint256 deadline) external payable;\\n\\n\\tfunction swapWethForEthtx(uint256 amountIn, uint256 deadline) external;\\n\\n\\tfunction swapEthForExactEthtx(uint256 amountOut, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable;\\n\\n\\tfunction swapWethForExactEthtx(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactEthForEthtx(uint256 amountOutMin, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable;\\n\\n\\tfunction swapExactWethForEthtx(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction swapEthtxForExactEth(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction swapExactEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setEthtx(address account) external;\\n\\n\\tfunction setGasOracle(address account) external;\\n\\n\\tfunction setTargetCRatio(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setWETH(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent ETHtxSet(address indexed author, address indexed account);\\n\\tevent GasOracleSet(address indexed author, address indexed account);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent TargetCRatioSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent WETHSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0x2e93eccde4cc455aa0e55c0dedb82a993b730d16d22f24aa4042e2c2ed19778e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/UintLog.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\nlibrary UintLog {\\n\\tuint256 internal constant _LOG2_E = 1442695040888963407;\\n\\n\\tfunction ln(uint256 x) internal pure returns (uint256) {\\n\\t\\treturn (blog2(x) * 1e18) / _LOG2_E;\\n\\t}\\n\\n\\t// Most significant bit\\n\\t// prettier-ignore\\n\\tfunction msb(uint256 x) internal pure returns (uint256 n) {\\n\\t\\tif (x >= 0x100000000000000000000000000000000) { x >>= 128; n += 128; }\\n\\t\\tif (x >= 0x10000000000000000) { x >>= 64; n += 64; }\\n\\t\\tif (x >= 0x100000000) { x >>= 32; n += 32; }\\n\\t\\tif (x >= 0x10000) { x >>= 16; n += 16; }\\n\\t\\tif (x >= 0x100) { x >>= 8; n += 8; }\\n\\t\\tif (x >= 0x10) { x >>= 4; n += 4; }\\n\\t\\tif (x >= 0x4) { x >>= 2; n += 2; }\\n\\t\\tif (x >= 0x2) { /* x >>= 1; */ n += 1; }\\n\\t}\\n\\n\\t// Approximate binary log of uint\\n\\t// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n\\t// https://github.com/hifi-finance/prb-math/blob/5c6817860496ec40fd269934f3c531822402f1ce/contracts/PRBMathUD60x18.sol#L334-L380\\n\\tfunction blog2(uint256 x) internal pure returns (uint256 result) {\\n\\t\\trequire(x >= 1e18, \\\"blog2 too small\\\");\\n\\t\\tuint256 n = msb(x / 1e18);\\n\\n\\t\\tresult = n * 1e18;\\n\\t\\tuint256 y = x >> n;\\n\\n\\t\\tif (y == 1e18) {\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 delta = 5e17; delta > 0; delta >>= 1) {\\n\\t\\t\\ty = (y * y) / 1e18;\\n\\t\\t\\tif (y >= 2e18) {\\n\\t\\t\\t\\tresult += delta;\\n\\t\\t\\t\\ty >>= 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x639f8a55772272422360660e0d570e25aa249270bd187a59902ab100e475549d\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IETHmx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IETHmx {\\n\\t/* Views */\\n\\n\\tfunction minter() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction mintTo(address account, uint256 amount) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setMinter(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent MinterSet(address indexed author, address indexed account);\\n\\tevent Recovered(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0x13cbb387d5050416651d92116b78d61bcb67cf4fbbd2aaac079aa8f47c35c0ab\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IETHtx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IETHtx {\\n\\t/* Views */\\n\\n\\tfunction feeLogic() external view returns (address);\\n\\n\\tfunction lastRebaseTime() external view returns (uint256);\\n\\n\\tfunction sharesBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction sharesPerTokenX18() external view returns (uint256);\\n\\n\\tfunction totalShares() external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction burn(address account, uint256 amount) external;\\n\\n\\tfunction mint(address account, uint256 amount) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction rebase() external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setFeeLogic(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent FeeLogicSet(address indexed author, address indexed account);\\n\\tevent Rebased(address indexed author, uint256 totalShares);\\n\\tevent Recovered(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0xfca2d38ad216e97dc464a136e4dbb87d51766061914fe63307caeb6b79a3deae\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xa67afe56374106100a0f6b7c269319f9a44a7050fd489610859280e8a63c6ec3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061026a5760003560e01c8063715018a611610153578063b9e05c6a116100cb578063f14744b11161007f578063f40fbb3c11610064578063f40fbb3c14610657578063fa750d581461066c578063fa8c076f146106815761026a565b8063f14744b114610622578063f2fde38b146106375761026a565b8063ea03798e116100b0578063ea03798e146105bf578063ebc38ab0146105df578063ed16de8a146106025761026a565b8063b9e05c6a1461057f578063c30270101461059f5761026a565b8063902dd186116101225780639e5094dd116101075780639e5094dd1461051d578063ad6d9bb51461053d578063b8d1452f1461055f5761026a565b8063902dd186146104e85780639c84fe5a146104fd5761026a565b8063715018a6146104895780637a9f241b1461049e5780638456cb59146104be5780638da5cb5b146104d35761026a565b80633f4ba83a116101e65780634b00b4d2116101b557806363fb53e81161019a57806363fb53e8146104295780636aec2fae146104495780636fa968d7146104695761026a565b80634b00b4d2146103e75780635c975abb146104075761026a565b80633f4ba83a146103865780633fc8cef31461039b57806343b86a01146103bd578063452e68dd146103d25761026a565b806315aad0bc1161023d57806319ab453c1161022257806319ab453c1461032457806320a639f3146103445780633dc82dce146103645761026a565b806315aad0bc146102d957806316268f58146103045761026a565b806306f200031461026f5780630dd00794146102915780631171bda9146102b15780631249c58b146102d1575b600080fd5b34801561027b57600080fd5b5061028f61028a366004615075565b6106a1565b005b34801561029d57600080fd5b5061028f6102ac3660046150ca565b6107fd565b3480156102bd57600080fd5b5061028f6102cc36600461508f565b610a6d565b61028f610c13565b3480156102e557600080fd5b506102ee610e3e565b6040516102fb91906156ce565b60405180910390f35b34801561031057600080fd5b5061028f61031f366004615210565b610e44565b34801561033057600080fd5b5061028f61033f366004615075565b610ffe565b34801561035057600080fd5b5061028f61035f366004615075565b61112c565b34801561037057600080fd5b50610379611264565b6040516102fb9190615668565b34801561039257600080fd5b5061028f6112db565b3480156103a757600080fd5b506103b061138d565b6040516102fb91906152f6565b3480156103c957600080fd5b506102ee6113a9565b3480156103de57600080fd5b506103b06113ba565b3480156103f357600080fd5b5061028f6104023660046151f5565b6113d6565b34801561041357600080fd5b5061041c61159b565b6040516102fb9190615393565b34801561043557600080fd5b5061028f610444366004615276565b6115a4565b34801561045557600080fd5b506102ee610464366004615276565b611753565b34801561047557600080fd5b5061028f610484366004615276565b6117ed565b34801561049557600080fd5b5061028f611a78565b3480156104aa57600080fd5b5061028f6104b9366004615075565b611b8f565b3480156104ca57600080fd5b5061028f611ce2565b3480156104df57600080fd5b506103b0611d92565b3480156104f457600080fd5b506103b0611dae565b34801561050957600080fd5b5061028f6105183660046150e5565b611dca565b34801561052957600080fd5b506102ee610538366004615276565b6125ec565b34801561054957600080fd5b5061055261276f565b6040516102fb9190615612565b34801561056b57600080fd5b5061028f61057a366004615075565b612808565b34801561058b57600080fd5b5061028f61059a366004615075565b612940565b3480156105ab57600080fd5b5061028f6105ba366004615075565b612a78565b3480156105cb57600080fd5b506102ee6105da366004615276565b612bb0565b3480156105eb57600080fd5b506105f4613010565b6040516102fb9291906156ab565b34801561060e57600080fd5b506103b061061d366004615276565b613041565b34801561062e57600080fd5b506103b061304e565b34801561064357600080fd5b5061028f610652366004615075565b61306a565b34801561066357600080fd5b5061041c61320c565b34801561067857600080fd5b506103b061322d565b34801561068d57600080fd5b5061028f61069c366004615075565b613249565b6106a9613387565b73ffffffffffffffffffffffffffffffffffffffff166106c7611d92565b73ffffffffffffffffffffffffffffffffffffffff161461074957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000610756609f8361338b565b905080610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f906155b5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166107b7613387565b73ffffffffffffffffffffffffffffffffffffffff167f10d3462c762984834f677549645de34dbf6a2e4473787fb985137faf5c2937b960405160405180910390a35050565b610805613387565b73ffffffffffffffffffffffffffffffffffffffff16610823611d92565b73ffffffffffffffffffffffffffffffffffffffff16146108a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8051609c8054602084015160408501516060860151608087015160a08801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090951663ffffffff978816177fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff1664010000000094881694909402939093177fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000092871692909202919091177fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff166c0100000000000000000000000091861691909102177fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000091851691909102177fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000009390911692909202919091179055610a1d613387565b73ffffffffffffffffffffffffffffffffffffffff167fdfc1e649d827769bf3eb8c77f6f4fba933adb866770c172942a311f06a25c94382604051610a629190615612565b60405180910390a250565b610a75613387565b73ffffffffffffffffffffffffffffffffffffffff16610a93611d92565b73ffffffffffffffffffffffffffffffffffffffff1614610b1557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b609a5473ffffffffffffffffffffffffffffffffffffffff84811691161415610b6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90615523565b610b8b73ffffffffffffffffffffffffffffffffffffffff841683836133b6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16610bc1613387565b73ffffffffffffffffffffffffffffffffffffffff167ffa6e44909e1c69606f847ee93c3339a424b53b345ed377c38ab410d32e7f70a784604051610c0691906156ce565b60405180910390a4505050565b610c1b61159b565b15610c8757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b6360993c60421015610cc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90615458565b3480610cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061548f565b6000610d0761138d565b90508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5157600080fd5b505af1158015610d65573d6000803e3d6000fd5b505060a1546000935085925074010000000000000000000000000000000000000000900460ff16159050610dd957609b54600090610da39086613448565b90506360a276e042101580610dc1575068a2a15d09519be000008110155b15610dd25780915060019250610dd7565b600091505b505b610de2816134bc565b6000610ded856125ec565b9050610e00610dfa613387565b826135eb565b609b8054860190558215610e375760a180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b5050505050565b609b5490565b610e4c613387565b73ffffffffffffffffffffffffffffffffffffffff16610e6a611d92565b73ffffffffffffffffffffffffffffffffffffffff1614610eec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b816fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611610f49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f906153fb565b609e80546fffffffffffffffffffffffffffffffff838116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921716179055610fab613387565b73ffffffffffffffffffffffffffffffffffffffff167fd6391f223f7285c7743c00ee068693030a4a8d7542474aab8256e054a8fc2a248383604051610ff29291906156ab565b60405180910390a25050565b600054610100900460ff1680611017575061101761365b565b80611025575060005460ff16155b61107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615788602e913960400191505060405180910390fd5b600054610100900460ff161580156110e057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6110e861366c565b6110f18261377f565b6110f9613901565b801561112857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b611134613387565b73ffffffffffffffffffffffffffffffffffffffff16611152611d92565b73ffffffffffffffffffffffffffffffffffffffff16146111d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915561121f613387565b73ffffffffffffffffffffffffffffffffffffffff167f8539add575762117a99618f95a6bba75a43ab0a1709316da144c41dad05187e360405160405180910390a350565b61126c614e3d565b5060408051606081018252609d546fffffffffffffffffffffffffffffffff8116825267ffffffffffffffff7001000000000000000000000000000000008204811660208401527801000000000000000000000000000000000000000000000000909104169181019190915290565b6112e3613387565b73ffffffffffffffffffffffffffffffffffffffff16611301611d92565b73ffffffffffffffffffffffffffffffffffffffff161461138357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61138b613a3c565b565b609a5473ffffffffffffffffffffffffffffffffffffffff1690565b60006113b5609f613b2a565b905090565b60a15473ffffffffffffffffffffffffffffffffffffffff1690565b6113de613387565b73ffffffffffffffffffffffffffffffffffffffff166113fc611d92565b73ffffffffffffffffffffffffffffffffffffffff161461147e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8051609d8054602084015160408501517fffffffffffffffffffffffffffffffff000000000000000000000000000000009092166fffffffffffffffffffffffffffffffff909416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000067ffffffffffffffff948516021777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009390911692909202919091179055611556613387565b73ffffffffffffffffffffffffffffffffffffffff167f43162542ad3f050bdfc1b6b0292467ab7c5dd1d5a486694f5e229aef2b4bbd3482604051610a629190615668565b60655460ff1690565b6115ac61159b565b1561161857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b6360993c60421015611656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90615458565b8061168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061548f565b6000611697613387565b90506116c58130846116a761138d565b73ffffffffffffffffffffffffffffffffffffffff16929190613b35565b60a154600090839074010000000000000000000000000000000000000000900460ff161561173357609b546000906116fd9086613448565b90506360a276e04210158061171b575068a2a15d09519be000008110155b1561172c5780915060019250611731565b600091505b505b61173c816134bc565b6000611747856125ec565b9050610e0084826135eb565b600061175d61304e565b73ffffffffffffffffffffffffffffffffffffffff16635572f264836040518263ffffffff1660e01b815260040161179591906156ce565b60206040518083038186803b1580156117ad57600080fd5b505afa1580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e5919061528e565b90505b919050565b6117f561159b565b1561186157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b80611898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061548f565b60006118a261304e565b905060008173ffffffffffffffffffffffffffffffffffffffff16635572f264846040518263ffffffff1660e01b81526004016118df91906156ce565b60206040518083038186803b1580156118f757600080fd5b505afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061528e565b9050808273ffffffffffffffffffffffffffffffffffffffff1663977507c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561197857600080fd5b505afa15801561198c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b0919061528e565b10156119e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061539e565b60006119f2613387565b90506119fc611dae565b73ffffffffffffffffffffffffffffffffffffffff16639dc29fac82866040518363ffffffff1660e01b8152600401611a3692919061536d565b600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b50505050611a7281836135eb565b50505050565b611a80613387565b73ffffffffffffffffffffffffffffffffffffffff16611a9e611d92565b73ffffffffffffffffffffffffffffffffffffffff1614611b2057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611b97613387565b73ffffffffffffffffffffffffffffffffffffffff16611bb5611d92565b73ffffffffffffffffffffffffffffffffffffffff1614611c3757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000611c44609f83613bca565b905080611c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90615558565b8173ffffffffffffffffffffffffffffffffffffffff16611c9c613387565b73ffffffffffffffffffffffffffffffffffffffff167f7476fa20123a46ab0692895c298878d1265d37a204f912e0f12acd6bd73a5c8e60405160405180910390a35050565b611cea613387565b73ffffffffffffffffffffffffffffffffffffffff16611d08611d92565b73ffffffffffffffffffffffffffffffffffffffff1614611d8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61138b613bec565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b60985473ffffffffffffffffffffffffffffffffffffffff1690565b611dd2613387565b73ffffffffffffffffffffffffffffffffffffffff16611df0611d92565b73ffffffffffffffffffffffffffffffffffffffff1614611e7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000611e7c613387565b8251609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405192935091908316907f850cd0e1dc6449ad3cec82204139b7f56dfccbb15cfc97018391e1ceeb1fed2890600090a36020820151609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405190918316907fdbf8baa510d0cc960f9bd90d5ef0c247e25196790bd4e15b4bbe0e095d0de3a890600090a3604082810151609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091559151908316907f8539add575762117a99618f95a6bba75a43ab0a1709316da144c41dad05187e390600090a36060820151609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405190918316907fad62520892a45ad185d5f7ee902397e0ec2b3e32966a740cfab8e4db8cc60f0990600090a36080828101518051609c8054602084015160408086015160608701519787015160a08801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090951663ffffffff978816177fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff1664010000000094881694909402939093177fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000091871691909102177fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff166c0100000000000000000000000097861697909702969096177fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000091851691909102177fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000009390911692909202919091179055905173ffffffffffffffffffffffffffffffffffffffff8316917fdfc1e649d827769bf3eb8c77f6f4fba933adb866770c172942a311f06a25c943916122139190615612565b60405180910390a260a180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff166360a276e0421115740100000000000000000000000000000000000000000217905560a08201518051609d805460208401516040808601517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093166fffffffffffffffffffffffffffffffff909516949094177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000067ffffffffffffffff928316021777ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000091909216021790555173ffffffffffffffffffffffffffffffffffffffff8316917f43162542ad3f050bdfc1b6b0292467ab7c5dd1d5a486694f5e229aef2b4bbd34916123789190615668565b60405180910390a260c0820151609e805460e08501516fffffffffffffffffffffffffffffffff818116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317169190911790915560405173ffffffffffffffffffffffffffffffffffffffff8416927fd6391f223f7285c7743c00ee068693030a4a8d7542474aab8256e054a8fc2a249261242e926156ab565b60405180910390a260005b612443609f613b2a565b8110156124c8576000612457609f83613cb4565b9050612464609f82613bca565b508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f7476fa20123a46ab0692895c298878d1265d37a204f912e0f12acd6bd73a5c8e60405160405180910390a350600101612439565b5060005b8261010001515181101561256f57600083610100015182815181106124ed57fe5b6020026020010151905061250b81609f61338b90919063ffffffff16565b508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f10d3462c762984834f677549645de34dbf6a2e4473787fb985137faf5c2937b960405160405180910390a3506001016124cc565b5061012082015160a180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405190918316907f741f5aed950b48656cdef9192aa78f2eef7397985bce1bd294a52bbd9d8d5c5a90600090a35050565b6000816125fb575060006117e8565b6040805160c081018252609c5463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c0100000000000000000000000081048316606083015270010000000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015260006126948483613cc0565b60a15490915074010000000000000000000000000000000000000000900460ff161561276857609b5460006126c98287613448565b905068a2a15d09519be000008111156127525768a2a15d09519be000008290036126fd876126f78387614084565b906140f7565b840393506000612739866060015163ffffffff166126f7886040015163ffffffff1661273360028761408490919063ffffffff16565b90614084565b90506127458582613448565b96505050505050506117e8565b61275d836002614084565b9450505050506117e8565b9392505050565b612777614e5d565b506040805160c081018252609c5463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c0100000000000000000000000081048316606083015270010000000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015290565b612810613387565b73ffffffffffffffffffffffffffffffffffffffff1661282e611d92565b73ffffffffffffffffffffffffffffffffffffffff16146128b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556128fb613387565b73ffffffffffffffffffffffffffffffffffffffff167fad62520892a45ad185d5f7ee902397e0ec2b3e32966a740cfab8e4db8cc60f0960405160405180910390a350565b612948613387565b73ffffffffffffffffffffffffffffffffffffffff16612966611d92565b73ffffffffffffffffffffffffffffffffffffffff16146129e857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60a180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155612a33613387565b73ffffffffffffffffffffffffffffffffffffffff167f741f5aed950b48656cdef9192aa78f2eef7397985bce1bd294a52bbd9d8d5c5a60405160405180910390a350565b612a80613387565b73ffffffffffffffffffffffffffffffffffffffff16612a9e611d92565b73ffffffffffffffffffffffffffffffffffffffff1614612b2057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155612b6b613387565b73ffffffffffffffffffffffffffffffffffffffff167f850cd0e1dc6449ad3cec82204139b7f56dfccbb15cfc97018391e1ceeb1fed2860405160405180910390a350565b600081612bbf575060006117e8565b609954604080517f65ac74db000000000000000000000000000000000000000000000000000000008152815173ffffffffffffffffffffffffffffffffffffffff90931692600092839285926365ac74db92600480840193919291829003018186803b158015612c2e57600080fd5b505afa158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6691906152a6565b9150915060008373ffffffffffffffffffffffffffffffffffffffff1663fe173b976040518163ffffffff1660e01b815260040160206040518083038186803b158015612cb257600080fd5b505afa158015612cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cea919061528e565b609d5490915060009067ffffffffffffffff780100000000000000000000000000000000000000000000000082048116916fffffffffffffffffffffffffffffffff81169170010000000000000000000000000000000090910416612d5982612d538388614084565b90613448565b9350505083612e365760a15474010000000000000000000000000000000000000000900460ff1615612e2c57609b546000612d94828b613448565b905068a2a15d09519be00000811115612e09577fffffffffffffffffffffffffffffffffffffffffffffff5d5ea2f6ae6420000081016000612de2612dda876002614084565b838e03614178565b9050612df8612df18784614178565b8290613448565b9a50505050505050505050506117e8565b612e1d612e17856002614084565b8b614178565b985050505050505050506117e8565b6127458289614178565b60008060008873ffffffffffffffffffffffffffffffffffffffff1663805f751a6040518163ffffffff1660e01b8152600401604080518083038186803b158015612e8057600080fd5b505afa158015612e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb89190615248565b6fffffffffffffffffffffffffffffffff9182169350169050612edf816126f78985614084565b9250505080861015612f1a576000612ef7878b613448565b9050818111612f11576000985050505050505050506117e8565b81900398509450845b6000612f26848b614084565b90508587036000612f3b87612733878b614084565b90506000612f6382612733612f5e670de0b6b3a76400008284612d538e8b614084565b6141d6565b9050670de0b6b3a7640000810490506000612f91612f8a8f8661344890919063ffffffff16565b8990614084565b9050670de0b6b3a7640000612faf84612733612f5e84828785613448565b81612fb657fe5b0490506000612fdb670de0b6b3a764000061273384612fd58a88613448565b90614202565b90506000612fef8a61273361520882614084565b9050612ffb82826140f7565b9e505050505050505050505050505050919050565b609e546fffffffffffffffffffffffffffffffff808216927001000000000000000000000000000000009092041690565b60006117e5609f83613cb4565b60995473ffffffffffffffffffffffffffffffffffffffff1690565b613072613387565b73ffffffffffffffffffffffffffffffffffffffff16613090611d92565b73ffffffffffffffffffffffffffffffffffffffff161461311257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661317e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061573c6026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60a15474010000000000000000000000000000000000000000900460ff1690565b60975473ffffffffffffffffffffffffffffffffffffffff1690565b613251613387565b73ffffffffffffffffffffffffffffffffffffffff1661326f611d92565b73ffffffffffffffffffffffffffffffffffffffff16146132f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915561333c613387565b73ffffffffffffffffffffffffffffffffffffffff167fdbf8baa510d0cc960f9bd90d5ef0c247e25196790bd4e15b4bbe0e095d0de3a860405160405180910390a350565b3b151590565b3390565b60006133ad8373ffffffffffffffffffffffffffffffffffffffff8416614279565b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526134439084906142c3565b505050565b6000828201838110156133ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006134c782612bb0565b9050806134d457506135e8565b60006134de611dae565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906340c10f1990613535903090869060040161536d565b600060405180830381600087803b15801561354f57600080fd5b505af1158015613563573d6000803e3d6000fd5b505050506000806135738461439b565b91509150600061358161304e565b90506135b6816135918885614202565b61359961138d565b73ffffffffffffffffffffffffffffffffffffffff1691906133b6565b6135e2816135c48786614202565b73ffffffffffffffffffffffffffffffffffffffff871691906133b6565b50505050505b50565b6135f361322d565b73ffffffffffffffffffffffffffffffffffffffff1663449a52f883836040518363ffffffff1660e01b815260040161362d92919061536d565b600060405180830381600087803b15801561364757600080fd5b505af11580156135e2573d6000803e3d6000fd5b600061366630613381565b15905090565b600054610100900460ff1680613685575061368561365b565b80613693575060005460ff16155b6136e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615788602e913960400191505060405180910390fd5b600054610100900460ff1615801561374e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b80156135e857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613798575061379861365b565b806137a6575060005460ff16155b6137fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615788602e913960400191505060405180910390fd5b600054610100900460ff1615801561386157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561112857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b600054610100900460ff168061391a575061391a61365b565b80613928575060005460ff16155b61397d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615788602e913960400191505060405180910390fd5b600054610100900460ff161580156139e357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580156135e857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b613a4461159b565b613aaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613b00613387565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190a1565b60006117e58261460a565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611a729085906142c3565b60006133ad8373ffffffffffffffffffffffffffffffffffffffff841661460e565b613bf461159b565b15613c6057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613b00613387565b60006133ad83836146f2565b609954604080517f65ac74db0000000000000000000000000000000000000000000000000000000081528151600093849384938493849373ffffffffffffffffffffffffffffffffffffffff169283926365ac74db9260048083019392829003018186803b158015613d3157600080fd5b505afa158015613d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6991906152a6565b909550935083613daa57613d9e876060015163ffffffff166126f7896040015163ffffffff168b61408490919063ffffffff16565b955050505050506133b0565b8073ffffffffffffffffffffffffffffffffffffffff1663805f751a6040518163ffffffff1660e01b8152600401604080518083038186803b158015613def57600080fd5b505afa158015613e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e279190615248565b6fffffffffffffffffffffffffffffffff918216945016915060009050613e4e8589613448565b90506000613e60836126f78787614084565b90506000613e8f896020015163ffffffff166126f78b6000015163ffffffff168961408490919063ffffffff16565b9050808710613ed157613ec3896060015163ffffffff166126f78b6040015163ffffffff168d61408490919063ffffffff16565b9750505050505050506133b0565b818710156140105780831115613f76576000613ef38383038b8888878c614770565b90506000613f248b6060015163ffffffff166126f78d6040015163ffffffff1686890361408490919063ffffffff16565b90506000613f558c60a0015163ffffffff166126f78e6080015163ffffffff168d890361408490919063ffffffff16565b9050613f6582612d538386613448565b9a50505050505050505050506133b0565b81831115613fe5578183036000613f91828c8989888d614770565b90506000828d0390506000613fc78d60a0015163ffffffff166126f78f6080015163ffffffff168561408490919063ffffffff16565b9050613fd38184613448565b9b5050505050505050505050506133b0565b613ec38960a0015163ffffffff166126f78b6080015163ffffffff168d61408490919063ffffffff16565b8083111561406857808303600061402d828d038c89898d8d614770565b9050600061405c8c6060015163ffffffff166126f78e6040015163ffffffff168661408490919063ffffffff16565b9050613f658282613448565b6140768a8a87878b8b614770565b9a9950505050505050505050565b600082614093575060006133b0565b828202828482816140a057fe5b04146133ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806157b66021913960400191505060405180910390fd5b600080821161416757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161417057fe5b049392505050565b6000826141b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f906154ec565b6141bd83615208614084565b6141cf83670de0b6b3a7640000614084565b8161417057fe5b60006714057b7ef767814f6141ea836148ad565b670de0b6b3a764000002816141fb57fe5b0492915050565b60008282111561427357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600061428583836149a8565b6142bb575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556133b0565b5060006133b0565b6000614325826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166149c09092919063ffffffff16565b8051909150156134435780806020019051602081101561434457600080fd5b5051613443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806157d7602a913960400191505060405180910390fd5b60008060006143aa609f613b2a565b9050806143be576000809250925050614605565b6000806143c9613010565b6fffffffffffffffffffffffffffffffff1691506fffffffffffffffffffffffffffffffff16915081600014156144095760008094509450505050614605565b600061441b846126f784818b88614084565b9050600061442761304e565b73ffffffffffffffffffffffffffffffffffffffff16635572f264836040518263ffffffff1660e01b815260040161445f91906156ce565b60206040518083038186803b15801561447757600080fd5b505afa15801561448b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144af919061528e565b905060006144bb611dae565b905060006144c761138d565b905060006144d36113ba565b905060005b888110156145fb5760006144ed609f83613cb4565b905061451073ffffffffffffffffffffffffffffffffffffffff861682896149d7565b61453173ffffffffffffffffffffffffffffffffffffffff851682886149d7565b6000808273ffffffffffffffffffffffffffffffffffffffff1663e8e3370088888c8c6000808c426040518963ffffffff1660e01b815260040161457c989796959493929190615317565b606060405180830381600087803b15801561459657600080fd5b505af11580156145aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ce91906152c9565b5090925090506145de8e83613448565b9d506145ea8d82613448565b9c5050600190920191506144d89050565b5050505050505050505b915091565b5490565b600081815260018301602052604081205480156146e85783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061465f57fe5b906000526020600020015490508087600001848154811061467c57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806146ac57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506133b0565b60009150506133b0565b8154600090821061474e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061571a6022913960400191505060405180910390fd5b82600001828154811061475d57fe5b9060005260206000200154905092915050565b60008061479e856127338960a0015163ffffffff168a6040015163ffffffff1661408490919063ffffffff16565b905060006147cd876127338a6080015163ffffffff168b6060015163ffffffff1661408490919063ffffffff16565b905060006148186147f18a6020015163ffffffff168461408490919063ffffffff16565b6126f76148118c6000015163ffffffff168761408490919063ffffffff16565b8d90614084565b905060006148478a6060015163ffffffff166126f78c6040015163ffffffff168e61408490919063ffffffff16565b90506000614855858d614084565b9050600061486888612733876002614084565b9050600061487b8e612d538c6002614084565b905061488b826126f78386614084565b905061489b81612fd58787613448565b9e9d5050505050505050505050505050565b6000670de0b6b3a764000082101561492657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f626c6f673220746f6f20736d616c6c0000000000000000000000000000000000604482015290519081900360640190fd5b600061493b670de0b6b3a76400008404614b24565b670de0b6b3a7640000808202935090915083821c9081141561495e5750506117e8565b6706f05b59d3b200005b80156149a057670de0b6b3a7640000828002049150671bc16d674ec800008210614998579283019260019190911c905b60011c614968565b505050919050565b60009081526001919091016020526040902054151590565b60606149cf8484600085614bc5565b949350505050565b6000614a94828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015614a6257600080fd5b505afa158015614a76573d6000803e3d6000fd5b505050506040513d6020811015614a8c57600080fd5b505190613448565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150611a729085906142c3565b60007001000000000000000000000000000000008210614b4657608091821c91015b680100000000000000008210614b5e57604091821c91015b6401000000008210614b7257602091821c91015b620100008210614b8457601091821c91015b6101008210614b9557600891821c91015b60108210614ba557600491821c91015b60048210614bb557600291821c91015b600282106117e857600101919050565b606082471015614c20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806157626026913960400191505060405180910390fd5b614c2985613381565b614c9457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310614cfd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614cc0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614d5f576040519150601f19603f3d011682016040523d82523d6000602084013e614d64565b606091505b5091509150614d74828286614d7f565b979650505050505050565b60608315614d8e575081612768565b825115614d9e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614e02578181015183820152602001614dea565b50505050905090810190601f168015614e2f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080516060810182526000808252602082018190529181019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b803573ffffffffffffffffffffffffffffffffffffffff811681146117e857600080fd5b600082601f830112614ec6578081fd5b8135602067ffffffffffffffff821115614edc57fe5b808202614eea8282016156d7565b838152828101908684018388018501891015614f04578687fd5b8693505b85841015614f2d57614f1981614e92565b835260019390930192918401918401614f08565b50979650505050505050565b600060c08284031215614f4a578081fd5b60405160c0810181811067ffffffffffffffff82111715614f6757fe5b604052905080614f7683615049565b8152614f8460208401615049565b6020820152614f9560408401615049565b6040820152614fa660608401615049565b6060820152614fb760808401615049565b6080820152614fc860a08401615049565b60a08201525092915050565b600060608284031215614fe5578081fd5b6040516060810181811067ffffffffffffffff8211171561500257fe5b6040529050808235615013816156fb565b81526150216020840161505d565b60208201526150326040840161505d565b60408201525092915050565b80356117e8816156fb565b803563ffffffff811681146117e857600080fd5b803567ffffffffffffffff811681146117e857600080fd5b600060208284031215615086578081fd5b6133ad82614e92565b6000806000606084860312156150a3578182fd5b6150ac84614e92565b92506150ba60208501614e92565b9150604084013590509250925092565b600060c082840312156150db578081fd5b6133ad8383614f39565b6000602082840312156150f6578081fd5b813567ffffffffffffffff8082111561510d578283fd5b908301906102208286031215615121578283fd5b61014061512d816156d7565b61513684614e92565b815261514460208501614e92565b602082015261515560408501614e92565b604082015261516660608501614e92565b60608201526151788760808601614f39565b608082015261518987838601614fd4565b60a082015261519b6101a0850161503e565b60c08201526151ad6101c0850161503e565b60e08201526101e08401359150828211156151c6578485fd5b6151d287838601614eb6565b6101008201526151e56102008501614e92565b6101208201529695505050505050565b600060608284031215615206578081fd5b6133ad8383614fd4565b60008060408385031215615222578182fd5b823561522d816156fb565b9150602083013561523d816156fb565b809150509250929050565b6000806040838503121561525a578182fd5b8251615265816156fb565b602084015190925061523d816156fb565b600060208284031215615287578081fd5b5035919050565b60006020828403121561529f578081fd5b5051919050565b600080604083850312156152b8578182fd5b505080516020909101519092909150565b6000806000606084860312156152dd578081fd5b8351925060208401519150604084015190509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60208082526031908201527f4554486d784d696e7465723a2045544874782076616c7565206275726e74206560408201527f78636565647320455448206e6565646564000000000000000000000000000000606082015260800190565b60208082526024908201527f4554486d784d696e7465723a2063616e6e6f7420736574206c7053686172652060408201527f3e3d203100000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4554486d784d696e7465723a206265666f72652067656e657369730000000000604082015260600190565b60208082526029908201527f4554486d784d696e7465723a2063616e6e6f74206d696e742077697468207a6560408201527f726f20616d6f756e740000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f4554486d784d696e7465723a206761735072696365206973207a65726f000000604082015260600190565b6020808252818101527f4554486d784d696e7465723a2063616e6e6f74207265636f7665722057455448604082015260600190565b60208082526027908201527f4554486d784d696e7465723a206c697175696469747920706f6f6c206e6f742060408201527f70726573656e7400000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4554486d784d696e7465723a206c697175696469747920706f6f6c20616c726560408201527f6164792061646465640000000000000000000000000000000000000000000000606082015260800190565b600060c08201905063ffffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b81516fffffffffffffffffffffffffffffffff16815260208083015167ffffffffffffffff90811691830191909152604092830151169181019190915260600190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b90815260200190565b60405181810167ffffffffffffffff811182821017156156f357fe5b604052919050565b6fffffffffffffffffffffffffffffffff811681146135e857600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122047d1512c158f43195b3aaffcf0a93c77baf5ec6e4b90649bbce25e3c0ec5d3d964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 353,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3948,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 4067,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 375,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 466,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6442,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_ethmx",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 6444,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_ethtx",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 6446,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_ethtxAMM",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 6448,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_weth",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 6450,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_totalGiven",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 6452,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_ethmxMintParams",
        "offset": 0,
        "slot": "156",
        "type": "t_struct(ETHmxMintParams)7907_storage"
      },
      {
        "astId": 6454,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_minMintPrice",
        "offset": 0,
        "slot": "157",
        "type": "t_uint128"
      },
      {
        "astId": 6456,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_mu",
        "offset": 16,
        "slot": "157",
        "type": "t_uint64"
      },
      {
        "astId": 6458,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_lambda",
        "offset": 24,
        "slot": "157",
        "type": "t_uint64"
      },
      {
        "astId": 6460,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_lpShareNum",
        "offset": 0,
        "slot": "158",
        "type": "t_uint128"
      },
      {
        "astId": 6462,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_lpShareDen",
        "offset": 16,
        "slot": "158",
        "type": "t_uint128"
      },
      {
        "astId": 6464,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_lps",
        "offset": 0,
        "slot": "159",
        "type": "t_struct(AddressSet)2680_storage"
      },
      {
        "astId": 6466,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_lpRecipient",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 6468,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "_inGenesis",
        "offset": 20,
        "slot": "161",
        "type": "t_bool"
      },
      {
        "astId": 6472,
        "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "162",
        "type": "t_array(t_uint256)39_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)39_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[39]",
        "numberOfBytes": "1248"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2680_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2679,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2415_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ETHmxMintParams)7907_storage": {
        "encoding": "inplace",
        "label": "struct IETHmxMinter.ETHmxMintParams",
        "members": [
          {
            "astId": 7896,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "cCapNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7898,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "cCapDen",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7900,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "zetaFloorNum",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7902,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "zetaFloorDen",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7904,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "zetaCeilNum",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7906,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "zetaCeilDen",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)2415_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2410,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2414,
            "contract": "contracts/exchanges/ETHmxMinter/ETHmxMinter.sol:ETHmxMinter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}