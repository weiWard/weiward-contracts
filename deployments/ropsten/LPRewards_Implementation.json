{
  "address": "0xF1D7370c48795348da961831555dEEc615cDAc1a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accruedRewards",
          "type": "uint256"
        }
      ],
      "name": "AccrualUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnredeemableRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardsTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenValueImpl",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenValueImpl",
          "type": "address"
        }
      ],
      "name": "TokenValueImplChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "accruedRewardsPerTokenFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "accruedRewardsPerTokenLastFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenValueImpl",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenValueImpl",
          "type": "address"
        }
      ],
      "name": "changeTokenValueImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exitFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lastRewardsBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "lastRewardsBalanceOfFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTotalRewardsAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "lastTotalRewardsAccruedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numStakingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnredeemableRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnstaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "redeemAllRewardsFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemRewardFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "rewardsBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rewardsBalanceOfFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rewardsForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setRewardsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sharesFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sharesPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakingTokenAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "supportsStakingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalRewardsAccruedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalRewardsRedeemedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalSharesFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalSharesForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unredeemableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unstakeAllFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccrual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateRewardFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "valuePerTokenImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394"
  ],
  "solcInputHash": "dce8ce70f69a6af015380cad047f4734",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedRewards\",\"type\":\"uint256\"}],\"name\":\"AccrualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnredeemableRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenValueImpl\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenValueImpl\",\"type\":\"address\"}],\"name\":\"TokenValueImplChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accruedRewardsPerTokenFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accruedRewardsPerTokenLastFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenValueImpl\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenValueImpl\",\"type\":\"address\"}],\"name\":\"changeTokenValueImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastRewardsBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastRewardsBalanceOfFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastTotalRewardsAccruedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnredeemableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnstaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeemAllRewardsFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemRewardFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardsBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardsBalanceOfFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardsForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sharesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sharesPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakingTokenAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"supportsStakingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalRewardsAccruedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalRewardsRedeemedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalSharesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSharesForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unredeemableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unstakeAllFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccrual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"valuePerTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/LPRewards/LPRewards.sol\":\"LPRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x20f2d2dc1bd6616bf85e695f9139c2a949cfc4bd8e2f4de0c5d0f9bb54f8df9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v3.4.0-solc-0.7/contracts/access/OwnableUpgradeable.sol\\n *\\n * Changes:\\n * - Added owner argument to initializer\\n * - Reformatted styling in line with this repository.\\n */\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/* solhint-disable func-name-mixedcase */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tfunction __Ownable_init(address owner_) internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained(address owner_) internal initializer {\\n\\t\\t_owner = owner_;\\n\\t\\temit OwnershipTransferred(address(0), owner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5f32f6abe1fdaea0af2e09599e1bb2662cbfafe4bbc663a34d80a2bbfbb15220\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0-solc-0.7/contracts/utils/EnumerableMap.sol\\n *\\n * Changes:\\n * - Replaced UintToAddressMap with AddressToUintMap\\n * - Reformatted styling in line with this repository.\\n */\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n\\t// To implement this library for multiple types with as little code\\n\\t// repetition as possible, we write it in terms of a generic Map type with\\n\\t// bytes32 keys and values.\\n\\t// The Map implementation uses private functions, and user-facing\\n\\t// implementations (such as Uint256ToAddressMap) are just wrappers around\\n\\t// the underlying Map.\\n\\t// This means that we can only create new EnumerableMaps for types that fit\\n\\t// in bytes32.\\n\\n\\tstruct MapEntry {\\n\\t\\tbytes32 _key;\\n\\t\\tbytes32 _value;\\n\\t}\\n\\n\\tstruct Map {\\n\\t\\t// Storage of map keys and values\\n\\t\\tMapEntry[] _entries;\\n\\t\\t// Position of the entry defined by a key in the `entries` array, plus 1\\n\\t\\t// because index 0 means a key is not in the map.\\n\\t\\tmapping(bytes32 => uint256) _indexes;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds a key-value pair to a map, or updates the value for an existing\\n\\t * key. O(1).\\n\\t *\\n\\t * Returns true if the key was added to the map, that is if it was not\\n\\t * already present.\\n\\t */\\n\\tfunction _set(\\n\\t\\tMap storage map,\\n\\t\\tbytes32 key,\\n\\t\\tbytes32 value\\n\\t) private returns (bool) {\\n\\t\\t// We read and store the key's index to prevent multiple reads from the same storage slot\\n\\t\\tuint256 keyIndex = map._indexes[key];\\n\\n\\t\\t// Equivalent to !contains(map, key)\\n\\t\\tif (keyIndex == 0) {\\n\\t\\t\\tmap._entries.push(MapEntry({ _key: key, _value: value }));\\n\\t\\t\\t// The entry is stored at length-1, but we add 1 to all indexes\\n\\t\\t\\t// and use 0 as a sentinel value\\n\\t\\t\\tmap._indexes[key] = map._entries.length;\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tmap._entries[keyIndex - 1]._value = value;\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes a key-value pair from a map. O(1).\\n\\t *\\n\\t * Returns true if the key was removed from the map, that is if it was present.\\n\\t */\\n\\tfunction _remove(Map storage map, bytes32 key) private returns (bool) {\\n\\t\\t// We read and store the key's index to prevent multiple reads from the same storage slot\\n\\t\\tuint256 keyIndex = map._indexes[key];\\n\\n\\t\\t// Equivalent to contains(map, key)\\n\\t\\tif (keyIndex != 0) {\\n\\t\\t\\t// To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n\\t\\t\\t// in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n\\t\\t\\t// This modifies the order of the array, as noted in {at}.\\n\\n\\t\\t\\tuint256 toDeleteIndex = keyIndex - 1;\\n\\t\\t\\tuint256 lastIndex = map._entries.length - 1;\\n\\n\\t\\t\\t// When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n\\t\\t\\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n\\t\\t\\tMapEntry storage lastEntry = map._entries[lastIndex];\\n\\n\\t\\t\\t// Move the last entry to the index where the entry to delete is\\n\\t\\t\\tmap._entries[toDeleteIndex] = lastEntry;\\n\\t\\t\\t// Update the index for the moved entry\\n\\t\\t\\tmap._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n\\t\\t\\t// Delete the slot where the moved entry was stored\\n\\t\\t\\tmap._entries.pop();\\n\\n\\t\\t\\t// Delete the index for the deleted slot\\n\\t\\t\\tdelete map._indexes[key];\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the key is in the map. O(1).\\n\\t */\\n\\tfunction _contains(Map storage map, bytes32 key)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn map._indexes[key] != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of key-value pairs in the map. O(1).\\n\\t */\\n\\tfunction _length(Map storage map) private view returns (uint256) {\\n\\t\\treturn map._entries.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n\\t *\\n\\t * Note that there are no guarantees on the ordering of entries inside the\\n\\t * array, and it may change when more entries are added or removed.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `index` must be strictly less than {length}.\\n\\t */\\n\\tfunction _at(Map storage map, uint256 index)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (bytes32, bytes32)\\n\\t{\\n\\t\\trequire(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n\\t\\tMapEntry storage entry = map._entries[index];\\n\\t\\treturn (entry._key, entry._value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the value associated with `key`.  O(1).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `key` must be in the map.\\n\\t */\\n\\tfunction _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n\\t\\treturn _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n\\t */\\n\\tfunction _get(\\n\\t\\tMap storage map,\\n\\t\\tbytes32 key,\\n\\t\\tstring memory errorMessage\\n\\t) private view returns (bytes32) {\\n\\t\\tuint256 keyIndex = map._indexes[key];\\n\\t\\trequire(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n\\t\\treturn map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n\\t}\\n\\n\\t// AddressToUintMap\\n\\n\\tstruct AddressToUintMap {\\n\\t\\tMap _inner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds a key-value pair to a map, or updates the value for an existing\\n\\t * key. O(1).\\n\\t *\\n\\t * Returns true if the key was added to the map, that is if it was not\\n\\t * already present.\\n\\t */\\n\\tfunction set(\\n\\t\\tAddressToUintMap storage map,\\n\\t\\taddress key,\\n\\t\\tuint256 value\\n\\t) internal returns (bool) {\\n\\t\\treturn _set(map._inner, bytes32(uint256(key)), bytes32(value));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes a value from a set. O(1).\\n\\t *\\n\\t * Returns true if the key was removed from the map, that is if it was present.\\n\\t */\\n\\tfunction remove(AddressToUintMap storage map, address key)\\n\\t\\tinternal\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _remove(map._inner, bytes32(uint256(key)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the key is in the map. O(1).\\n\\t */\\n\\tfunction contains(AddressToUintMap storage map, address key)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _contains(map._inner, bytes32(uint256(key)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of elements in the map. O(1).\\n\\t */\\n\\tfunction length(AddressToUintMap storage map)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _length(map._inner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the element stored at position `index` in the set. O(1).\\n\\t * Note that there are no guarantees on the ordering of values inside the\\n\\t * array, and it may change when more values are added or removed.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `index` must be strictly less than {length}.\\n\\t */\\n\\tfunction at(AddressToUintMap storage map, uint256 index)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (address, uint256)\\n\\t{\\n\\t\\t(bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\t\\treturn (address(uint256(key)), uint256(value));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the value associated with `key`.  O(1).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `key` must be in the map.\\n\\t */\\n\\tfunction get(AddressToUintMap storage map, address key)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn uint256(_get(map._inner, bytes32(uint256(key))));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n\\t */\\n\\tfunction get(\\n\\t\\tAddressToUintMap storage map,\\n\\t\\taddress key,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (uint256) {\\n\\t\\treturn uint256(_get(map._inner, bytes32(uint256(key)), errorMessage));\\n\\t}\\n}\\n\",\"keccak256\":\"0x76826160b2b58539e05e8d161747b90445f3c7be5f3469dfff41827a376c5bba\",\"license\":\"MIT\"},\"contracts/rewards/LPRewards/LPRewards.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./LPRewardsData.sol\\\";\\nimport \\\"../../libraries/EnumerableMap.sol\\\";\\nimport \\\"../interfaces/ILPRewards.sol\\\";\\nimport \\\"../interfaces/IValuePerToken.sol\\\";\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\n\\ncontract LPRewards is\\n\\tInitializable,\\n\\tContextUpgradeable,\\n\\tOwnableUpgradeable,\\n\\tPausableUpgradeable,\\n\\tLPRewardsData,\\n\\tILPRewards\\n{\\n\\tusing EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Immutable Internal State */\\n\\n\\tuint256 internal constant _MULTIPLIER = 1e36;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(address owner_) {\\n\\t\\tinit(owner_);\\n\\t}\\n\\n\\t/* Initializers */\\n\\n\\tfunction init(address owner_) public virtual initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t\\t__Pausable_init_unchained();\\n\\t}\\n\\n\\t/* Modifiers */\\n\\n\\tmodifier supportsToken(address token) {\\n\\t\\trequire(supportsStakingToken(token), \\\"LPRewards: unsupported token\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction accruedRewardsPerTokenFor(address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokenData[token].arpt;\\n\\t}\\n\\n\\tfunction accruedRewardsPerTokenLastFor(address account, address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _users[account].rewardsFor[token].arptLast;\\n\\t}\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256 total)\\n\\t{\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tEnumerableSet.AddressSet storage tokens = user.tokensWithRewards;\\n\\t\\tfor (uint256 i = 0; i < tokens.length(); i++) {\\n\\t\\t\\ttotal += user.rewardsFor[tokens.at(i)].pending;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction lastRewardsBalanceOfFor(address account, address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _users[account].rewardsFor[token].pending;\\n\\t}\\n\\n\\tfunction lastTotalRewardsAccrued()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _lastTotalRewardsAccrued;\\n\\t}\\n\\n\\tfunction lastTotalRewardsAccruedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokenData[token].lastRewardsAccrued;\\n\\t}\\n\\n\\tfunction numStakingTokens()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokens.length();\\n\\t}\\n\\n\\tfunction rewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn lastRewardsBalanceOf(account) + _allPendingRewardsFor(account);\\n\\t}\\n\\n\\tfunction rewardsBalanceOfFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 rewards = lastRewardsBalanceOfFor(account, token);\\n\\t\\tuint256 amountStaked = stakedBalanceOf(account, token);\\n\\t\\tif (amountStaked != 0) {\\n\\t\\t\\trewards += _pendingRewardsFor(account, token, amountStaked);\\n\\t\\t}\\n\\t\\treturn rewards;\\n\\t}\\n\\n\\tfunction rewardsForToken(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokenData[token].rewards;\\n\\t}\\n\\n\\tfunction rewardsToken() public view virtual override returns (address) {\\n\\t\\treturn _rewardsToken;\\n\\t}\\n\\n\\tfunction sharesFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _shares(token, stakedBalanceOf(account, token));\\n\\t}\\n\\n\\tfunction sharesPerToken(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _shares(token, 1e18);\\n\\t}\\n\\n\\tfunction stakedBalanceOf(address account, address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tEnumerableMap.AddressToUintMap storage staked = _users[account].staked;\\n\\t\\tif (staked.contains(token)) {\\n\\t\\t\\treturn staked.get(token);\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction stakingTokenAt(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn _tokens.at(index);\\n\\t}\\n\\n\\tfunction supportsStakingToken(address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _tokens.contains(token);\\n\\t}\\n\\n\\tfunction totalRewardsAccrued()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Overflow is OK\\n\\t\\treturn _currentRewardsBalance() + _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalRewardsAccruedFor(address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\t// Overflow is OK\\n\\t\\treturn td.rewards + td.rewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalRewardsRedeemed()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalRewardsRedeemedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokenData[token].rewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalShares()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256 total)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokens.length(); i++) {\\n\\t\\t\\ttotal = total.add(_totalSharesForToken(_tokens.at(i)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction totalSharesFor(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256 total)\\n\\t{\\n\\t\\tEnumerableMap.AddressToUintMap storage staked = _users[account].staked;\\n\\t\\tfor (uint256 i = 0; i < staked.length(); i++) {\\n\\t\\t\\t(address token, uint256 amount) = staked.at(i);\\n\\t\\t\\ttotal = total.add(_shares(token, amount));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction totalSharesForToken(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _totalSharesForToken(token);\\n\\t}\\n\\n\\tfunction totalStaked(address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _tokenData[token].totalStaked;\\n\\t}\\n\\n\\tfunction unredeemableRewards()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _unredeemableRewards;\\n\\t}\\n\\n\\tfunction valuePerTokenImpl(address token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn _tokenData[token].valueImpl;\\n\\t}\\n\\n\\t/* Public Mutators */\\n\\n\\tfunction addToken(address token, address tokenValueImpl)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(!supportsStakingToken(token), \\\"LPRewards: token already added\\\");\\n\\t\\trequire(\\n\\t\\t\\ttokenValueImpl != address(0),\\n\\t\\t\\t\\\"LPRewards: tokenValueImpl cannot be zero address\\\"\\n\\t\\t);\\n\\t\\t_tokens.add(token);\\n\\t\\t// Only update implementation in case this was previously used and removed\\n\\t\\t_tokenData[token].valueImpl = tokenValueImpl;\\n\\t\\temit TokenAdded(_msgSender(), token, tokenValueImpl);\\n\\t}\\n\\n\\tfunction changeTokenValueImpl(address token, address tokenValueImpl)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t\\tsupportsToken(token)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\ttokenValueImpl != address(0),\\n\\t\\t\\t\\\"LPRewards: tokenValueImpl cannot be zero address\\\"\\n\\t\\t);\\n\\t\\t_tokenData[token].valueImpl = tokenValueImpl;\\n\\t\\temit TokenValueImplChanged(_msgSender(), token, tokenValueImpl);\\n\\t}\\n\\n\\tfunction exit() external virtual override {\\n\\t\\tunstakeAll();\\n\\t\\tredeemAllRewards();\\n\\t}\\n\\n\\tfunction exitFrom(address token) external virtual override {\\n\\t\\tunstakeAllFrom(token);\\n\\t\\tredeemAllRewardsFrom(token);\\n\\t}\\n\\n\\tfunction pause() external virtual override onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tamount <= _unredeemableRewards,\\n\\t\\t\\t\\\"LPRewards: recovery amount > unredeemable\\\"\\n\\t\\t);\\n\\t\\t_unredeemableRewards -= amount;\\n\\t\\tIERC20(_rewardsToken).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnredeemableRewards(_msgSender(), to, amount);\\n\\t}\\n\\n\\tfunction recoverUnstaked(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external virtual override onlyOwner {\\n\\t\\trequire(token != _rewardsToken, \\\"LPRewards: cannot recover rewardsToken\\\");\\n\\n\\t\\tuint256 unstaked =\\n\\t\\t\\tIERC20(token).balanceOf(address(this)).sub(totalStaked(token));\\n\\n\\t\\trequire(amount <= unstaked, \\\"LPRewards: recovery amount > unstaked\\\");\\n\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnstaked(_msgSender(), token, to, amount);\\n\\t}\\n\\n\\tfunction redeemAllRewards() public virtual override {\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateAllRewardsFor(account);\\n\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tEnumerableSet.AddressSet storage tokens = user.tokensWithRewards;\\n\\t\\tuint256 redemption = 0;\\n\\n\\t\\tfor (uint256 length = tokens.length(); length > 0; length--) {\\n\\t\\t\\taddress token = tokens.at(0);\\n\\t\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\t\\tUserTokenRewards storage rewards = user.rewardsFor[token];\\n\\t\\t\\tuint256 pending = rewards.pending; // Save gas\\n\\n\\t\\t\\tredemption += pending;\\n\\n\\t\\t\\trewards.pending = 0;\\n\\n\\t\\t\\ttd.rewards = td.rewards.sub(pending);\\n\\t\\t\\ttd.rewardsRedeemed += pending;\\n\\n\\t\\t\\temit RewardPaid(account, token, pending);\\n\\t\\t\\ttokens.remove(token);\\n\\t\\t}\\n\\n\\t\\t_totalRewardsRedeemed += redemption;\\n\\n\\t\\tIERC20(_rewardsToken).safeTransfer(account, redemption);\\n\\t}\\n\\n\\tfunction redeemAllRewardsFrom(address token) public virtual override {\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateRewardFor(account, token);\\n\\t\\tuint256 pending = _users[account].rewardsFor[token].pending;\\n\\t\\tif (pending != 0) {\\n\\t\\t\\t_redeemRewardFrom(token, pending);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction redeemReward(uint256 amount) external virtual override {\\n\\t\\trequire(amount != 0, \\\"LPRewards: cannot redeem zero\\\");\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateAllRewardsFor(account);\\n\\t\\trequire(\\n\\t\\t\\tamount <= lastRewardsBalanceOf(account),\\n\\t\\t\\t\\\"LPRewards: cannot redeem more rewards than earned\\\"\\n\\t\\t);\\n\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tEnumerableSet.AddressSet storage tokens = user.tokensWithRewards;\\n\\t\\tuint256 amountLeft = amount;\\n\\n\\t\\tfor (uint256 length = tokens.length(); length > 0; length--) {\\n\\t\\t\\taddress token = tokens.at(0);\\n\\t\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\t\\tUserTokenRewards storage rewards = user.rewardsFor[token];\\n\\n\\t\\t\\tuint256 pending = rewards.pending; // Save gas\\n\\t\\t\\tuint256 taken = 0;\\n\\t\\t\\tif (pending <= amountLeft) {\\n\\t\\t\\t\\ttaken = pending;\\n\\t\\t\\t\\ttokens.remove(token);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttaken = amountLeft;\\n\\t\\t\\t}\\n\\n\\t\\t\\trewards.pending = pending - taken;\\n\\n\\t\\t\\ttd.rewards = td.rewards.sub(taken);\\n\\t\\t\\ttd.rewardsRedeemed += taken;\\n\\n\\t\\t\\tamountLeft -= taken;\\n\\n\\t\\t\\temit RewardPaid(account, token, taken);\\n\\n\\t\\t\\tif (amountLeft == 0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_totalRewardsRedeemed += amount;\\n\\n\\t\\tIERC20(_rewardsToken).safeTransfer(account, amount);\\n\\t}\\n\\n\\tfunction redeemRewardFrom(address token, uint256 amount)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\trequire(amount != 0, \\\"LPRewards: cannot redeem zero\\\");\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateRewardFor(account, token);\\n\\t\\trequire(\\n\\t\\t\\tamount <= _users[account].rewardsFor[token].pending,\\n\\t\\t\\t\\\"LPRewards: cannot redeem more rewards than earned\\\"\\n\\t\\t);\\n\\t\\t_redeemRewardFrom(token, amount);\\n\\t}\\n\\n\\tfunction removeToken(address token)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t\\tsupportsToken(token)\\n\\t{\\n\\t\\t_tokens.remove(token);\\n\\t\\t// Clean up. Keep totalStaked and rewards since those will be cleaned up by\\n\\t\\t// users unstaking and redeeming.\\n\\t\\t_tokenData[token].valueImpl = address(0);\\n\\t\\temit TokenRemoved(_msgSender(), token);\\n\\t}\\n\\n\\tfunction setRewardsToken(address token) public virtual override onlyOwner {\\n\\t\\t_rewardsToken = token;\\n\\t\\temit RewardsTokenSet(_msgSender(), token);\\n\\t}\\n\\n\\tfunction stake(address token, uint256 amount)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tsupportsToken(token)\\n\\t{\\n\\t\\trequire(amount != 0, \\\"LPRewards: cannot stake zero\\\");\\n\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateRewardFor(account, token);\\n\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\ttd.totalStaked += amount;\\n\\t\\tuser.staked.set(token, amount + stakedBalanceOf(account, token));\\n\\n\\t\\tIERC20(token).safeTransferFrom(account, address(this), amount);\\n\\t\\temit Staked(account, token, amount);\\n\\t}\\n\\n\\tfunction unpause() external virtual override onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction unstake(address token, uint256 amount) external virtual override {\\n\\t\\trequire(amount != 0, \\\"LPRewards: cannot unstake zero\\\");\\n\\n\\t\\taddress account = _msgSender();\\n\\t\\t// Prevent making calls to any addresses that were never supported.\\n\\t\\tuint256 staked = stakedBalanceOf(account, token);\\n\\t\\trequire(\\n\\t\\t\\tamount <= staked,\\n\\t\\t\\t\\\"LPRewards: cannot unstake more than staked balance\\\"\\n\\t\\t);\\n\\n\\t\\t_unstake(token, amount);\\n\\t}\\n\\n\\tfunction unstakeAll() public virtual override {\\n\\t\\tUserData storage user = _users[_msgSender()];\\n\\t\\tfor (uint256 length = user.staked.length(); length > 0; length--) {\\n\\t\\t\\t(address token, uint256 amount) = user.staked.at(0);\\n\\t\\t\\t_unstake(token, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unstakeAllFrom(address token) public virtual override {\\n\\t\\t_unstake(token, stakedBalanceOf(_msgSender(), token));\\n\\t}\\n\\n\\tfunction updateAccrual() external virtual override {\\n\\t\\t// Gas savings\\n\\t\\tuint256 totalRewardsAccrued_ = totalRewardsAccrued();\\n\\t\\tuint256 pending = totalRewardsAccrued_ - _lastTotalRewardsAccrued;\\n\\t\\tif (pending == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t_lastTotalRewardsAccrued = totalRewardsAccrued_;\\n\\n\\t\\t// Iterate once to know totalShares\\n\\t\\tuint256 totalShares_ = 0;\\n\\t\\t// Store some math for current shares to save on gas and revert ASAP.\\n\\t\\tuint256[] memory pendingSharesFor = new uint256[](_tokens.length());\\n\\t\\tfor (uint256 i = 0; i < _tokens.length(); i++) {\\n\\t\\t\\tuint256 share = _totalSharesForToken(_tokens.at(i));\\n\\t\\t\\tpendingSharesFor[i] = pending.mul(share);\\n\\t\\t\\ttotalShares_ = totalShares_.add(share);\\n\\t\\t}\\n\\n\\t\\tif (totalShares_ == 0) {\\n\\t\\t\\t_unredeemableRewards = _unredeemableRewards.add(pending);\\n\\t\\t\\temit AccrualUpdated(_msgSender(), pending);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Iterate twice to allocate rewards to each token.\\n\\t\\tfor (uint256 i = 0; i < _tokens.length(); i++) {\\n\\t\\t\\taddress token = _tokens.at(i);\\n\\t\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\t\\ttd.rewards += pendingSharesFor[i] / totalShares_;\\n\\t\\t\\tuint256 rewardsAccrued = totalRewardsAccruedFor(token);\\n\\t\\t\\ttd.arpt = _accruedRewardsPerTokenFor(token, rewardsAccrued);\\n\\t\\t\\ttd.lastRewardsAccrued = rewardsAccrued;\\n\\t\\t}\\n\\n\\t\\temit AccrualUpdated(_msgSender(), pending);\\n\\t}\\n\\n\\tfunction updateReward() external virtual override {\\n\\t\\t_updateAllRewardsFor(_msgSender());\\n\\t}\\n\\n\\tfunction updateRewardFor(address token) external virtual override {\\n\\t\\t_updateRewardFor(_msgSender(), token);\\n\\t}\\n\\n\\t/* Internal Views */\\n\\n\\tfunction _accruedRewardsPerTokenFor(address token, uint256 rewardsAccrued)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\t// Gas savings\\n\\t\\tuint256 totalStaked_ = td.totalStaked;\\n\\n\\t\\tif (totalStaked_ == 0) {\\n\\t\\t\\treturn td.arpt;\\n\\t\\t}\\n\\n\\t\\t// Overflow is OK\\n\\t\\tuint256 delta = rewardsAccrued - td.lastRewardsAccrued;\\n\\t\\tif (delta == 0) {\\n\\t\\t\\treturn td.arpt;\\n\\t\\t}\\n\\n\\t\\t// Use multiplier for better rounding\\n\\t\\tuint256 rewardsPerToken = delta.mul(_MULTIPLIER) / totalStaked_;\\n\\n\\t\\t// Overflow is OK\\n\\t\\treturn td.arpt + rewardsPerToken;\\n\\t}\\n\\n\\tfunction _allPendingRewardsFor(address account)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 total)\\n\\t{\\n\\t\\tEnumerableMap.AddressToUintMap storage staked = _users[account].staked;\\n\\t\\tfor (uint256 i = 0; i < staked.length(); i++) {\\n\\t\\t\\t(address token, uint256 amount) = staked.at(i);\\n\\t\\t\\ttotal += _pendingRewardsFor(account, token, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _currentRewardsBalance() internal view virtual returns (uint256) {\\n\\t\\treturn IERC20(_rewardsToken).balanceOf(address(this));\\n\\t}\\n\\n\\tfunction _pendingRewardsFor(\\n\\t\\taddress account,\\n\\t\\taddress token,\\n\\t\\tuint256 amountStaked\\n\\t) internal view virtual returns (uint256) {\\n\\t\\tuint256 arpt = accruedRewardsPerTokenFor(token);\\n\\t\\tuint256 arptLast = accruedRewardsPerTokenLastFor(account, token);\\n\\t\\t// Overflow is OK\\n\\t\\tuint256 arptDelta = arpt - arptLast;\\n\\n\\t\\treturn amountStaked.mul(arptDelta) / _MULTIPLIER;\\n\\t}\\n\\n\\tfunction _shares(address token, uint256 amountStaked)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (!supportsStakingToken(token)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tIValuePerToken vptHandle = IValuePerToken(valuePerTokenImpl(token));\\n\\t\\t(uint256 numerator, uint256 denominator) = vptHandle.valuePerToken();\\n\\t\\tif (denominator == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// Return a 1:1 ratio for value to shares\\n\\t\\treturn amountStaked.mul(numerator) / denominator;\\n\\t}\\n\\n\\tfunction _totalSharesForToken(address token)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _shares(token, _tokenData[token].totalStaked);\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _redeemRewardFrom(address token, uint256 amount) internal virtual {\\n\\t\\taddress account = _msgSender();\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tUserTokenRewards storage rewards = user.rewardsFor[token];\\n\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\tuint256 rewardLeft = rewards.pending - amount;\\n\\n\\t\\trewards.pending = rewardLeft;\\n\\t\\tif (rewardLeft == 0) {\\n\\t\\t\\tuser.tokensWithRewards.remove(token);\\n\\t\\t}\\n\\n\\t\\ttd.rewards = td.rewards.sub(amount);\\n\\t\\ttd.rewardsRedeemed += amount;\\n\\n\\t\\t_totalRewardsRedeemed += amount;\\n\\n\\t\\tIERC20(_rewardsToken).safeTransfer(account, amount);\\n\\t\\temit RewardPaid(account, token, amount);\\n\\t}\\n\\n\\tfunction _unstake(address token, uint256 amount) internal virtual {\\n\\t\\taddress account = _msgSender();\\n\\n\\t\\t_updateRewardFor(account, token);\\n\\n\\t\\tTokenData storage td = _tokenData[token];\\n\\t\\ttd.totalStaked = td.totalStaked.sub(amount);\\n\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tEnumerableMap.AddressToUintMap storage staked = user.staked;\\n\\n\\t\\tuint256 stakeLeft = staked.get(token).sub(amount);\\n\\t\\tif (stakeLeft == 0) {\\n\\t\\t\\tstaked.remove(token);\\n\\t\\t\\tuser.rewardsFor[token].arptLast = 0;\\n\\t\\t} else {\\n\\t\\t\\tstaked.set(token, stakeLeft);\\n\\t\\t}\\n\\n\\t\\tIERC20(token).safeTransfer(account, amount);\\n\\t\\temit Unstaked(account, token, amount);\\n\\t}\\n\\n\\tfunction _updateRewardFor(address account, address token)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tUserData storage user = _users[account];\\n\\t\\tUserTokenRewards storage rewards = user.rewardsFor[token];\\n\\t\\tuint256 total = rewards.pending; // Save gas\\n\\t\\tuint256 amountStaked = stakedBalanceOf(account, token);\\n\\t\\tuint256 pending = _pendingRewardsFor(account, token, amountStaked);\\n\\t\\tif (pending != 0) {\\n\\t\\t\\ttotal += pending;\\n\\t\\t\\trewards.pending = total;\\n\\t\\t\\tuser.tokensWithRewards.add(token);\\n\\t\\t}\\n\\t\\trewards.arptLast = accruedRewardsPerTokenFor(token);\\n\\t\\treturn total;\\n\\t}\\n\\n\\tfunction _updateAllRewardsFor(address account) internal virtual {\\n\\t\\tEnumerableMap.AddressToUintMap storage staked = _users[account].staked;\\n\\t\\tfor (uint256 i = 0; i < staked.length(); i++) {\\n\\t\\t\\t(address token, ) = staked.at(i);\\n\\t\\t\\t_updateRewardFor(account, token);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x83304398d72729544c4f85f130bda02f8be342f4b6a2977e9c4fce487d87a0c7\",\"license\":\"Apache-2.0\"},\"contracts/rewards/LPRewards/LPRewardsData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"../../libraries/EnumerableMap.sol\\\";\\n\\nabstract contract LPRewardsData {\\n\\t/* Structs */\\n\\n\\tstruct TokenData {\\n\\t\\tuint256 arpt;\\n\\t\\tuint256 lastRewardsAccrued;\\n\\t\\tuint256 rewards;\\n\\t\\tuint256 rewardsRedeemed;\\n\\t\\tuint256 totalStaked;\\n\\t\\taddress valueImpl;\\n\\t}\\n\\n\\tstruct UserTokenRewards {\\n\\t\\tuint256 pending;\\n\\t\\tuint256 arptLast;\\n\\t}\\n\\n\\tstruct UserData {\\n\\t\\tEnumerableSet.AddressSet tokensWithRewards;\\n\\t\\tmapping(address => UserTokenRewards) rewardsFor;\\n\\t\\tEnumerableMap.AddressToUintMap staked;\\n\\t}\\n\\n\\t/* State */\\n\\n\\taddress internal _rewardsToken;\\n\\tuint256 internal _lastTotalRewardsAccrued;\\n\\tuint256 internal _totalRewardsRedeemed;\\n\\tuint256 internal _unredeemableRewards;\\n\\tEnumerableSet.AddressSet internal _tokens;\\n\\tmapping(address => TokenData) internal _tokenData;\\n\\tmapping(address => UserData) internal _users;\\n\\n\\tuint256[43] private __gap;\\n}\\n\",\"keccak256\":\"0x969886b7972b6bf38d793b87912741c0c45735fd1a86d84d8855ac20dae75a00\",\"license\":\"Apache-2.0\"},\"contracts/rewards/interfaces/ILPRewards.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface ILPRewards {\\n\\t/* Views */\\n\\n\\tfunction accruedRewardsPerTokenFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction accruedRewardsPerTokenLastFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastRewardsBalanceOfFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastTotalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction lastTotalRewardsAccruedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction numStakingTokens() external view returns (uint256);\\n\\n\\tfunction rewardsBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction rewardsBalanceOfFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction rewardsForToken(address token) external view returns (uint256);\\n\\n\\tfunction rewardsToken() external view returns (address);\\n\\n\\tfunction sharesFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction sharesPerToken(address token) external view returns (uint256);\\n\\n\\tfunction stakedBalanceOf(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction stakingTokenAt(uint256 index) external view returns (address);\\n\\n\\tfunction supportsStakingToken(address token) external view returns (bool);\\n\\n\\tfunction totalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction totalRewardsAccruedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction totalRewardsRedeemed() external view returns (uint256);\\n\\n\\tfunction totalRewardsRedeemedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction totalShares() external view returns (uint256);\\n\\n\\tfunction totalSharesFor(address account) external view returns (uint256);\\n\\n\\tfunction totalSharesForToken(address token) external view returns (uint256);\\n\\n\\tfunction totalStaked(address token) external view returns (uint256);\\n\\n\\tfunction unredeemableRewards() external view returns (uint256);\\n\\n\\tfunction valuePerTokenImpl(address token) external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction addToken(address token, address tokenValueImpl) external;\\n\\n\\tfunction changeTokenValueImpl(address token, address tokenValueImpl)\\n\\t\\texternal;\\n\\n\\tfunction exit() external;\\n\\n\\tfunction exitFrom(address token) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnstaked(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction redeemAllRewards() external;\\n\\n\\tfunction redeemAllRewardsFrom(address token) external;\\n\\n\\tfunction redeemReward(uint256 amount) external;\\n\\n\\tfunction redeemRewardFrom(address token, uint256 amount) external;\\n\\n\\tfunction removeToken(address token) external;\\n\\n\\tfunction setRewardsToken(address token) external;\\n\\n\\tfunction stake(address token, uint256 amount) external;\\n\\n\\tfunction unpause() external;\\n\\n\\tfunction unstake(address token, uint256 amount) external;\\n\\n\\tfunction unstakeAll() external;\\n\\n\\tfunction unstakeAllFrom(address token) external;\\n\\n\\tfunction updateAccrual() external;\\n\\n\\tfunction updateReward() external;\\n\\n\\tfunction updateRewardFor(address token) external;\\n\\n\\t/* Events */\\n\\n\\tevent AccrualUpdated(address indexed author, uint256 accruedRewards);\\n\\tevent RecoveredUnredeemableRewards(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnstaked(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardPaid(\\n\\t\\taddress indexed account,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardsTokenSet(address indexed author, address indexed token);\\n\\tevent Staked(address indexed account, address indexed token, uint256 amount);\\n\\tevent TokenAdded(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed tokenValueImpl\\n\\t);\\n\\tevent TokenRemoved(address indexed author, address indexed token);\\n\\tevent TokenValueImplChanged(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed tokenValueImpl\\n\\t);\\n\\tevent Unstaked(\\n\\t\\taddress indexed account,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0x621e3043ae13e26a6531dc752afe5e19ac52a02038114a970ac84a9a570cd1de\",\"license\":\"Apache-2.0\"},\"contracts/rewards/interfaces/IValuePerToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IValuePerToken {\\n\\t/* Views */\\n\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction valuePerToken()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 numerator, uint256 denominator);\\n}\\n\",\"keccak256\":\"0x8dd0f68d4032b2654efb0f8d73c4fd0af822a4ee312866689eea3510a2580391\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a3a38038062003a3a833981810160405260208110156200003757600080fd5b505162000044816200004b565b5062000389565b600054610100900460ff16806200006757506200006762000115565b8062000076575060005460ff16155b620000b35760405162461bcd60e51b815260040180806020018281038252602e81526020018062003a0c602e913960400191505060405180910390fd5b600054610100900460ff16158015620000df576000805460ff1961ff0019909116610100171660011790555b620000e962000133565b620000f482620001dd565b620000fe620002d0565b801562000111576000805461ff00191690555b5050565b60006200012d306200038360201b620021c51760201c565b15905090565b600054610100900460ff16806200014f57506200014f62000115565b806200015e575060005460ff16155b6200019b5760405162461bcd60e51b815260040180806020018281038252602e81526020018062003a0c602e913960400191505060405180910390fd5b600054610100900460ff16158015620001c7576000805460ff1961ff0019909116610100171660011790555b8015620001da576000805461ff00191690555b50565b600054610100900460ff1680620001f95750620001f962000115565b8062000208575060005460ff16155b620002455760405162461bcd60e51b815260040180806020018281038252602e81526020018062003a0c602e913960400191505060405180910390fd5b600054610100900460ff1615801562000271576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801562000111576000805461ff00191690555050565b600054610100900460ff1680620002ec5750620002ec62000115565b80620002fb575060005460ff16155b620003385760405162461bcd60e51b815260040180806020018281038252602e81526020018062003a0c602e913960400191505060405180910390fd5b600054610100900460ff1615801562000364576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015620001da576000805461ff001916905550565b3b151590565b61367380620003996000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c806375f22f3a1161019d578063bf7eefd2116100e9578063e1b52ffa116100a2578063e7a203691161007c578063e7a203691461091f578063e9fad8ee14610927578063f2fde38b1461092f578063f36c0a72146109555761030c565b8063e1b52ffa146108ad578063e317b105146108d3578063e68e3f94146108f95761030c565b8063bf7eefd2146107ea578063c2a672e014610810578063d1af0c7d1461083c578063d55b06f614610844578063d5b27cbe1461086a578063de320cc1146108875761030c565b806395a1297a11610156578063aad1748e11610130578063aad1748e1461073c578063adc9772e14610762578063adf772461461078e578063ba587a2e146107bc5761030c565b806395a1297a146106e05780639bfd8d61146106e8578063aa0ba3261461070e5761030c565b806375f22f3a146106765780637f86ce301461067e57806381b72684146106865780638456cb59146106ac578063860c19f3146106b45780638da5cb5b146106bc5761030c565b80633ad661271161025c57806355ae75eb116102155780635fa7b584116101ef5780635fa7b5841461061a578063690f680e146106405780636a1eca9014610666578063715018a61461066e5761030c565b806355ae75eb146105c65780635ab2c676146105ec5780635c975abb146106125761030c565b80633ad66127146105135780633b322def1461051b5780633f4ba83a1461054757806351a71b171461054f5780635476bd721461056c5780635530429b1461059a5761030c565b806319ab453c116102c957806333dc41c7116102a357806333dc41c7146104b757806334f43ac6146104dd57806335322f37146105035780633a98ef391461050b5761030c565b806319ab453c1461042957806326dcbbbc1461044f5780632fc895001461047d5761030c565b80630231ca171461031157806304d534a6146103495780630fd59a4b1461038957806312bc1b21146103af578063179237cf146103d557806319872cb314610403575b600080fd5b6103476004803603606081101561032757600080fd5b506001600160a01b0381358116916020810135909116906040013561095d565b005b6103776004803603604081101561035f57600080fd5b506001600160a01b0381358116916020013516610b49565b60408051918252519081900360200190f35b6103776004803603602081101561039f57600080fd5b50356001600160a01b0316610b86565b610347600480360360208110156103c557600080fd5b50356001600160a01b0316610bac565b610377600480360360408110156103eb57600080fd5b506001600160a01b0381358116916020013516610bc1565b6103776004803603602081101561041957600080fd5b50356001600160a01b0316610bdd565b6103476004803603602081101561043f57600080fd5b50356001600160a01b0316610bfb565b6103776004803603604081101561046557600080fd5b506001600160a01b0381358116916020013516610cb7565b6104a36004803603602081101561049357600080fd5b50356001600160a01b0316610ce6565b604080519115158252519081900360200190f35b610377600480360360208110156104cd57600080fd5b50356001600160a01b0316610cf3565b610347600480360360208110156104f357600080fd5b50356001600160a01b0316610d0e565b610347610d28565b610377610d98565b610347610dd8565b6103476004803603604081101561053157600080fd5b506001600160a01b038135169060200135610ff3565b6103476110d3565b6103476004803603602081101561056557600080fd5b503561113d565b6103476004803603604081101561058257600080fd5b506001600160a01b0381358116916020013516611322565b610347600480360360408110156105b057600080fd5b506001600160a01b0381351690602001356114a1565b610377600480360360208110156105dc57600080fd5b50356001600160a01b03166115ba565b6103776004803603602081101561060257600080fd5b50356001600160a01b03166115d8565b6104a36115ec565b6103476004803603602081101561063057600080fd5b50356001600160a01b03166115f5565b6103776004803603602081101561065657600080fd5b50356001600160a01b0316611728565b610377611733565b610347611744565b6103476117f0565b610377611917565b6103476004803603602081101561069c57600080fd5b50356001600160a01b031661191d565b61034761192e565b610377611998565b6106c46119ab565b604080516001600160a01b039092168252519081900360200190f35b6103776119ba565b610377600480360360208110156106fe57600080fd5b50356001600160a01b03166119c0565b6103776004803603604081101561072457600080fd5b506001600160a01b03813581169160200135166119de565b6103776004803603602081101561075257600080fd5b50356001600160a01b0316611a24565b6103476004803603604081101561077857600080fd5b506001600160a01b038135169060200135611a89565b610347600480360360408110156107a457600080fd5b506001600160a01b0381358116916020013516611c50565b610377600480360360408110156107d257600080fd5b506001600160a01b0381358116916020013516611dc4565b6106c46004803603602081101561080057600080fd5b50356001600160a01b0316611df6565b6103476004803603604081101561082657600080fd5b506001600160a01b038135169060200135611e17565b6106c4611ecc565b6103476004803603602081101561085a57600080fd5b50356001600160a01b0316611edb565b6106c46004803603602081101561088057600080fd5b5035611f2c565b6103476004803603602081101561089d57600080fd5b50356001600160a01b0316611f39565b610377600480360360208110156108c357600080fd5b50356001600160a01b0316611ff9565b610377600480360360208110156108e957600080fd5b50356001600160a01b0316612063565b6103776004803603602081101561090f57600080fd5b50356001600160a01b0316612081565b61037761209c565b6103476120a2565b6103476004803603602081101561094557600080fd5b50356001600160a01b03166120b2565b6103476121b5565b6109656121cb565b6001600160a01b03166109766119ab565b6001600160a01b0316146109bf576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6097546001600160a01b0384811691161415610a0c5760405162461bcd60e51b81526004018080602001828103825260268152602001806134306026913960400191505060405180910390fd5b6000610a92610a1a856119c0565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d6020811015610a8a57600080fd5b5051906121cf565b905080821115610ad35760405162461bcd60e51b81526004018080602001828103825260258152602001806135c66025913960400191505060405180910390fd5b610ae76001600160a01b038516848461222c565b826001600160a01b0316846001600160a01b0316610b036121cb565b6001600160a01b03167fa75728640461aeb3a4682a3f36b9eedb891491eb41b27953a45849a1d0c06588856040518082815260200191505060405180910390a450505050565b600080610b568484610cb7565b90506000610b6485856119de565b90508015610b7c57610b7785858361227e565b820191505b5090505b92915050565b6001600160a01b03166000908152609d6020526040902060038101546002909101540190565b610bb581610d0e565b610bbe81611edb565b50565b6000610bd682610bd185856119de565b6122ca565b9392505050565b6001600160a01b03166000908152609d602052604090206002015490565b600054610100900460ff1680610c145750610c1461238f565b80610c22575060005460ff16155b610c5d5760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff16158015610c88576000805460ff1961ff0019909116610100171660011790555b610c906123a0565b610c9982612441565b610ca161252c565b8015610cb3576000805461ff00191690555b5050565b6001600160a01b039182166000908152609e602090815260408083209390941682526002909201909152205490565b6000610b80609b836125d7565b6000610cfe826125ec565b610d0783611ff9565b0192915050565b610bbe81610d23610d1d6121cb565b846119de565b612643565b6000609e6000610d366121cb565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506000610d6682600301612762565b90505b8015610cb357600080610d7f600385018261276d565b91509150610d8d8282612643565b505060001901610d69565b6000805b610da6609b612762565b811015610dd457610dca610dc3610dbe609b84612789565b612795565b83906127bc565b9150600101610d9c565b5090565b6000610de2611998565b609854909150810380610df6575050610ff1565b6098829055600080610e08609b612762565b67ffffffffffffffff81118015610e1e57600080fd5b50604051908082528060200260200182016040528015610e48578160200160208202803683370190505b50905060005b610e58609b612762565b811015610ea7576000610e6f610dbe609b84612789565b9050610e7b8582612816565b838381518110610e8757fe5b6020908102919091010152610e9c84826127bc565b935050600101610e4e565b5081610f0e57609a54610eba90846127bc565b609a55610ec56121cb565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a250505050610ff1565b60005b610f1b609b612762565b811015610fa3576000610f2f609b83612789565b6001600160a01b0381166000908152609d602052604090208451919250908590859085908110610f5b57fe5b602002602001015181610f6a57fe5b6002830180549290910490910190556000610f8483610b86565b9050610f90838261286f565b8255600191820155919091019050610f11565b50610fac6121cb565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a2505050505b565b80611045576040805162461bcd60e51b815260206004820152601d60248201527f4c50526577617264733a2063616e6e6f742072656465656d207a65726f000000604482015290519081900360640190fd5b600061104f6121cb565b905061105b81846128e4565b506001600160a01b038082166000908152609e6020908152604080832093871683526002909301905220548211156110c45760405162461bcd60e51b81526004018080602001828103825260318152602001806135326031913960400191505060405180910390fd5b6110ce8383612965565b505050565b6110db6121cb565b6001600160a01b03166110ec6119ab565b6001600160a01b031614611135576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b610ff1612a53565b8061118f576040805162461bcd60e51b815260206004820152601d60248201527f4c50526577617264733a2063616e6e6f742072656465656d207a65726f000000604482015290519081900360640190fd5b60006111996121cb565b90506111a481612af3565b6111ad81611ff9565b8211156111eb5760405162461bcd60e51b81526004018080602001828103825260318152602001806135326031913960400191505060405180910390fd5b6001600160a01b0381166000908152609e60205260408120908190849061121183612762565b90505b80156112fb5760006112268482612789565b6001600160a01b0381166000908152609d6020908152604080832060028a01909252822080549394509092909186821161126c5750806112668886612b43565b5061126f565b50855b8082038355600284015461128390826121cf565b60028501556003840180548201905560408051828152905197829003976001600160a01b0380881692908d16917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9181900360200190a3866112e95750505050506112fb565b50506000199093019250611214915050565b50609980548601905560975461131b906001600160a01b0316858761222c565b5050505050565b61132a6121cb565b6001600160a01b031661133b6119ab565b6001600160a01b031614611384576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b61138d82610ce6565b156113df576040805162461bcd60e51b815260206004820152601e60248201527f4c50526577617264733a20746f6b656e20616c72656164792061646465640000604482015290519081900360640190fd5b6001600160a01b0381166114245760405162461bcd60e51b81526004018080602001828103825260308152602001806134d46030913960400191505060405180910390fd5b61142f609b83612b58565b506001600160a01b038281166000818152609d6020526040902060050180546001600160a01b03191692841692831790556114686121cb565b6001600160a01b03167ffc43233c964efa713b168e2361b2c57eafddc32aa7f7d0f85c92e66e113aa28a60405160405180910390a45050565b6114a96121cb565b6001600160a01b03166114ba6119ab565b6001600160a01b031614611503576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b609a548111156115445760405162461bcd60e51b81526004018080602001828103825260298152602001806135eb6029913960400191505060405180910390fd5b609a80548290039055609754611564906001600160a01b0316838361222c565b816001600160a01b03166115766121cb565b6001600160a01b03167fe4cedce8a9da6a4cd7794b1b6bbba077e9cb7bba00eeb3b7152926cd378f023c836040518082815260200191505060405180910390a35050565b6001600160a01b03166000908152609d602052604090206001015490565b6000610b8082670de0b6b3a76400006122ca565b60655460ff1690565b6115fd6121cb565b6001600160a01b031661160e6119ab565b6001600160a01b031614611657576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b8061166181610ce6565b6116b2576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b6116bd609b83612b43565b506001600160a01b0382166000818152609d6020526040902060050180546001600160a01b03191690556116ef6121cb565b6001600160a01b03167fbbe55b1ff108e23e5ff1a6f5d36946eec15ec0ca0ded2bfed4cdcf697ca9046060405160405180910390a35050565b6000610b8082612795565b600061173f609b612762565b905090565b61174c6121cb565b6001600160a01b031661175d6119ab565b6001600160a01b0316146117a6576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60006117fa6121cb565b905061180581612af3565b6001600160a01b0381166000908152609e602052604081209081908061182a83612762565b90505b80156118f157600061183f8482612789565b6001600160a01b0381166000908152609d602090815260408083206002808b01909352908320805493815591810154968301969394509290919061188390826121cf565b6002840155600383018054820190556040805182815290516001600160a01b0380871692908c16917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9181900360200190a36118df8785612b43565b5050600019909301925061182d915050565b506099805482019055609754611911906001600160a01b0316858361222c565b50505050565b609a5490565b610cb36119286121cb565b826128e4565b6119366121cb565b6001600160a01b03166119476119ab565b6001600160a01b031614611990576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b610ff1612b6d565b60006099546119a5612bf0565b01905090565b6033546001600160a01b031690565b60995490565b6001600160a01b03166000908152609d602052604090206004015490565b6001600160a01b0382166000908152609e60205260408120600301611a0381846125d7565b15611a1a57611a128184612c6c565b915050610b80565b5060009392505050565b6001600160a01b0381166000908152609e60205260408120600301815b611a4a82612762565b811015611a8257600080611a5e848461276d565b91509150611a76611a6f83836122ca565b86906127bc565b94505050600101611a41565b5050919050565b611a916115ec565b15611ad6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81611ae081610ce6565b611b31576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b81611b83576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a2063616e6e6f74207374616b65207a65726f00000000604482015290519081900360640190fd5b6000611b8d6121cb565b9050611b9981856128e4565b506001600160a01b038082166000908152609e602090815260408083209388168352609d909152902060048101805486019055611be786611bda85826119de565b6003850191908801612c81565b50611bfd6001600160a01b038716843088612c9f565b856001600160a01b0316836001600160a01b03167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7876040518082815260200191505060405180910390a3505050505050565b611c586121cb565b6001600160a01b0316611c696119ab565b6001600160a01b031614611cb2576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b81611cbc81610ce6565b611d0d576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b6001600160a01b038216611d525760405162461bcd60e51b81526004018080602001828103825260308152602001806134d46030913960400191505060405180910390fd5b6001600160a01b038381166000818152609d6020526040902060050180546001600160a01b0319169285169283179055611d8a6121cb565b6001600160a01b03167ff7d59a26862d20da3ef12eadf152cfdfab1eeee2999483cf9473ddfd7d992f0360405160405180910390a4505050565b6001600160a01b039182166000908152609e602090815260408083209390941682526002909201909152206001015490565b6001600160a01b039081166000908152609d60205260409020600501541690565b80611e69576040805162461bcd60e51b815260206004820152601e60248201527f4c50526577617264733a2063616e6e6f7420756e7374616b65207a65726f0000604482015290519081900360640190fd5b6000611e736121cb565b90506000611e8182856119de565b905080831115611ec25760405162461bcd60e51b81526004018080602001828103825260328152602001806134a26032913960400191505060405180910390fd5b6119118484612643565b6097546001600160a01b031690565b6000611ee56121cb565b9050611ef181836128e4565b506001600160a01b038082166000908152609e60209081526040808320938616835260029093019052205480156110ce576110ce8382612965565b6000610b80609b83612789565b611f416121cb565b6001600160a01b0316611f526119ab565b6001600160a01b031614611f9b576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b609780546001600160a01b0319166001600160a01b038316908117909155611fc16121cb565b6001600160a01b03167f7d7a6e0febb00fa099988e85a4dcf58c7297875e1bd06fe1e764c71619ee3a2060405160405180910390a350565b6001600160a01b0381166000908152609e6020526040812080825b61201d82612762565b81101561205b576002830160006120348484612789565b6001600160a01b031681526020810191909152604001600020549390930192600101612014565b505050919050565b6001600160a01b03166000908152609d602052604090206003015490565b6001600160a01b03166000908152609d602052604090205490565b60985490565b6120aa610d28565b610ff16117f0565b6120ba6121cb565b6001600160a01b03166120cb6119ab565b6001600160a01b031614612114576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6001600160a01b0381166121595760405162461bcd60e51b81526004018080602001828103825260268152602001806134566026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b610ff16121c06121cb565b612af3565b3b151590565b3390565b600082821115612226576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110ce908490612cf5565b60008061228a84612081565b905060006122988686611dc4565b90508082036ec097ce7bc90715b34b9f10000000006122b78683612816565b816122be57fe5b04979650505050505050565b60006122d583610ce6565b6122e157506000610b80565b60006122ec84611df6565b9050600080826001600160a01b031663a8fa8e526040518163ffffffff1660e01b8152600401604080518083038186803b15801561232957600080fd5b505afa15801561233d573d6000803e3d6000fd5b505050506040513d604081101561235357600080fd5b5080516020909101519092509050806123725760009350505050610b80565b8061237d8684612816565b8161238457fe5b049695505050505050565b600061239a306121c5565b15905090565b600054610100900460ff16806123b957506123b961238f565b806123c7575060005460ff16155b6124025760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff1615801561242d576000805460ff1961ff0019909116610100171660011790555b8015610bbe576000805461ff001916905550565b600054610100900460ff168061245a575061245a61238f565b80612468575060005460ff16155b6124a35760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff161580156124ce576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610cb3576000805461ff00191690555050565b600054610100900460ff1680612545575061254561238f565b80612553575060005460ff16155b61258e5760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff161580156125b9576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015610bbe576000805461ff001916905550565b6000610bd6836001600160a01b038416612da6565b6001600160a01b0381166000908152609e60205260408120600301815b61261282612762565b811015611a8257600080612626848461276d565b9150915061263586838361227e565b909401935050600101612609565b600061264d6121cb565b905061265981846128e4565b506001600160a01b0383166000908152609d60205260409020600481015461268190846121cf565b60048201556001600160a01b0382166000908152609e602052604081209060038201906126b8866126b2848a612c6c565b906121cf565b9050806126ed576126c98288612dbe565b506001600160a01b03871660009081526002840160205260408120600101556126fa565b6126f8828883612c81565b505b61270e6001600160a01b038816868861222c565b866001600160a01b0316856001600160a01b03167fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e3886040518082815260200191505060405180910390a350505050505050565b6000610b8082612dd3565b600080808061277c8686612dd7565b9097909650945050505050565b6000610bd68383612e52565b6001600160a01b0381166000908152609d6020526040812060040154610b809083906122ca565b600082820183811015610bd6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261282557506000610b80565b8282028284828161283257fe5b0414610bd65760405162461bcd60e51b81526004018080602001828103825260218152602001806135856021913960400191505060405180910390fd5b6001600160a01b0382166000908152609d6020526040812060048101548061289a5750549050610b80565b60018201548403806128b0575050549050610b80565b6000826128cc836ec097ce7bc90715b34b9f1000000000612816565b816128d357fe5b945494049093019695505050505050565b6001600160a01b038083166000908152609e60209081526040808320938516835260028401909152812080549192918361291e87876119de565b9050600061292d88888461227e565b9050801561294857918201808455916129468588612b58565b505b61295187612081565b600190940193909355509250505092915050565b600061296f6121cb565b6001600160a01b038082166000908152609e602090815260408083209388168352600284018252808320609d90925290912081548690038083559394509192909190806129c2576129c08488612b43565b505b60028201546129d190876121cf565b60028301556003820180548701905560998054870190556097546129ff906001600160a01b0316868861222c565b866001600160a01b0316856001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e886040518082815260200191505060405180910390a350505050505050565b612a5b6115ec565b612aa3576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612ad66121cb565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b0381166000908152609e60205260408120600301905b612b1982612762565b8110156110ce576000612b2c838361276d565b509050612b3984826128e4565b5050600101612b10565b6000610bd6836001600160a01b038416612eb6565b6000610bd6836001600160a01b038416612f7c565b612b756115ec565b15612bba576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ad66121cb565b609754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612c3b57600080fd5b505afa158015612c4f573d6000803e3d6000fd5b505050506040513d6020811015612c6557600080fd5b5051905090565b6000610bd6836001600160a01b038416612fc6565b6000612c97846001600160a01b03851684613008565b949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526119119085905b6000612d4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661309f9092919063ffffffff16565b8051909150156110ce57808060200190516020811015612d6957600080fd5b50516110ce5760405162461bcd60e51b815260040180806020018281038252602a815260200180613614602a913960400191505060405180910390fd5b60009081526001919091016020526040902054151590565b6000610bd6836001600160a01b0384166130ae565b5490565b815460009081908310612e1b5760405162461bcd60e51b81526004018080602001828103825260228152602001806135636022913960400191505060405180910390fd5b6000846000018481548110612e2c57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b81546000908210612e945760405162461bcd60e51b815260040180806020018281038252602281526020018061340e6022913960400191505060405180910390fd5b826000018281548110612ea357fe5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612f725783546000198083019190810190600090879083908110612ee957fe5b9060005260206000200154905080876000018481548110612f0657fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612f3657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610b80565b6000915050610b80565b6000612f888383612da6565b612fbe57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b80565b506000610b80565b6000610bd683836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250613182565b60008281526001840160205260408120548061306d575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610bd6565b8285600001600183038154811061308057fe5b9060005260206000209060020201600101819055506000915050610bd6565b6060612c97848460008561324c565b60008181526001830160205260408120548015612f7257835460001980830191908101906000908790839081106130e157fe5b906000526020600020906002020190508087600001848154811061310157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061314057fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450610b809350505050565b6000828152600184016020526040812054828161321d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e25781810151838201526020016131ca565b50505050905090810190601f16801561320f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061323057fe5b9060005260206000209060020201600101549150509392505050565b60608247101561328d5760405162461bcd60e51b815260040180806020018281038252602681526020018061347c6026913960400191505060405180910390fd5b613296856121c5565b6132e7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106133255780518252601f199092019160209182019101613306565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613387576040519150601f19603f3d011682016040523d82523d6000602084013e61338c565b606091505b509150915061339c8282866133a7565b979650505050505050565b606083156133b6575081610bd6565b8251156133c65782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131e25781810151838201526020016131ca56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734c50526577617264733a2063616e6e6f74207265636f7665722072657761726473546f6b656e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4c50526577617264733a2063616e6e6f7420756e7374616b65206d6f7265207468616e207374616b65642062616c616e63654c50526577617264733a20746f6b656e56616c7565496d706c2063616e6e6f74206265207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644c50526577617264733a2063616e6e6f742072656465656d206d6f72652072657761726473207468616e206561726e6564456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c50526577617264733a207265636f7665727920616d6f756e74203e20756e7374616b65644c50526577617264733a207265636f7665727920616d6f756e74203e20756e72656465656d61626c655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a738535945d19b012adb65b9548e65c3ef094838089f9dd825d40703d4b0269564736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c806375f22f3a1161019d578063bf7eefd2116100e9578063e1b52ffa116100a2578063e7a203691161007c578063e7a203691461091f578063e9fad8ee14610927578063f2fde38b1461092f578063f36c0a72146109555761030c565b8063e1b52ffa146108ad578063e317b105146108d3578063e68e3f94146108f95761030c565b8063bf7eefd2146107ea578063c2a672e014610810578063d1af0c7d1461083c578063d55b06f614610844578063d5b27cbe1461086a578063de320cc1146108875761030c565b806395a1297a11610156578063aad1748e11610130578063aad1748e1461073c578063adc9772e14610762578063adf772461461078e578063ba587a2e146107bc5761030c565b806395a1297a146106e05780639bfd8d61146106e8578063aa0ba3261461070e5761030c565b806375f22f3a146106765780637f86ce301461067e57806381b72684146106865780638456cb59146106ac578063860c19f3146106b45780638da5cb5b146106bc5761030c565b80633ad661271161025c57806355ae75eb116102155780635fa7b584116101ef5780635fa7b5841461061a578063690f680e146106405780636a1eca9014610666578063715018a61461066e5761030c565b806355ae75eb146105c65780635ab2c676146105ec5780635c975abb146106125761030c565b80633ad66127146105135780633b322def1461051b5780633f4ba83a1461054757806351a71b171461054f5780635476bd721461056c5780635530429b1461059a5761030c565b806319ab453c116102c957806333dc41c7116102a357806333dc41c7146104b757806334f43ac6146104dd57806335322f37146105035780633a98ef391461050b5761030c565b806319ab453c1461042957806326dcbbbc1461044f5780632fc895001461047d5761030c565b80630231ca171461031157806304d534a6146103495780630fd59a4b1461038957806312bc1b21146103af578063179237cf146103d557806319872cb314610403575b600080fd5b6103476004803603606081101561032757600080fd5b506001600160a01b0381358116916020810135909116906040013561095d565b005b6103776004803603604081101561035f57600080fd5b506001600160a01b0381358116916020013516610b49565b60408051918252519081900360200190f35b6103776004803603602081101561039f57600080fd5b50356001600160a01b0316610b86565b610347600480360360208110156103c557600080fd5b50356001600160a01b0316610bac565b610377600480360360408110156103eb57600080fd5b506001600160a01b0381358116916020013516610bc1565b6103776004803603602081101561041957600080fd5b50356001600160a01b0316610bdd565b6103476004803603602081101561043f57600080fd5b50356001600160a01b0316610bfb565b6103776004803603604081101561046557600080fd5b506001600160a01b0381358116916020013516610cb7565b6104a36004803603602081101561049357600080fd5b50356001600160a01b0316610ce6565b604080519115158252519081900360200190f35b610377600480360360208110156104cd57600080fd5b50356001600160a01b0316610cf3565b610347600480360360208110156104f357600080fd5b50356001600160a01b0316610d0e565b610347610d28565b610377610d98565b610347610dd8565b6103476004803603604081101561053157600080fd5b506001600160a01b038135169060200135610ff3565b6103476110d3565b6103476004803603602081101561056557600080fd5b503561113d565b6103476004803603604081101561058257600080fd5b506001600160a01b0381358116916020013516611322565b610347600480360360408110156105b057600080fd5b506001600160a01b0381351690602001356114a1565b610377600480360360208110156105dc57600080fd5b50356001600160a01b03166115ba565b6103776004803603602081101561060257600080fd5b50356001600160a01b03166115d8565b6104a36115ec565b6103476004803603602081101561063057600080fd5b50356001600160a01b03166115f5565b6103776004803603602081101561065657600080fd5b50356001600160a01b0316611728565b610377611733565b610347611744565b6103476117f0565b610377611917565b6103476004803603602081101561069c57600080fd5b50356001600160a01b031661191d565b61034761192e565b610377611998565b6106c46119ab565b604080516001600160a01b039092168252519081900360200190f35b6103776119ba565b610377600480360360208110156106fe57600080fd5b50356001600160a01b03166119c0565b6103776004803603604081101561072457600080fd5b506001600160a01b03813581169160200135166119de565b6103776004803603602081101561075257600080fd5b50356001600160a01b0316611a24565b6103476004803603604081101561077857600080fd5b506001600160a01b038135169060200135611a89565b610347600480360360408110156107a457600080fd5b506001600160a01b0381358116916020013516611c50565b610377600480360360408110156107d257600080fd5b506001600160a01b0381358116916020013516611dc4565b6106c46004803603602081101561080057600080fd5b50356001600160a01b0316611df6565b6103476004803603604081101561082657600080fd5b506001600160a01b038135169060200135611e17565b6106c4611ecc565b6103476004803603602081101561085a57600080fd5b50356001600160a01b0316611edb565b6106c46004803603602081101561088057600080fd5b5035611f2c565b6103476004803603602081101561089d57600080fd5b50356001600160a01b0316611f39565b610377600480360360208110156108c357600080fd5b50356001600160a01b0316611ff9565b610377600480360360208110156108e957600080fd5b50356001600160a01b0316612063565b6103776004803603602081101561090f57600080fd5b50356001600160a01b0316612081565b61037761209c565b6103476120a2565b6103476004803603602081101561094557600080fd5b50356001600160a01b03166120b2565b6103476121b5565b6109656121cb565b6001600160a01b03166109766119ab565b6001600160a01b0316146109bf576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6097546001600160a01b0384811691161415610a0c5760405162461bcd60e51b81526004018080602001828103825260268152602001806134306026913960400191505060405180910390fd5b6000610a92610a1a856119c0565b604080516370a0823160e01b815230600482015290516001600160a01b038816916370a08231916024808301926020929190829003018186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d6020811015610a8a57600080fd5b5051906121cf565b905080821115610ad35760405162461bcd60e51b81526004018080602001828103825260258152602001806135c66025913960400191505060405180910390fd5b610ae76001600160a01b038516848461222c565b826001600160a01b0316846001600160a01b0316610b036121cb565b6001600160a01b03167fa75728640461aeb3a4682a3f36b9eedb891491eb41b27953a45849a1d0c06588856040518082815260200191505060405180910390a450505050565b600080610b568484610cb7565b90506000610b6485856119de565b90508015610b7c57610b7785858361227e565b820191505b5090505b92915050565b6001600160a01b03166000908152609d6020526040902060038101546002909101540190565b610bb581610d0e565b610bbe81611edb565b50565b6000610bd682610bd185856119de565b6122ca565b9392505050565b6001600160a01b03166000908152609d602052604090206002015490565b600054610100900460ff1680610c145750610c1461238f565b80610c22575060005460ff16155b610c5d5760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff16158015610c88576000805460ff1961ff0019909116610100171660011790555b610c906123a0565b610c9982612441565b610ca161252c565b8015610cb3576000805461ff00191690555b5050565b6001600160a01b039182166000908152609e602090815260408083209390941682526002909201909152205490565b6000610b80609b836125d7565b6000610cfe826125ec565b610d0783611ff9565b0192915050565b610bbe81610d23610d1d6121cb565b846119de565b612643565b6000609e6000610d366121cb565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506000610d6682600301612762565b90505b8015610cb357600080610d7f600385018261276d565b91509150610d8d8282612643565b505060001901610d69565b6000805b610da6609b612762565b811015610dd457610dca610dc3610dbe609b84612789565b612795565b83906127bc565b9150600101610d9c565b5090565b6000610de2611998565b609854909150810380610df6575050610ff1565b6098829055600080610e08609b612762565b67ffffffffffffffff81118015610e1e57600080fd5b50604051908082528060200260200182016040528015610e48578160200160208202803683370190505b50905060005b610e58609b612762565b811015610ea7576000610e6f610dbe609b84612789565b9050610e7b8582612816565b838381518110610e8757fe5b6020908102919091010152610e9c84826127bc565b935050600101610e4e565b5081610f0e57609a54610eba90846127bc565b609a55610ec56121cb565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a250505050610ff1565b60005b610f1b609b612762565b811015610fa3576000610f2f609b83612789565b6001600160a01b0381166000908152609d602052604090208451919250908590859085908110610f5b57fe5b602002602001015181610f6a57fe5b6002830180549290910490910190556000610f8483610b86565b9050610f90838261286f565b8255600191820155919091019050610f11565b50610fac6121cb565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a2505050505b565b80611045576040805162461bcd60e51b815260206004820152601d60248201527f4c50526577617264733a2063616e6e6f742072656465656d207a65726f000000604482015290519081900360640190fd5b600061104f6121cb565b905061105b81846128e4565b506001600160a01b038082166000908152609e6020908152604080832093871683526002909301905220548211156110c45760405162461bcd60e51b81526004018080602001828103825260318152602001806135326031913960400191505060405180910390fd5b6110ce8383612965565b505050565b6110db6121cb565b6001600160a01b03166110ec6119ab565b6001600160a01b031614611135576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b610ff1612a53565b8061118f576040805162461bcd60e51b815260206004820152601d60248201527f4c50526577617264733a2063616e6e6f742072656465656d207a65726f000000604482015290519081900360640190fd5b60006111996121cb565b90506111a481612af3565b6111ad81611ff9565b8211156111eb5760405162461bcd60e51b81526004018080602001828103825260318152602001806135326031913960400191505060405180910390fd5b6001600160a01b0381166000908152609e60205260408120908190849061121183612762565b90505b80156112fb5760006112268482612789565b6001600160a01b0381166000908152609d6020908152604080832060028a01909252822080549394509092909186821161126c5750806112668886612b43565b5061126f565b50855b8082038355600284015461128390826121cf565b60028501556003840180548201905560408051828152905197829003976001600160a01b0380881692908d16917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9181900360200190a3866112e95750505050506112fb565b50506000199093019250611214915050565b50609980548601905560975461131b906001600160a01b0316858761222c565b5050505050565b61132a6121cb565b6001600160a01b031661133b6119ab565b6001600160a01b031614611384576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b61138d82610ce6565b156113df576040805162461bcd60e51b815260206004820152601e60248201527f4c50526577617264733a20746f6b656e20616c72656164792061646465640000604482015290519081900360640190fd5b6001600160a01b0381166114245760405162461bcd60e51b81526004018080602001828103825260308152602001806134d46030913960400191505060405180910390fd5b61142f609b83612b58565b506001600160a01b038281166000818152609d6020526040902060050180546001600160a01b03191692841692831790556114686121cb565b6001600160a01b03167ffc43233c964efa713b168e2361b2c57eafddc32aa7f7d0f85c92e66e113aa28a60405160405180910390a45050565b6114a96121cb565b6001600160a01b03166114ba6119ab565b6001600160a01b031614611503576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b609a548111156115445760405162461bcd60e51b81526004018080602001828103825260298152602001806135eb6029913960400191505060405180910390fd5b609a80548290039055609754611564906001600160a01b0316838361222c565b816001600160a01b03166115766121cb565b6001600160a01b03167fe4cedce8a9da6a4cd7794b1b6bbba077e9cb7bba00eeb3b7152926cd378f023c836040518082815260200191505060405180910390a35050565b6001600160a01b03166000908152609d602052604090206001015490565b6000610b8082670de0b6b3a76400006122ca565b60655460ff1690565b6115fd6121cb565b6001600160a01b031661160e6119ab565b6001600160a01b031614611657576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b8061166181610ce6565b6116b2576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b6116bd609b83612b43565b506001600160a01b0382166000818152609d6020526040902060050180546001600160a01b03191690556116ef6121cb565b6001600160a01b03167fbbe55b1ff108e23e5ff1a6f5d36946eec15ec0ca0ded2bfed4cdcf697ca9046060405160405180910390a35050565b6000610b8082612795565b600061173f609b612762565b905090565b61174c6121cb565b6001600160a01b031661175d6119ab565b6001600160a01b0316146117a6576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60006117fa6121cb565b905061180581612af3565b6001600160a01b0381166000908152609e602052604081209081908061182a83612762565b90505b80156118f157600061183f8482612789565b6001600160a01b0381166000908152609d602090815260408083206002808b01909352908320805493815591810154968301969394509290919061188390826121cf565b6002840155600383018054820190556040805182815290516001600160a01b0380871692908c16917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9181900360200190a36118df8785612b43565b5050600019909301925061182d915050565b506099805482019055609754611911906001600160a01b0316858361222c565b50505050565b609a5490565b610cb36119286121cb565b826128e4565b6119366121cb565b6001600160a01b03166119476119ab565b6001600160a01b031614611990576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b610ff1612b6d565b60006099546119a5612bf0565b01905090565b6033546001600160a01b031690565b60995490565b6001600160a01b03166000908152609d602052604090206004015490565b6001600160a01b0382166000908152609e60205260408120600301611a0381846125d7565b15611a1a57611a128184612c6c565b915050610b80565b5060009392505050565b6001600160a01b0381166000908152609e60205260408120600301815b611a4a82612762565b811015611a8257600080611a5e848461276d565b91509150611a76611a6f83836122ca565b86906127bc565b94505050600101611a41565b5050919050565b611a916115ec565b15611ad6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81611ae081610ce6565b611b31576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b81611b83576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a2063616e6e6f74207374616b65207a65726f00000000604482015290519081900360640190fd5b6000611b8d6121cb565b9050611b9981856128e4565b506001600160a01b038082166000908152609e602090815260408083209388168352609d909152902060048101805486019055611be786611bda85826119de565b6003850191908801612c81565b50611bfd6001600160a01b038716843088612c9f565b856001600160a01b0316836001600160a01b03167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7876040518082815260200191505060405180910390a3505050505050565b611c586121cb565b6001600160a01b0316611c696119ab565b6001600160a01b031614611cb2576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b81611cbc81610ce6565b611d0d576040805162461bcd60e51b815260206004820152601c60248201527f4c50526577617264733a20756e737570706f7274656420746f6b656e00000000604482015290519081900360640190fd5b6001600160a01b038216611d525760405162461bcd60e51b81526004018080602001828103825260308152602001806134d46030913960400191505060405180910390fd5b6001600160a01b038381166000818152609d6020526040902060050180546001600160a01b0319169285169283179055611d8a6121cb565b6001600160a01b03167ff7d59a26862d20da3ef12eadf152cfdfab1eeee2999483cf9473ddfd7d992f0360405160405180910390a4505050565b6001600160a01b039182166000908152609e602090815260408083209390941682526002909201909152206001015490565b6001600160a01b039081166000908152609d60205260409020600501541690565b80611e69576040805162461bcd60e51b815260206004820152601e60248201527f4c50526577617264733a2063616e6e6f7420756e7374616b65207a65726f0000604482015290519081900360640190fd5b6000611e736121cb565b90506000611e8182856119de565b905080831115611ec25760405162461bcd60e51b81526004018080602001828103825260328152602001806134a26032913960400191505060405180910390fd5b6119118484612643565b6097546001600160a01b031690565b6000611ee56121cb565b9050611ef181836128e4565b506001600160a01b038082166000908152609e60209081526040808320938616835260029093019052205480156110ce576110ce8382612965565b6000610b80609b83612789565b611f416121cb565b6001600160a01b0316611f526119ab565b6001600160a01b031614611f9b576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b609780546001600160a01b0319166001600160a01b038316908117909155611fc16121cb565b6001600160a01b03167f7d7a6e0febb00fa099988e85a4dcf58c7297875e1bd06fe1e764c71619ee3a2060405160405180910390a350565b6001600160a01b0381166000908152609e6020526040812080825b61201d82612762565b81101561205b576002830160006120348484612789565b6001600160a01b031681526020810191909152604001600020549390930192600101612014565b505050919050565b6001600160a01b03166000908152609d602052604090206003015490565b6001600160a01b03166000908152609d602052604090205490565b60985490565b6120aa610d28565b610ff16117f0565b6120ba6121cb565b6001600160a01b03166120cb6119ab565b6001600160a01b031614612114576040805162461bcd60e51b815260206004820181905260248201526000805160206135a6833981519152604482015290519081900360640190fd5b6001600160a01b0381166121595760405162461bcd60e51b81526004018080602001828103825260268152602001806134566026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b610ff16121c06121cb565b612af3565b3b151590565b3390565b600082821115612226576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110ce908490612cf5565b60008061228a84612081565b905060006122988686611dc4565b90508082036ec097ce7bc90715b34b9f10000000006122b78683612816565b816122be57fe5b04979650505050505050565b60006122d583610ce6565b6122e157506000610b80565b60006122ec84611df6565b9050600080826001600160a01b031663a8fa8e526040518163ffffffff1660e01b8152600401604080518083038186803b15801561232957600080fd5b505afa15801561233d573d6000803e3d6000fd5b505050506040513d604081101561235357600080fd5b5080516020909101519092509050806123725760009350505050610b80565b8061237d8684612816565b8161238457fe5b049695505050505050565b600061239a306121c5565b15905090565b600054610100900460ff16806123b957506123b961238f565b806123c7575060005460ff16155b6124025760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff1615801561242d576000805460ff1961ff0019909116610100171660011790555b8015610bbe576000805461ff001916905550565b600054610100900460ff168061245a575061245a61238f565b80612468575060005460ff16155b6124a35760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff161580156124ce576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610cb3576000805461ff00191690555050565b600054610100900460ff1680612545575061254561238f565b80612553575060005460ff16155b61258e5760405162461bcd60e51b815260040180806020018281038252602e815260200180613504602e913960400191505060405180910390fd5b600054610100900460ff161580156125b9576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015610bbe576000805461ff001916905550565b6000610bd6836001600160a01b038416612da6565b6001600160a01b0381166000908152609e60205260408120600301815b61261282612762565b811015611a8257600080612626848461276d565b9150915061263586838361227e565b909401935050600101612609565b600061264d6121cb565b905061265981846128e4565b506001600160a01b0383166000908152609d60205260409020600481015461268190846121cf565b60048201556001600160a01b0382166000908152609e602052604081209060038201906126b8866126b2848a612c6c565b906121cf565b9050806126ed576126c98288612dbe565b506001600160a01b03871660009081526002840160205260408120600101556126fa565b6126f8828883612c81565b505b61270e6001600160a01b038816868861222c565b866001600160a01b0316856001600160a01b03167fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e3886040518082815260200191505060405180910390a350505050505050565b6000610b8082612dd3565b600080808061277c8686612dd7565b9097909650945050505050565b6000610bd68383612e52565b6001600160a01b0381166000908152609d6020526040812060040154610b809083906122ca565b600082820183811015610bd6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261282557506000610b80565b8282028284828161283257fe5b0414610bd65760405162461bcd60e51b81526004018080602001828103825260218152602001806135856021913960400191505060405180910390fd5b6001600160a01b0382166000908152609d6020526040812060048101548061289a5750549050610b80565b60018201548403806128b0575050549050610b80565b6000826128cc836ec097ce7bc90715b34b9f1000000000612816565b816128d357fe5b945494049093019695505050505050565b6001600160a01b038083166000908152609e60209081526040808320938516835260028401909152812080549192918361291e87876119de565b9050600061292d88888461227e565b9050801561294857918201808455916129468588612b58565b505b61295187612081565b600190940193909355509250505092915050565b600061296f6121cb565b6001600160a01b038082166000908152609e602090815260408083209388168352600284018252808320609d90925290912081548690038083559394509192909190806129c2576129c08488612b43565b505b60028201546129d190876121cf565b60028301556003820180548701905560998054870190556097546129ff906001600160a01b0316868861222c565b866001600160a01b0316856001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e886040518082815260200191505060405180910390a350505050505050565b612a5b6115ec565b612aa3576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612ad66121cb565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b0381166000908152609e60205260408120600301905b612b1982612762565b8110156110ce576000612b2c838361276d565b509050612b3984826128e4565b5050600101612b10565b6000610bd6836001600160a01b038416612eb6565b6000610bd6836001600160a01b038416612f7c565b612b756115ec565b15612bba576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ad66121cb565b609754604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612c3b57600080fd5b505afa158015612c4f573d6000803e3d6000fd5b505050506040513d6020811015612c6557600080fd5b5051905090565b6000610bd6836001600160a01b038416612fc6565b6000612c97846001600160a01b03851684613008565b949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526119119085905b6000612d4a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661309f9092919063ffffffff16565b8051909150156110ce57808060200190516020811015612d6957600080fd5b50516110ce5760405162461bcd60e51b815260040180806020018281038252602a815260200180613614602a913960400191505060405180910390fd5b60009081526001919091016020526040902054151590565b6000610bd6836001600160a01b0384166130ae565b5490565b815460009081908310612e1b5760405162461bcd60e51b81526004018080602001828103825260228152602001806135636022913960400191505060405180910390fd5b6000846000018481548110612e2c57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b81546000908210612e945760405162461bcd60e51b815260040180806020018281038252602281526020018061340e6022913960400191505060405180910390fd5b826000018281548110612ea357fe5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612f725783546000198083019190810190600090879083908110612ee957fe5b9060005260206000200154905080876000018481548110612f0657fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612f3657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610b80565b6000915050610b80565b6000612f888383612da6565b612fbe57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b80565b506000610b80565b6000610bd683836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250613182565b60008281526001840160205260408120548061306d575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610bd6565b8285600001600183038154811061308057fe5b9060005260206000209060020201600101819055506000915050610bd6565b6060612c97848460008561324c565b60008181526001830160205260408120548015612f7257835460001980830191908101906000908790839081106130e157fe5b906000526020600020906002020190508087600001848154811061310157fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061314057fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450610b809350505050565b6000828152600184016020526040812054828161321d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131e25781810151838201526020016131ca565b50505050905090810190601f16801561320f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061323057fe5b9060005260206000209060020201600101549150509392505050565b60608247101561328d5760405162461bcd60e51b815260040180806020018281038252602681526020018061347c6026913960400191505060405180910390fd5b613296856121c5565b6132e7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106133255780518252601f199092019160209182019101613306565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613387576040519150601f19603f3d011682016040523d82523d6000602084013e61338c565b606091505b509150915061339c8282866133a7565b979650505050505050565b606083156133b6575081610bd6565b8251156133c65782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131e25781810151838201526020016131ca56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734c50526577617264733a2063616e6e6f74207265636f7665722072657761726473546f6b656e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4c50526577617264733a2063616e6e6f7420756e7374616b65206d6f7265207468616e207374616b65642062616c616e63654c50526577617264733a20746f6b656e56616c7565496d706c2063616e6e6f74206265207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644c50526577617264733a2063616e6e6f742072656465656d206d6f72652072657761726473207468616e206561726e6564456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c50526577617264733a207265636f7665727920616d6f756e74203e20756e7374616b65644c50526577617264733a207265636f7665727920616d6f756e74203e20756e72656465656d61626c655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a738535945d19b012adb65b9548e65c3ef094838089f9dd825d40703d4b0269564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 353,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3458,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3577,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 375,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 466,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11969,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_rewardsToken",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11971,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_lastTotalRewardsAccrued",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 11973,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_totalRewardsRedeemed",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 11975,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_unredeemableRewards",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 11977,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_tokens",
        "offset": 0,
        "slot": "155",
        "type": "t_struct(AddressSet)2680_storage"
      },
      {
        "astId": 11981,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_tokenData",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_struct(TokenData)11953_storage)"
      },
      {
        "astId": 11985,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "_users",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_struct(UserData)11967_storage)"
      },
      {
        "astId": 11989,
        "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)43_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)6796_storage)dyn_storage": {
        "base": "t_struct(MapEntry)6796_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenData)11953_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPRewardsData.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)11953_storage"
      },
      "t_mapping(t_address,t_struct(UserData)11967_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPRewardsData.UserData)",
        "numberOfBytes": "32",
        "value": "t_struct(UserData)11967_storage"
      },
      "t_mapping(t_address,t_struct(UserTokenRewards)11958_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LPRewardsData.UserTokenRewards)",
        "numberOfBytes": "32",
        "value": "t_struct(UserTokenRewards)11958_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2680_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2679,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2415_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AddressToUintMap)7068_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 7067,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)6804_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)6804_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 6799,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)6796_storage)dyn_storage"
          },
          {
            "astId": 6803,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)6796_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 6793,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6795,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2415_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2410,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2414,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)11953_storage": {
        "encoding": "inplace",
        "label": "struct LPRewardsData.TokenData",
        "members": [
          {
            "astId": 11942,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "arpt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11944,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "lastRewardsAccrued",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11946,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11948,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "rewardsRedeemed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11950,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "totalStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11952,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "valueImpl",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserData)11967_storage": {
        "encoding": "inplace",
        "label": "struct LPRewardsData.UserData",
        "members": [
          {
            "astId": 11960,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "tokensWithRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2680_storage"
          },
          {
            "astId": 11964,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "rewardsFor",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(UserTokenRewards)11958_storage)"
          },
          {
            "astId": 11966,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "staked",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressToUintMap)7068_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserTokenRewards)11958_storage": {
        "encoding": "inplace",
        "label": "struct LPRewardsData.UserTokenRewards",
        "members": [
          {
            "astId": 11955,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "pending",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11957,
            "contract": "contracts/rewards/LPRewards/LPRewards.sol:LPRewards",
            "label": "arptLast",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}