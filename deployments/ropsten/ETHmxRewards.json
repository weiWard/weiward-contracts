{
  "address": "0xEEc0cEA93b6FbAb163099942EE9650d4fe28b886",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethmxAddr_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethAddr_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "accrualUpdateInterval_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "AccrualUpdateIntervalSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accruedRewards",
          "type": "uint256"
        }
      ],
      "name": "AccrualUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnredeemableRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnsupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accrualUpdateInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accruedRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accruedRewardsPerTokenLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethmxAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAccrualUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lastRewardsBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTotalRewardsAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readyForUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnredeemableRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnstaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnsupportedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "rewardsBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "setAccrualUpdateInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unredeemableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccrual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f53c2f11c505df33fb5720e6c1705f0357d15987feeafc307ab0e87814b0a11",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "contractAddress": null,
    "transactionIndex": 11,
    "gasUsed": "2034865",
    "logsBloom": "0x
    "blockHash": "0x49403db557904f352fb64ef1e7c3feb38edd1ecf0963111cb939e406d53fd3cb",
    "transactionHash": "0x2f53c2f11c505df33fb5720e6c1705f0357d15987feeafc307ab0e87814b0a11",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 9985343,
        "transactionHash": "0x2f53c2f11c505df33fb5720e6c1705f0357d15987feeafc307ab0e87814b0a11",
        "address": "0xEEc0cEA93b6FbAb163099942EE9650d4fe28b886",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x49403db557904f352fb64ef1e7c3feb38edd1ecf0963111cb939e406d53fd3cb"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 9985343,
        "transactionHash": "0x2f53c2f11c505df33fb5720e6c1705f0357d15987feeafc307ab0e87814b0a11",
        "address": "0xEEc0cEA93b6FbAb163099942EE9650d4fe28b886",
        "topics": [
          "0x004b735c73896be679585edaa8f0c947a38d34100bb0088d0b41c28953a2df50",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000015180",
        "logIndex": 27,
        "blockHash": "0x49403db557904f352fb64ef1e7c3feb38edd1ecf0963111cb939e406d53fd3cb"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 9985343,
        "transactionHash": "0x2f53c2f11c505df33fb5720e6c1705f0357d15987feeafc307ab0e87814b0a11",
        "address": "0xEEc0cEA93b6FbAb163099942EE9650d4fe28b886",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000005757dd711eae80e181e07cdbce43359ac1048394"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x49403db557904f352fb64ef1e7c3feb38edd1ecf0963111cb939e406d53fd3cb"
      }
    ],
    "blockNumber": 9985343,
    "cumulativeGasUsed": "4517685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "0xB63258927FDa968B19907AA92E43e88D96ef3290",
    "0x706f8Bf6ff5352F61F3e6D554232BeD01d679938",
    86400
  ],
  "solcInputHash": "d866fd3a9c665c3159ffcb94310e6171",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethmxAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accrualUpdateInterval_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"AccrualUpdateIntervalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedRewards\",\"type\":\"uint256\"}],\"name\":\"AccrualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnredeemableRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnsupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrualUpdateInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accruedRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accruedRewardsPerTokenLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethmxAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastRewardsBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyForUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnredeemableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnstaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardsBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setAccrualUpdateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unredeemableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccrual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/ETHmxRewards.sol\":\"ETHmxRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07779badf9435bce9a95e4527e892d83a2baae798ba87203db0b22679b40ef35\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd59014dc919b04404c3f975a8eec920c273d4782fd43c82b87d4e513c97fc78b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x2424442932373c51391b31409f9620d1e1396c37f41ab9d82c51d69bebdd1ab5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x2a245b797741f05f91212b1c2155a1b99a8884e6fd4c27953c4d3073732737f8\",\"license\":\"MIT\"},\"contracts/rewards/ETHmxRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IETHmx.sol\\\";\\nimport \\\"./interfaces/IETHmxRewards.sol\\\";\\n\\n// High accuracy in block.timestamp is not needed.\\n// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\\n/* solhint-disable not-rely-on-time */\\n\\ncontract ETHmxRewards is Ownable, Pausable, IETHmxRewards {\\n\\tusing Arrays for uint256[];\\n\\tusing Counters for Counters.Counter;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Immutable Public State */\\n\\n\\taddress public immutable override ethmxAddr;\\n\\taddress public immutable override wethAddr;\\n\\n\\t/* Mutable Internal State */\\n\\n\\tuint256[] internal _arptSnapshots;\\n\\tmapping(address => uint256) internal _arptLastIdx;\\n\\n\\tuint256 internal _lastAccrualUpdate;\\n\\tuint256 internal _accrualUpdateInterval;\\n\\n\\tmapping(address => uint256) internal _rewardsFor;\\n\\tuint256 internal _lastTotalRewardsAccrued;\\n\\tuint256 internal _totalRewardsRedeemed;\\n\\n\\tmapping(address => uint256) internal _stakedFor;\\n\\tuint256 internal _totalStaked;\\n\\n\\t/* Immutable Internal State */\\n\\n\\tuint256 internal constant _MULTIPLIER = 1e36;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(\\n\\t\\taddress owner_,\\n\\t\\taddress ethmxAddr_,\\n\\t\\taddress wethAddr_,\\n\\t\\tuint256 accrualUpdateInterval_\\n\\t) Ownable() {\\n\\t\\tethmxAddr = ethmxAddr_;\\n\\t\\twethAddr = wethAddr_;\\n\\t\\t_arptSnapshots.push(0);\\n\\t\\tsetAccrualUpdateInterval(accrualUpdateInterval_);\\n\\t\\tif (owner_ != owner()) {\\n\\t\\t\\ttransferOwnership(owner_);\\n\\t\\t}\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction accrualUpdateInterval() external view override returns (uint256) {\\n\\t\\treturn _accrualUpdateInterval;\\n\\t}\\n\\n\\tfunction accruedRewardsPerToken() public view override returns (uint256) {\\n\\t\\treturn _arptSnapshots[_arptSnapshots.length - 1];\\n\\t}\\n\\n\\tfunction accruedRewardsPerTokenLast(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _arptSnapshots[_arptLastIdx[account]];\\n\\t}\\n\\n\\tfunction lastAccrualUpdate() external view override returns (uint256) {\\n\\t\\treturn _lastAccrualUpdate;\\n\\t}\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _rewardsFor[account];\\n\\t}\\n\\n\\tfunction lastTotalRewardsAccrued() public view override returns (uint256) {\\n\\t\\treturn _lastTotalRewardsAccrued;\\n\\t}\\n\\n\\tfunction readyForUpdate() external view override returns (bool) {\\n\\t\\tif (_lastAccrualUpdate > block.timestamp) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tuint256 timePassed = block.timestamp - _lastAccrualUpdate;\\n\\t\\treturn timePassed >= _accrualUpdateInterval;\\n\\t}\\n\\n\\tfunction rewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Gas savings\\n\\t\\tuint256 rewards = _rewardsFor[account];\\n\\t\\tuint256 staked = _stakedFor[account];\\n\\n\\t\\tif (staked == 0) {\\n\\t\\t\\treturn rewards;\\n\\t\\t}\\n\\n\\t\\tuint256[] memory arptValues = _arptSnapshots;\\n\\t\\tuint256 length = arptValues.length;\\n\\t\\tuint256 arpt = arptValues[length - 1];\\n\\t\\tuint256 lastIdx = _arptLastIdx[account];\\n\\t\\tuint256 arptDelta = arpt - arptValues[lastIdx];\\n\\n\\t\\tif (arptDelta == 0) {\\n\\t\\t\\treturn rewards;\\n\\t\\t}\\n\\n\\t\\t// Calculate reward and new stake\\n\\t\\tuint256 currentRewards = 0;\\n\\t\\tfor (uint256 i = lastIdx + 1; i < length; i++) {\\n\\t\\t\\tarptDelta = arptValues[i] - arptValues[i - 1];\\n\\t\\t\\tif (arptDelta >= _MULTIPLIER) {\\n\\t\\t\\t\\t// This should handle any plausible overflow\\n\\t\\t\\t\\trewards += staked;\\n\\t\\t\\t\\tstaked = 0;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcurrentRewards = staked.mul(arptDelta) / _MULTIPLIER;\\n\\t\\t\\trewards += currentRewards;\\n\\t\\t\\tstaked -= currentRewards;\\n\\t\\t}\\n\\n\\t\\treturn rewards;\\n\\t}\\n\\n\\tfunction stakedBalanceOf(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _stakedFor[account];\\n\\t}\\n\\n\\tfunction totalRewardsAccrued() public view override returns (uint256) {\\n\\t\\t// Overflow is OK\\n\\t\\treturn _currentRewardsBalance() + _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalRewardsRedeemed() public view override returns (uint256) {\\n\\t\\treturn _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalStaked() public view override returns (uint256) {\\n\\t\\treturn _totalStaked;\\n\\t}\\n\\n\\tfunction unredeemableRewards() public view override returns (uint256) {\\n\\t\\treturn _rewardsFor[address(0)];\\n\\t}\\n\\n\\t/* Public Mutators */\\n\\n\\tfunction exit() public override {\\n\\t\\taddress account = _msgSender();\\n\\t\\tunstakeAll();\\n\\t\\t_redeemReward(account, _rewardsFor[account]);\\n\\t}\\n\\n\\tfunction pause() public override onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tamount <= _rewardsFor[address(0)],\\n\\t\\t\\t\\\"ETHmxRewards: recovery amount greater than unredeemable\\\"\\n\\t\\t);\\n\\t\\t_rewardsFor[address(0)] -= amount;\\n\\t\\tIERC20(wethAddr).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnredeemableRewards(_msgSender(), to, amount);\\n\\t}\\n\\n\\tfunction recoverUnstaked(address to, uint256 amount)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tuint256 unstaked =\\n\\t\\t\\tIERC20(ethmxAddr).balanceOf(address(this)).sub(_totalStaked);\\n\\n\\t\\trequire(\\n\\t\\t\\tamount <= unstaked,\\n\\t\\t\\t\\\"ETHmxRewards: recovery amount greater than unstaked\\\"\\n\\t\\t);\\n\\n\\t\\tIERC20(ethmxAddr).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnstaked(_msgSender(), to, amount);\\n\\t}\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public override onlyOwner {\\n\\t\\trequire(token != ethmxAddr, \\\"ETHmxRewards: cannot recover ETHmx\\\");\\n\\t\\trequire(token != wethAddr, \\\"ETHmxRewards: cannot recover WETH\\\");\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnsupported(_msgSender(), token, to, amount);\\n\\t}\\n\\n\\tfunction redeemAllRewards() public override {\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateRewardFor(account);\\n\\t\\t_redeemReward(account, _rewardsFor[account]);\\n\\t}\\n\\n\\tfunction redeemReward(uint256 amount) public override {\\n\\t\\taddress account = _msgSender();\\n\\t\\t// Update reward first (since it only goes up)\\n\\t\\t_updateRewardFor(account);\\n\\t\\trequire(\\n\\t\\t\\tamount <= _rewardsFor[account],\\n\\t\\t\\t\\\"ETHmxRewards: cannot redeem more rewards than earned\\\"\\n\\t\\t);\\n\\t\\t_redeemReward(account, amount);\\n\\t}\\n\\n\\tfunction setAccrualUpdateInterval(uint256 interval)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_accrualUpdateInterval = interval;\\n\\t\\temit AccrualUpdateIntervalSet(_msgSender(), interval);\\n\\t}\\n\\n\\tfunction stake(uint256 amount) public override whenNotPaused {\\n\\t\\trequire(amount != 0, \\\"ETHmxRewards: cannot stake zero\\\");\\n\\n\\t\\taddress account = _msgSender();\\n\\t\\t_updateRewardFor(account);\\n\\n\\t\\t_stakedFor[account] = _stakedFor[account].add(amount);\\n\\t\\t_totalStaked = _totalStaked.add(amount);\\n\\n\\t\\tIERC20(ethmxAddr).safeTransferFrom(account, address(this), amount);\\n\\t\\temit Staked(account, amount);\\n\\t}\\n\\n\\tfunction unpause() public override onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction unstake(uint256 amount) public override {\\n\\t\\trequire(amount != 0, \\\"ETHmxRewards: cannot unstake zero\\\");\\n\\t\\taddress account = _msgSender();\\n\\n\\t\\t// Check against initial stake (since it only goes down)\\n\\t\\trequire(\\n\\t\\t\\tamount <= _stakedFor[account],\\n\\t\\t\\t\\\"ETHmxRewards: cannot unstake more than staked balance\\\"\\n\\t\\t);\\n\\n\\t\\t// Update stake\\n\\t\\t_updateRewardFor(account);\\n\\t\\t// Cap amount with updated stake\\n\\t\\tuint256 staked = _stakedFor[account];\\n\\t\\tif (amount > staked) {\\n\\t\\t\\tamount = staked;\\n\\t\\t}\\n\\n\\t\\t_unstake(account, amount);\\n\\t}\\n\\n\\tfunction unstakeAll() public override {\\n\\t\\taddress account = _msgSender();\\n\\t\\t// Update stake first\\n\\t\\t_updateRewardFor(account);\\n\\t\\t_unstake(account, _stakedFor[account]);\\n\\t}\\n\\n\\tfunction updateAccrual() public override {\\n\\t\\tuint256 timePassed =\\n\\t\\t\\tblock.timestamp.sub(\\n\\t\\t\\t\\t_lastAccrualUpdate,\\n\\t\\t\\t\\t\\\"ETHmxRewards: block is older than last accrual update\\\"\\n\\t\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttimePassed >= _accrualUpdateInterval,\\n\\t\\t\\t\\\"ETHmxRewards: too soon to update accrual\\\"\\n\\t\\t);\\n\\n\\t\\t_updateAccrual();\\n\\t}\\n\\n\\tfunction updateReward() public override {\\n\\t\\t_updateRewardFor(_msgSender());\\n\\t}\\n\\n\\t/* Internal Views */\\n\\n\\tfunction _currentRewardsBalance() internal view returns (uint256) {\\n\\t\\treturn IERC20(wethAddr).balanceOf(address(this));\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _burnETHmx(uint256 amount) internal {\\n\\t\\t_totalStaked = _totalStaked.sub(amount);\\n\\t\\tIETHmx(ethmxAddr).burn(amount);\\n\\t}\\n\\n\\tfunction _redeemReward(address account, uint256 amount) internal {\\n\\t\\t// Should be guaranteed safe by caller (gas savings)\\n\\t\\t_rewardsFor[account] -= amount;\\n\\t\\t// Overflow is OK\\n\\t\\t_totalRewardsRedeemed += amount;\\n\\n\\t\\tIERC20(wethAddr).safeTransfer(account, amount);\\n\\n\\t\\temit RewardPaid(account, amount);\\n\\t}\\n\\n\\tfunction _unstake(address account, uint256 amount) internal {\\n\\t\\tif (amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Should be guaranteed safe by caller\\n\\t\\t_stakedFor[account] -= amount;\\n\\t\\t_totalStaked = _totalStaked.sub(amount);\\n\\n\\t\\tIERC20(ethmxAddr).safeTransfer(account, amount);\\n\\t\\temit Unstaked(account, amount);\\n\\t}\\n\\n\\tfunction _updateAccrual() internal {\\n\\t\\tuint256 rewardsAccrued = totalRewardsAccrued();\\n\\t\\t// Overflow is OK\\n\\t\\tuint256 newRewards = rewardsAccrued - _lastTotalRewardsAccrued;\\n\\n\\t\\tif (newRewards == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Gas savings\\n\\t\\tuint256 tstaked = _totalStaked;\\n\\n\\t\\tif (newRewards < tstaked) {\\n\\t\\t\\t// Add breathing room for better rounding, overflow is OK\\n\\t\\t\\tuint256 arpt = accruedRewardsPerToken();\\n\\t\\t\\tarpt += newRewards.mul(_MULTIPLIER) / tstaked;\\n\\t\\t\\t_arptSnapshots.push(arpt);\\n\\t\\t\\t_burnETHmx(newRewards);\\n\\t\\t} else {\\n\\t\\t\\tuint256 leftover = newRewards - tstaked;\\n\\t\\t\\t// Assign excess to zero address\\n\\t\\t\\t_rewardsFor[address(0)] = _rewardsFor[address(0)].add(leftover);\\n\\n\\t\\t\\tif (tstaked != 0) {\\n\\t\\t\\t\\tuint256 arpt = accruedRewardsPerToken();\\n\\t\\t\\t\\t// newRewards when tokens == totalStaked\\n\\t\\t\\t\\tarpt += _MULTIPLIER;\\n\\t\\t\\t\\t_arptSnapshots.push(arpt);\\n\\t\\t\\t\\t_burnETHmx(tstaked);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_lastTotalRewardsAccrued = rewardsAccrued;\\n\\t\\t_lastAccrualUpdate = block.timestamp;\\n\\t\\temit AccrualUpdated(_msgSender(), rewardsAccrued);\\n\\t}\\n\\n\\tfunction _updateRewardFor(address account) internal {\\n\\t\\t// Gas savings\\n\\t\\tuint256[] memory arptValues = _arptSnapshots;\\n\\t\\tuint256 length = arptValues.length;\\n\\t\\tuint256 arpt = arptValues[length - 1];\\n\\t\\tuint256 lastIdx = _arptLastIdx[account];\\n\\t\\tuint256 arptDelta = arpt - arptValues[lastIdx];\\n\\t\\tuint256 staked = _stakedFor[account];\\n\\n\\t\\t_arptLastIdx[account] = length - 1;\\n\\n\\t\\tif (staked == 0 || arptDelta == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Calculate reward and new stake\\n\\t\\tuint256 currentRewards = 0;\\n\\t\\tuint256 newRewards = 0;\\n\\t\\tfor (uint256 i = lastIdx + 1; i < length; i++) {\\n\\t\\t\\tarptDelta = arptValues[i] - arptValues[i - 1];\\n\\t\\t\\tif (arptDelta >= _MULTIPLIER) {\\n\\t\\t\\t\\t// This should handle any plausible overflow\\n\\t\\t\\t\\tnewRewards += staked;\\n\\t\\t\\t\\tstaked = 0;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcurrentRewards = staked.mul(arptDelta) / _MULTIPLIER;\\n\\t\\t\\tnewRewards += currentRewards;\\n\\t\\t\\tstaked -= currentRewards;\\n\\t\\t}\\n\\n\\t\\t// Update state\\n\\t\\t_stakedFor[account] = staked;\\n\\t\\t_rewardsFor[account] = _rewardsFor[account].add(newRewards);\\n\\t}\\n}\\n\",\"keccak256\":\"0x832d80b2d3b4374ac8b27f2241112e397f66f0bd0cee2776113e635c656cac9e\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IETHmxRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IETHmxRewards {\\n\\t/* Views */\\n\\n\\tfunction accrualUpdateInterval() external view returns (uint256);\\n\\n\\tfunction accruedRewardsPerToken() external view returns (uint256);\\n\\n\\tfunction accruedRewardsPerTokenLast(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethmxAddr() external view returns (address);\\n\\n\\tfunction lastAccrualUpdate() external view returns (uint256);\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastTotalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction readyForUpdate() external view returns (bool);\\n\\n\\tfunction rewardsBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction stakedBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction totalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction totalRewardsRedeemed() external view returns (uint256);\\n\\n\\tfunction totalStaked() external view returns (uint256);\\n\\n\\tfunction unredeemableRewards() external view returns (uint256);\\n\\n\\tfunction wethAddr() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction exit() external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnstaked(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction redeemAllRewards() external;\\n\\n\\tfunction redeemReward(uint256 amount) external;\\n\\n\\tfunction setAccrualUpdateInterval(uint256 interval) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction unpause() external;\\n\\n\\tfunction unstake(uint256 amount) external;\\n\\n\\tfunction unstakeAll() external;\\n\\n\\tfunction updateAccrual() external;\\n\\n\\tfunction updateReward() external;\\n\\n\\t/* Events */\\n\\n\\tevent AccrualUpdated(address indexed author, uint256 accruedRewards);\\n\\tevent AccrualUpdateIntervalSet(address indexed author, uint256 interval);\\n\\tevent RecoveredUnredeemableRewards(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnstaked(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardPaid(address indexed to, uint256 amount);\\n\\tevent Staked(address indexed account, uint256 amount);\\n\\tevent Unstaked(address indexed account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xe9617fd22df3f033c6152805b8875b6aaeca80682aa5bdfb04554a45ded5745d\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IETHmx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IETHmx {\\n\\t/* Views */\\n\\n\\tfunction minter() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction mintTo(address account, uint256 amount) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setMinter(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent MinterSet(address indexed author, address indexed account);\\n\\tevent Recovered(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0xcc7c88a00edf57030ec7b3faa01afafd03dc927093c41981a8c11ffa6cb37f0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620025d3380380620025d3833981810160405260808110156200003757600080fd5b508051602082015160408301516060909301519192909160006200005a6200012c565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620025b3833981519152908290a3506000805460ff60a01b191681556001600160601b0319606085811b821660805284901b1660a0526001805480820182559082527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155620000f48162000130565b620000fe620001dd565b6001600160a01b0316846001600160a01b03161462000122576200012284620001ec565b50505050620002d9565b3390565b6200013a6200012c565b6000546001600160a01b039081169116146200018c576040805162461bcd60e51b8152602060048201819052602482015260008051602062002593833981519152604482015290519081900360640190fd5b60048190556200019b6200012c565b6001600160a01b03167e4b735c73896be679585edaa8f0c947a38d34100bb0088d0b41c28953a2df50826040518082815260200191505060405180910390a250565b6000546001600160a01b031690565b620001f66200012c565b6000546001600160a01b0390811691161462000248576040805162461bcd60e51b8152602060048201819052602482015260008051602062002593833981519152604482015290519081900360640190fd5b6001600160a01b0381166200028f5760405162461bcd60e51b81526004018080602001828103825260268152602001806200256d6026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020620025b383398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60805160601c60a05160601c6122386200033560003980610a555280610bc85280610d50528061198f5280611add525080610cdf5280610f5b5280610fc85280611072528061115d52806115b15280611ca652506122386000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638456cb591161011a578063be4c86f2116100ad578063e1b52ffa1161007c578063e1b52ffa14610448578063e7a203691461046e578063e9fad8ee14610476578063f2fde38b1461047e578063f36c0a72146104a4576101fb565b8063be4c86f2146103e6578063bfb0efab14610412578063c42ac2261461041a578063d8aa0aa514610440576101fb565b806395a1297a116100e957806395a1297a146103b1578063a694fc3a146103b9578063ad3133bb146103d6578063bd2e9c4e146103de576101fb565b80638456cb5914610363578063860c19f31461036b57806386a86d41146103735780638da5cb5b146103a9576101fb565b80635530429b116101925780637d5aa5f4116101615780637d5aa5f4146103275780637f86ce301461034b578063817b1cd214610353578063832d40f21461035b576101fb565b80635530429b146102cf5780635c975abb146102fb578063715018a61461031757806375f22f3a1461031f576101fb565b806335322f37116101ce57806335322f371461029a5780633ad66127146102a25780633f4ba83a146102aa57806351a71b17146102b2576101fb565b80631482436614610200578063167653911461021f5780632e17de781461025757806333dc41c714610274575b600080fd5b61021d6004803603602081101561021657600080fd5b50356104ac565b005b6102456004803603602081101561023557600080fd5b50356001600160a01b0316610553565b60408051918252519081900360200190f35b61021d6004803603602081101561026d57600080fd5b5035610572565b6102456004803603602081101561028a57600080fd5b50356001600160a01b031661064f565b61021d6107f6565b61021d610832565b61021d6108a6565b61021d600480360360208110156102c857600080fd5b5035610908565b61021d600480360360408110156102e557600080fd5b506001600160a01b038135169060200135610982565b610303610ada565b604080519115158252519081900360200190f35b61021d610aeb565b61021d610b8d565b61032f610bc6565b604080516001600160a01b039092168252519081900360200190f35b610245610bea565b610245610c06565b610245610c0c565b61021d610c12565b610245610c72565b61021d6004803603606081101561038957600080fd5b506001600160a01b03813581169160208101359091169060400135610c85565b61032f610e34565b610245610e43565b61021d600480360360208110156103cf57600080fd5b5035610e49565b61032f610fc6565b610245610fea565b61021d600480360360408110156103fc57600080fd5b506001600160a01b038135169060200135611010565b6103036111db565b6102456004803603602081101561043057600080fd5b50356001600160a01b0316611200565b61024561123a565b6102456004803603602081101561045e57600080fd5b50356001600160a01b0316611240565b61024561125b565b61021d611261565b61021d6004803603602081101561049457600080fd5b50356001600160a01b0316611275565b61021d61136d565b6104b461137d565b6000546001600160a01b03908116911614610504576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600481905561051161137d565b6001600160a01b03167e4b735c73896be679585edaa8f0c947a38d34100bb0088d0b41c28953a2df50826040518082815260200191505060405180910390a250565b6001600160a01b0381166000908152600860205260409020545b919050565b806105ae5760405162461bcd60e51b81526004018080602001828103825260218152602001806121856021913960400191505060405180910390fd5b60006105b861137d565b6001600160a01b0381166000908152600860205260409020549091508211156106125760405162461bcd60e51b8152600401808060200182810382526035815260200180611ff16035913960400191505060405180910390fd5b61061b81611381565b6001600160a01b03811660009081526008602052604090205480831115610640578092505b61064a828461156b565b505050565b6001600160a01b0381166000908152600560209081526040808320546008909252822054806106805750905061056d565b600060018054806020026020016040519081016040528092919081815260200182805480156106ce57602002820191906000526020600020905b8154815260200190600101908083116106ba575b50508351939450600092508491505060001983018381106106eb57fe5b60200260200101519050600060026000896001600160a01b03166001600160a01b03168152602001908152602001600020549050600084828151811061072d57fe5b6020026020010151830390508060001415610751578697505050505050505061056d565b6000600183015b858110156107e75786600182038151811061076f57fe5b602002602001015187828151811061078357fe5b60200260200101510392506ec097ce7bc90715b34b9f100000000083106107b2578789019850600097506107e7565b6ec097ce7bc90715b34b9f10000000006107cc898561161b565b816107d357fe5b049889019897889003979150600101610758565b50969998505050505050505050565b600061080061137d565b905061080b81611381565b6001600160a01b03811660009081526008602052604090205461082f90829061156b565b50565b600061085b6003546040518060600160405280603581526020016120fc6035913942919061167d565b905060045481101561089e5760405162461bcd60e51b81526004018080602001828103825260288152602001806120936028913960400191505060405180910390fd5b61082f611719565b6108ae61137d565b6000546001600160a01b039081169116146108fe576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b6109066118b9565b565b600061091261137d565b905061091d81611381565b6001600160a01b0381166000908152600560205260409020548211156109745760405162461bcd60e51b81526004018080602001828103825260348152602001806121316034913960400191505060405180910390fd5b61097e8183611961565b5050565b61098a61137d565b6000546001600160a01b039081169116146109da576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b60008052600560205260008051602061216583398151915254811115610a315760405162461bcd60e51b8152600401808060200182810382526037815260200180611fba6037913960400191505060405180910390fd5b60008052600560205260008051602061216583398151915280548290039055610a847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683836119f9565b816001600160a01b0316610a9661137d565b6001600160a01b03167fe4cedce8a9da6a4cd7794b1b6bbba077e9cb7bba00eeb3b7152926cd378f023c836040518082815260200191505060405180910390a35050565b600054600160a01b900460ff165b90565b610af361137d565b6000546001600160a01b03908116911614610b43576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610b9761137d565b9050610ba281611381565b6001600160a01b03811660009081526005602052604090205461082f908290611961565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000805260056020526000805160206121658339815191525490565b60095490565b60045490565b610c1a61137d565b6000546001600160a01b03908116911614610c6a576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b610906611a4b565b6000600754610c7f611ad9565b01905090565b610c8d61137d565b6000546001600160a01b03908116911614610cdd576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610d4e5760405162461bcd60e51b8152600401808060200182810382526022815260200180611f986022913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610dbf5760405162461bcd60e51b81526004018080602001828103825260218152602001806120726021913960400191505060405180910390fd5b610dd36001600160a01b03841683836119f9565b816001600160a01b0316836001600160a01b0316610def61137d565b6001600160a01b03167feaf4cea276efdcae93a52ca2f4bfdd952992169289bf655b1870a4b20bdae7d6846040518082815260200191505060405180910390a4505050565b6000546001600160a01b031690565b60075490565b600054600160a01b900460ff1615610e9b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80610eed576040805162461bcd60e51b815260206004820152601f60248201527f4554486d78526577617264733a2063616e6e6f74207374616b65207a65726f00604482015290519081900360640190fd5b6000610ef761137d565b9050610f0281611381565b6001600160a01b038116600090815260086020526040902054610f259083611b79565b6001600160a01b038216600090815260086020526040902055600954610f4b9083611b79565b600955610f836001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016823085611bd3565b6040805183815290516001600160a01b038316917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001805460009190600019810190811061100057fe5b9060005260206000200154905090565b61101861137d565b6000546001600160a01b03908116911614611068576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600061110f6009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d602081101561110757600080fd5b505190611c33565b9050808211156111505760405162461bcd60e51b81526004018080602001828103825260338152602001806121a66033913960400191505060405180910390fd5b6111846001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684846119f9565b826001600160a01b031661119661137d565b6001600160a01b03167f53061b1554d64699da405094f2b9eb0b116d63ed32e1371be0e49988b1ae4ef8846040518082815260200191505060405180910390a3505050565b60004260035411156111ef57506000610ae8565b506003546004544291909103101590565b6001600160a01b03811660009081526002602052604081205460018054909190811061122857fe5b90600052602060002001549050919050565b60035490565b6001600160a01b031660009081526005602052604090205490565b60065490565b600061126b61137d565b9050610ba26107f6565b61127d61137d565b6000546001600160a01b039081169116146112cd576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b6001600160a01b0381166113125760405162461bcd60e51b81526004018080602001828103825260268152602001806120266026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61090661137861137d565b611381565b3390565b600060018054806020026020016040519081016040528092919081815260200182805480156113cf57602002820191906000526020600020905b8154815260200190600101908083116113bb575b50508351939450600092508491505060001983018381106113ec57fe5b60200260200101519050600060026000866001600160a01b03166001600160a01b03168152602001908152602001600020549050600084828151811061142e57fe5b6020908102919091018101516001600160a01b038816600090815260088352604080822054600290945290206000198701905584039150801580611470575081155b156114805750505050505061082f565b600080600185015b878110156115165788600182038151811061149f57fe5b60200260200101518982815181106114b357fe5b60200260200101510394506ec097ce7bc90715b34b9f100000000085106114e1576000939190910190611516565b6ec097ce7bc90715b34b9f10000000006114fb858761161b565b8161150257fe5b049384900393925090820190600101611488565b506001600160a01b038916600090815260086020908152604080832086905560059091529020546115479082611b79565b6001600160a01b038a16600090815260056020526040902055505050505050505050565b806115755761097e565b6001600160a01b0382166000908152600860205260409020805482900390556009546115a19082611c33565b6009556115d86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836119f9565b6040805182815290516001600160a01b038416917f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75919081900360200190a25050565b60008261162a57506000611677565b8282028284828161163757fe5b04146116745760405162461bcd60e51b81526004018080602001828103825260218152602001806120bb6021913960400191505060405180910390fd5b90505b92915050565b6000818484111561170c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116d15781810151838201526020016116b9565b50505050905090810190601f1680156116fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b6000611723610c72565b600654909150810380611737575050610906565b600954808210156117bb57600061174c610fea565b905081611768846ec097ce7bc90715b34b9f100000000061161b565b8161176f57fe5b600180548082018255600091909152919004919091017fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018190556117b583611c75565b50611863565b60008052600560205260008051602061216583398151915254818303906117e29082611b79565b60008052600560205260008051602061216583398151915255811561186157600061180b610fea565b6001805480820182556000919091526ec097ce7bc90715b34b9f10000000009091017fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101819055905061185f83611c75565b505b505b60068390554260035561187461137d565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a2505050565b600054600160a01b900460ff1661190e576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61194461137d565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b0380831660009081526005602052604090208054839003905560078054830190556119b6907f00000000000000000000000000000000000000000000000000000000000000001683836119f9565b6040805182815290516001600160a01b038416917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261064a908490611d08565b600054600160a01b900460ff1615611a9d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861194461137d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611b4857600080fd5b505afa158015611b5c573d6000803e3d6000fd5b505050506040513d6020811015611b7257600080fd5b5051905090565b600082820183811015611674576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c2d908590611d08565b50505050565b600061167483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061167d565b600954611c829082611c33565b60095560408051630852cd8d60e31b81526004810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916342966c6891602480830192600092919082900301818387803b158015611ced57600080fd5b505af1158015611d01573d6000803e3d6000fd5b5050505050565b6000611d5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611db99092919063ffffffff16565b80519091501561064a57808060200190516020811015611d7c57600080fd5b505161064a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806121d9602a913960400191505060405180910390fd5b6060611dc88484600085611dd0565b949350505050565b606082471015611e115760405162461bcd60e51b815260040180806020018281038252602681526020018061204c6026913960400191505060405180910390fd5b611e1a85611f2b565b611e6b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611ea95780518252601f199092019160209182019101611e8a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f0b576040519150601f19603f3d011682016040523d82523d6000602084013e611f10565b606091505b5091509150611f20828286611f31565b979650505050505050565b3b151590565b60608315611f40575081611712565b825115611f505782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156116d15781810151838201526020016116b956fe4554486d78526577617264733a2063616e6e6f74207265636f766572204554486d784554486d78526577617264733a207265636f7665727920616d6f756e742067726561746572207468616e20756e72656465656d61626c654554486d78526577617264733a2063616e6e6f7420756e7374616b65206d6f7265207468616e207374616b65642062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4554486d78526577617264733a2063616e6e6f74207265636f76657220574554484554486d78526577617264733a20746f6f20736f6f6e20746f20757064617465206163637275616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724554486d78526577617264733a20626c6f636b206973206f6c646572207468616e206c617374206163637275616c207570646174654554486d78526577617264733a2063616e6e6f742072656465656d206d6f72652072657761726473207468616e206561726e656405b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc4554486d78526577617264733a2063616e6e6f7420756e7374616b65207a65726f4554486d78526577617264733a207265636f7665727920616d6f756e742067726561746572207468616e20756e7374616b65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a2731eab1c16b343fa9929ffde1738e68107109b068712368bab1719f48faeb264736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638456cb591161011a578063be4c86f2116100ad578063e1b52ffa1161007c578063e1b52ffa14610448578063e7a203691461046e578063e9fad8ee14610476578063f2fde38b1461047e578063f36c0a72146104a4576101fb565b8063be4c86f2146103e6578063bfb0efab14610412578063c42ac2261461041a578063d8aa0aa514610440576101fb565b806395a1297a116100e957806395a1297a146103b1578063a694fc3a146103b9578063ad3133bb146103d6578063bd2e9c4e146103de576101fb565b80638456cb5914610363578063860c19f31461036b57806386a86d41146103735780638da5cb5b146103a9576101fb565b80635530429b116101925780637d5aa5f4116101615780637d5aa5f4146103275780637f86ce301461034b578063817b1cd214610353578063832d40f21461035b576101fb565b80635530429b146102cf5780635c975abb146102fb578063715018a61461031757806375f22f3a1461031f576101fb565b806335322f37116101ce57806335322f371461029a5780633ad66127146102a25780633f4ba83a146102aa57806351a71b17146102b2576101fb565b80631482436614610200578063167653911461021f5780632e17de781461025757806333dc41c714610274575b600080fd5b61021d6004803603602081101561021657600080fd5b50356104ac565b005b6102456004803603602081101561023557600080fd5b50356001600160a01b0316610553565b60408051918252519081900360200190f35b61021d6004803603602081101561026d57600080fd5b5035610572565b6102456004803603602081101561028a57600080fd5b50356001600160a01b031661064f565b61021d6107f6565b61021d610832565b61021d6108a6565b61021d600480360360208110156102c857600080fd5b5035610908565b61021d600480360360408110156102e557600080fd5b506001600160a01b038135169060200135610982565b610303610ada565b604080519115158252519081900360200190f35b61021d610aeb565b61021d610b8d565b61032f610bc6565b604080516001600160a01b039092168252519081900360200190f35b610245610bea565b610245610c06565b610245610c0c565b61021d610c12565b610245610c72565b61021d6004803603606081101561038957600080fd5b506001600160a01b03813581169160208101359091169060400135610c85565b61032f610e34565b610245610e43565b61021d600480360360208110156103cf57600080fd5b5035610e49565b61032f610fc6565b610245610fea565b61021d600480360360408110156103fc57600080fd5b506001600160a01b038135169060200135611010565b6103036111db565b6102456004803603602081101561043057600080fd5b50356001600160a01b0316611200565b61024561123a565b6102456004803603602081101561045e57600080fd5b50356001600160a01b0316611240565b61024561125b565b61021d611261565b61021d6004803603602081101561049457600080fd5b50356001600160a01b0316611275565b61021d61136d565b6104b461137d565b6000546001600160a01b03908116911614610504576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600481905561051161137d565b6001600160a01b03167e4b735c73896be679585edaa8f0c947a38d34100bb0088d0b41c28953a2df50826040518082815260200191505060405180910390a250565b6001600160a01b0381166000908152600860205260409020545b919050565b806105ae5760405162461bcd60e51b81526004018080602001828103825260218152602001806121856021913960400191505060405180910390fd5b60006105b861137d565b6001600160a01b0381166000908152600860205260409020549091508211156106125760405162461bcd60e51b8152600401808060200182810382526035815260200180611ff16035913960400191505060405180910390fd5b61061b81611381565b6001600160a01b03811660009081526008602052604090205480831115610640578092505b61064a828461156b565b505050565b6001600160a01b0381166000908152600560209081526040808320546008909252822054806106805750905061056d565b600060018054806020026020016040519081016040528092919081815260200182805480156106ce57602002820191906000526020600020905b8154815260200190600101908083116106ba575b50508351939450600092508491505060001983018381106106eb57fe5b60200260200101519050600060026000896001600160a01b03166001600160a01b03168152602001908152602001600020549050600084828151811061072d57fe5b6020026020010151830390508060001415610751578697505050505050505061056d565b6000600183015b858110156107e75786600182038151811061076f57fe5b602002602001015187828151811061078357fe5b60200260200101510392506ec097ce7bc90715b34b9f100000000083106107b2578789019850600097506107e7565b6ec097ce7bc90715b34b9f10000000006107cc898561161b565b816107d357fe5b049889019897889003979150600101610758565b50969998505050505050505050565b600061080061137d565b905061080b81611381565b6001600160a01b03811660009081526008602052604090205461082f90829061156b565b50565b600061085b6003546040518060600160405280603581526020016120fc6035913942919061167d565b905060045481101561089e5760405162461bcd60e51b81526004018080602001828103825260288152602001806120936028913960400191505060405180910390fd5b61082f611719565b6108ae61137d565b6000546001600160a01b039081169116146108fe576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b6109066118b9565b565b600061091261137d565b905061091d81611381565b6001600160a01b0381166000908152600560205260409020548211156109745760405162461bcd60e51b81526004018080602001828103825260348152602001806121316034913960400191505060405180910390fd5b61097e8183611961565b5050565b61098a61137d565b6000546001600160a01b039081169116146109da576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b60008052600560205260008051602061216583398151915254811115610a315760405162461bcd60e51b8152600401808060200182810382526037815260200180611fba6037913960400191505060405180910390fd5b60008052600560205260008051602061216583398151915280548290039055610a847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683836119f9565b816001600160a01b0316610a9661137d565b6001600160a01b03167fe4cedce8a9da6a4cd7794b1b6bbba077e9cb7bba00eeb3b7152926cd378f023c836040518082815260200191505060405180910390a35050565b600054600160a01b900460ff165b90565b610af361137d565b6000546001600160a01b03908116911614610b43576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610b9761137d565b9050610ba281611381565b6001600160a01b03811660009081526005602052604090205461082f908290611961565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000805260056020526000805160206121658339815191525490565b60095490565b60045490565b610c1a61137d565b6000546001600160a01b03908116911614610c6a576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b610906611a4b565b6000600754610c7f611ad9565b01905090565b610c8d61137d565b6000546001600160a01b03908116911614610cdd576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610d4e5760405162461bcd60e51b8152600401808060200182810382526022815260200180611f986022913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610dbf5760405162461bcd60e51b81526004018080602001828103825260218152602001806120726021913960400191505060405180910390fd5b610dd36001600160a01b03841683836119f9565b816001600160a01b0316836001600160a01b0316610def61137d565b6001600160a01b03167feaf4cea276efdcae93a52ca2f4bfdd952992169289bf655b1870a4b20bdae7d6846040518082815260200191505060405180910390a4505050565b6000546001600160a01b031690565b60075490565b600054600160a01b900460ff1615610e9b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80610eed576040805162461bcd60e51b815260206004820152601f60248201527f4554486d78526577617264733a2063616e6e6f74207374616b65207a65726f00604482015290519081900360640190fd5b6000610ef761137d565b9050610f0281611381565b6001600160a01b038116600090815260086020526040902054610f259083611b79565b6001600160a01b038216600090815260086020526040902055600954610f4b9083611b79565b600955610f836001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016823085611bd3565b6040805183815290516001600160a01b038316917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001805460009190600019810190811061100057fe5b9060005260206000200154905090565b61101861137d565b6000546001600160a01b03908116911614611068576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b600061110f6009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d602081101561110757600080fd5b505190611c33565b9050808211156111505760405162461bcd60e51b81526004018080602001828103825260338152602001806121a66033913960400191505060405180910390fd5b6111846001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684846119f9565b826001600160a01b031661119661137d565b6001600160a01b03167f53061b1554d64699da405094f2b9eb0b116d63ed32e1371be0e49988b1ae4ef8846040518082815260200191505060405180910390a3505050565b60004260035411156111ef57506000610ae8565b506003546004544291909103101590565b6001600160a01b03811660009081526002602052604081205460018054909190811061122857fe5b90600052602060002001549050919050565b60035490565b6001600160a01b031660009081526005602052604090205490565b60065490565b600061126b61137d565b9050610ba26107f6565b61127d61137d565b6000546001600160a01b039081169116146112cd576040805162461bcd60e51b815260206004820181905260248201526000805160206120dc833981519152604482015290519081900360640190fd5b6001600160a01b0381166113125760405162461bcd60e51b81526004018080602001828103825260268152602001806120266026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61090661137861137d565b611381565b3390565b600060018054806020026020016040519081016040528092919081815260200182805480156113cf57602002820191906000526020600020905b8154815260200190600101908083116113bb575b50508351939450600092508491505060001983018381106113ec57fe5b60200260200101519050600060026000866001600160a01b03166001600160a01b03168152602001908152602001600020549050600084828151811061142e57fe5b6020908102919091018101516001600160a01b038816600090815260088352604080822054600290945290206000198701905584039150801580611470575081155b156114805750505050505061082f565b600080600185015b878110156115165788600182038151811061149f57fe5b60200260200101518982815181106114b357fe5b60200260200101510394506ec097ce7bc90715b34b9f100000000085106114e1576000939190910190611516565b6ec097ce7bc90715b34b9f10000000006114fb858761161b565b8161150257fe5b049384900393925090820190600101611488565b506001600160a01b038916600090815260086020908152604080832086905560059091529020546115479082611b79565b6001600160a01b038a16600090815260056020526040902055505050505050505050565b806115755761097e565b6001600160a01b0382166000908152600860205260409020805482900390556009546115a19082611c33565b6009556115d86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836119f9565b6040805182815290516001600160a01b038416917f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75919081900360200190a25050565b60008261162a57506000611677565b8282028284828161163757fe5b04146116745760405162461bcd60e51b81526004018080602001828103825260218152602001806120bb6021913960400191505060405180910390fd5b90505b92915050565b6000818484111561170c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116d15781810151838201526020016116b9565b50505050905090810190601f1680156116fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b6000611723610c72565b600654909150810380611737575050610906565b600954808210156117bb57600061174c610fea565b905081611768846ec097ce7bc90715b34b9f100000000061161b565b8161176f57fe5b600180548082018255600091909152919004919091017fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018190556117b583611c75565b50611863565b60008052600560205260008051602061216583398151915254818303906117e29082611b79565b60008052600560205260008051602061216583398151915255811561186157600061180b610fea565b6001805480820182556000919091526ec097ce7bc90715b34b9f10000000009091017fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101819055905061185f83611c75565b505b505b60068390554260035561187461137d565b6001600160a01b03167fcc40b32ccae09bbf703954e57f794bd4be4f1aa1098eba7871af6c47ad89ae77846040518082815260200191505060405180910390a2505050565b600054600160a01b900460ff1661190e576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61194461137d565b604080516001600160a01b039092168252519081900360200190a1565b6001600160a01b0380831660009081526005602052604090208054839003905560078054830190556119b6907f00000000000000000000000000000000000000000000000000000000000000001683836119f9565b6040805182815290516001600160a01b038416917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261064a908490611d08565b600054600160a01b900460ff1615611a9d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861194461137d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611b4857600080fd5b505afa158015611b5c573d6000803e3d6000fd5b505050506040513d6020811015611b7257600080fd5b5051905090565b600082820183811015611674576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c2d908590611d08565b50505050565b600061167483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061167d565b600954611c829082611c33565b60095560408051630852cd8d60e31b81526004810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916342966c6891602480830192600092919082900301818387803b158015611ced57600080fd5b505af1158015611d01573d6000803e3d6000fd5b5050505050565b6000611d5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611db99092919063ffffffff16565b80519091501561064a57808060200190516020811015611d7c57600080fd5b505161064a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806121d9602a913960400191505060405180910390fd5b6060611dc88484600085611dd0565b949350505050565b606082471015611e115760405162461bcd60e51b815260040180806020018281038252602681526020018061204c6026913960400191505060405180910390fd5b611e1a85611f2b565b611e6b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611ea95780518252601f199092019160209182019101611e8a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f0b576040519150601f19603f3d011682016040523d82523d6000602084013e611f10565b606091505b5091509150611f20828286611f31565b979650505050505050565b3b151590565b60608315611f40575081611712565b825115611f505782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156116d15781810151838201526020016116b956fe4554486d78526577617264733a2063616e6e6f74207265636f766572204554486d784554486d78526577617264733a207265636f7665727920616d6f756e742067726561746572207468616e20756e72656465656d61626c654554486d78526577617264733a2063616e6e6f7420756e7374616b65206d6f7265207468616e207374616b65642062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4554486d78526577617264733a2063616e6e6f74207265636f76657220574554484554486d78526577617264733a20746f6f20736f6f6e20746f20757064617465206163637275616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724554486d78526577617264733a20626c6f636b206973206f6c646572207468616e206c617374206163637275616c207570646174654554486d78526577617264733a2063616e6e6f742072656465656d206d6f72652072657761726473207468616e206561726e656405b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc4554486d78526577617264733a2063616e6e6f7420756e7374616b65207a65726f4554486d78526577617264733a207265636f7665727920616d6f756e742067726561746572207468616e20756e7374616b65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a2731eab1c16b343fa9929ffde1738e68107109b068712368bab1719f48faeb264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2953,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6451,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_arptSnapshots",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6455,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_arptLastIdx",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6457,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_lastAccrualUpdate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6459,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_accrualUpdateInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6463,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_rewardsFor",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6465,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_lastTotalRewardsAccrued",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6467,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_totalRewardsRedeemed",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6471,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_stakedFor",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6473,
        "contract": "contracts/rewards/ETHmxRewards.sol:ETHmxRewards",
        "label": "_totalStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}