{
  "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "feeRateNumerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "feeRateDenominator",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isExempt",
              "type": "bool"
            }
          ],
          "internalType": "struct IFeeLogic.ExemptData[]",
          "name": "exemptions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExemptAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExemptRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "FeeRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RecipientSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "exemptsAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exemptsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExempt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isExempt_",
          "type": "bool"
        }
      ],
      "name": "setExempt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isExempt",
              "type": "bool"
            }
          ],
          "internalType": "struct IFeeLogic.ExemptData[]",
          "name": "batch",
          "type": "tuple[]"
        }
      ],
      "name": "setExemptBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "undoFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "1125138",
    "logsBloom": "0x
    "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea",
    "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005757dd711eae80e181e07cdbce43359ac1048394"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0xc1416b5cdab50a9fbc872236e1aa54566c6deb40024e63a4b1737ecacf09d6f9",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000a2448b5af83b36838820d6b4a43e41fb81c03214"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0x7501624ae38fb0df57a18102db88078470b15839a2e2ead878d453b5e4efe264",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 15,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0x62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d87808",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000005d9a9984e62cbd06895c92e26ea70849953dc7cc"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0x62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d87808",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000003a1acd71d216104b4b03d14b596a22fdb2b1a9dc"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10049608,
        "transactionHash": "0xdbe35cf9d8801965c032cb37ddcad0d8f53de906cb4c22f174765e73e81aed91",
        "address": "0xeE7f948220f4F6da44f930965A402Bbf63a100b9",
        "topics": [
          "0x62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d87808",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000a2448b5af83b36838820d6b4a43e41fb81c03214"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xf6bef5d99615a449ed10107f8dde5377e01c9f079b8a94b98389577c093e44ea"
      }
    ],
    "blockNumber": 10049608,
    "cumulativeGasUsed": "3102022",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "0xa2448B5aF83B36838820d6B4a43e41fB81c03214",
    75,
    1000,
    [
      {
        "account": "0x5d9A9984E62cbd06895c92E26Ea70849953Dc7cC",
        "isExempt": true
      },
      {
        "account": "0x3a1aCD71D216104B4B03d14b596a22FDb2B1A9Dc",
        "isExempt": true
      },
      {
        "account": "0xa2448B5aF83B36838820d6B4a43e41fB81c03214",
        "isExempt": true
      }
    ]
  ],
  "solcInputHash": "dce8ce70f69a6af015380cad047f4734",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"feeRateNumerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feeRateDenominator\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"internalType\":\"struct IFeeLogic.ExemptData[]\",\"name\":\"exemptions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExemptAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExemptRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"FeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RecipientSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"exemptsAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt_\",\"type\":\"bool\"}],\"name\":\"setExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"internalType\":\"struct IFeeLogic.ExemptData[]\",\"name\":\"batch\",\"type\":\"tuple[]\"}],\"name\":\"setExemptBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"undoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/FeeLogic.sol\":\"FeeLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x51702766b02fdf6df902dde72b72738b8c7c40b4bf83221729145c99337d7765\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0-solc-0.7/contracts/access/Ownable.sol\\n *\\n * Changes:\\n * - Added owner argument to constructor\\n * - Reformatted styling in line with this repository.\\n */\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor(address owner_) {\\n\\t\\t_owner = owner_;\\n\\t\\temit OwnershipTransferred(address(0), owner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x34fc3a2e080f3e68b0be1c595d8649362bdb4d35becc83f1fa92e3d4ff30570a\",\"license\":\"MIT\"},\"contracts/rewards/FeeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IFeeLogic.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\n\\ncontract FeeLogic is Ownable, IFeeLogic {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeMath for uint128;\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Mutable Private State */\\n\\n\\tEnumerableSet.AddressSet private _exempts;\\n\\tuint128 private _feeRateNum;\\n\\tuint128 private _feeRateDen;\\n\\taddress private _recipient;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(\\n\\t\\taddress owner_,\\n\\t\\taddress recipient_,\\n\\t\\tuint128 feeRateNumerator,\\n\\t\\tuint128 feeRateDenominator,\\n\\t\\tExemptData[] memory exemptions\\n\\t) Ownable(owner_) {\\n\\t\\taddress sender = _msgSender();\\n\\n\\t\\t_recipient = recipient_;\\n\\t\\temit RecipientSet(sender, recipient_);\\n\\n\\t\\t_feeRateNum = feeRateNumerator;\\n\\t\\t_feeRateDen = feeRateDenominator;\\n\\t\\temit FeeRateSet(sender, feeRateNumerator, feeRateDenominator);\\n\\n\\t\\tfor (uint256 i = 0; i < exemptions.length; i++) {\\n\\t\\t\\taddress account = exemptions[i].account;\\n\\t\\t\\tif (exemptions[i].isExempt && _exempts.add(account)) {\\n\\t\\t\\t\\temit ExemptAdded(sender, account);\\n\\t\\t\\t} else if (_exempts.remove(account)) {\\n\\t\\t\\t\\temit ExemptRemoved(sender, account);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/* External Views */\\n\\n\\tfunction exemptsAt(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn _exempts.at(index);\\n\\t}\\n\\n\\tfunction exemptsLength() external view virtual override returns (uint256) {\\n\\t\\treturn _exempts.length();\\n\\t}\\n\\n\\tfunction feeRate()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint128 numerator, uint128 denominator)\\n\\t{\\n\\t\\tnumerator = _feeRateNum;\\n\\t\\tdenominator = _feeRateDen;\\n\\t}\\n\\n\\tfunction getFee(\\n\\t\\taddress sender,\\n\\t\\taddress, /* recipient_ */\\n\\t\\tuint256 amount\\n\\t) external view virtual override returns (uint256) {\\n\\t\\tif (_exempts.contains(sender)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn amount.mul(_feeRateNum).div(_feeRateDen);\\n\\t}\\n\\n\\tfunction isExempt(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _exempts.contains(account);\\n\\t}\\n\\n\\tfunction recipient() external view virtual override returns (address) {\\n\\t\\treturn _recipient;\\n\\t}\\n\\n\\tfunction undoFee(\\n\\t\\taddress sender,\\n\\t\\taddress, /* recipient_ */\\n\\t\\tuint256 amount\\n\\t) external view virtual override returns (uint256) {\\n\\t\\tif (_exempts.contains(sender)) {\\n\\t\\t\\treturn amount;\\n\\t\\t}\\n\\t\\treturn amount.mul(_feeRateDen).div(_feeRateDen - _feeRateNum);\\n\\t}\\n\\n\\t/* External Mutators */\\n\\n\\tfunction notify(\\n\\t\\tuint256 /* amount */\\n\\t) external virtual override {\\n\\t\\treturn;\\n\\t}\\n\\n\\tfunction setExempt(address account, bool isExempt_)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tif (isExempt_ && _exempts.add(account)) {\\n\\t\\t\\temit ExemptAdded(_msgSender(), account);\\n\\t\\t} else if (_exempts.remove(account)) {\\n\\t\\t\\temit ExemptRemoved(_msgSender(), account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setExemptBatch(ExemptData[] memory batch)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < batch.length; i++) {\\n\\t\\t\\tsetExempt(batch[i].account, batch[i].isExempt);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setFeeRate(uint128 numerator, uint128 denominator)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t// Also guarantees that the denominator cannot be zero.\\n\\t\\trequire(denominator > numerator, \\\"FeeLogic: feeRate is gte to 1\\\");\\n\\t\\t_feeRateNum = numerator;\\n\\t\\t_feeRateDen = denominator;\\n\\t\\temit FeeRateSet(_msgSender(), numerator, denominator);\\n\\t}\\n\\n\\tfunction setRecipient(address account) external virtual override onlyOwner {\\n\\t\\trequire(account != address(0), \\\"FeeLogic: recipient is zero address\\\");\\n\\t\\t_recipient = account;\\n\\t\\temit RecipientSet(_msgSender(), account);\\n\\t}\\n}\\n\",\"keccak256\":\"0x618913d86d3dc8ade477b75043518babc66011cd337774b05870b9b1455456b0\",\"license\":\"Apache-2.0\"},\"contracts/rewards/interfaces/IFeeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IFeeLogic {\\n\\t/* Types */\\n\\n\\tstruct ExemptData {\\n\\t\\taddress account;\\n\\t\\tbool isExempt;\\n\\t}\\n\\n\\t/* Views */\\n\\n\\tfunction exemptsAt(uint256 index) external view returns (address);\\n\\n\\tfunction exemptsLength() external view returns (uint256);\\n\\n\\tfunction feeRate()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction getFee(\\n\\t\\taddress sender,\\n\\t\\taddress recipient_,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\tfunction isExempt(address account) external view returns (bool);\\n\\n\\tfunction recipient() external view returns (address);\\n\\n\\tfunction undoFee(\\n\\t\\taddress sender,\\n\\t\\taddress recipient_,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction notify(uint256 amount) external;\\n\\n\\tfunction setExempt(address account, bool isExempt_) external;\\n\\n\\tfunction setExemptBatch(ExemptData[] memory batch) external;\\n\\n\\tfunction setFeeRate(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setRecipient(address account) external;\\n\\n\\t/* Events */\\n\\n\\tevent ExemptAdded(address indexed author, address indexed account);\\n\\tevent ExemptRemoved(address indexed author, address indexed account);\\n\\tevent FeeRateSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent RecipientSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0x1330e9d9c8d17d3fea1fc0085d21020031f8520c7cff3ca4d73139a534d88e5c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200144d3803806200144d83398101604081905262000034916200041a565b600080546001600160a01b0319166001600160a01b03871690811782556040518792907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060006200008962000277565b600480546001600160a01b0319166001600160a01b0388811691821790925560405192935091908316907fc1416b5cdab50a9fbc872236e1aa54566c6deb40024e63a4b1737ecacf09d6f990600090a3600380546001600160801b03858116600160801b028188166001600160801b031990931692909217161790556040516001600160a01b038216907f7501624ae38fb0df57a18102db88078470b15839a2e2ead878d453b5e4efe264906200014490879087906200055c565b60405180910390a260005b82518110156200026a5760008382815181106200016857fe5b60200260200101516000015190508382815181106200018357fe5b6020026020010151602001518015620001b25750620001b28160016200027b60201b6200086a1790919060201c565b15620001fe57806001600160a01b0316836001600160a01b03167f62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d8780860405160405180910390a362000260565b620002198160016200029b60201b620008881790919060201c565b156200026057806001600160a01b0316836001600160a01b03167f81aa155d9f5d2077495ed2bc4fc21b6d37d33f9f4cf55d8d4586325d5df4515f60405160405180910390a35b506001016200014f565b505050505050506200059a565b3390565b600062000292836001600160a01b038416620002b2565b90505b92915050565b600062000292836001600160a01b03841662000301565b6000620002c08383620003cd565b620002f85750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000295565b50600062000295565b60008181526001830160205260408120548015620003c257835460001980830191908101906000908790839081106200033657fe5b90600052602060002001549050808760000184815481106200035457fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806200038557fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000295565b600091505062000295565b60009081526001919091016020526040902054151590565b80516001600160a01b0381168114620003fd57600080fd5b919050565b80516001600160801b0381168114620003fd57600080fd5b600080600080600060a0868803121562000432578081fd5b6200043d86620003e5565b945060206200044e818801620003e5565b94506200045e6040880162000402565b93506200046e6060880162000402565b60808801519093506001600160401b03808211156200048b578384fd5b818901915089601f8301126200049f578384fd5b815181811115620004ac57fe5b620004bb848583020162000576565b8181528481019084860160408402860187018e1015620004d9578788fd5b8795505b8386101562000548576040818f031215620004f6578788fd5b6040516040810181811087821117156200050c57fe5b6040526200051a82620003e5565b81528782015180151581146200052e57898afd5b8189015283526001959095019491860191604001620004dd565b508096505050505050509295509295909350565b6001600160801b0392831681529116602082015260400190565b6040518181016001600160401b03811182821017156200059257fe5b604052919050565b610ea380620005aa6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806398d078b411610097578063adf10fc611610066578063adf10fc6146101df578063bd26697a146101f2578063be3945e4146101fa578063f2fde38b1461020d576100f5565b806398d078b4146101865780639c5f81cc146101995780639fde54f5146101ac578063ad5dff73146101bf576100f5565b806366d003ac116100d357806366d003ac14610158578063715018a6146101605780638da5cb5b14610168578063978bbdb914610170576100f5565b8063063f384f146100fa578063226a1a1a146101235780633bbed4a014610143575b600080fd5b61010d610108366004610b75565b610220565b60405161011a9190610db7565b60405180910390f35b610136610131366004610cec565b610275565b60405161011a9190610d04565b610156610151366004610b5b565b61028a565b005b61013661036f565b61015661037e565b610136610420565b61017861042f565b60405161011a929190610d9d565b610156610194366004610cec565b61044a565b6101566101a7366004610cc3565b61044d565b6101566101ba366004610bb0565b610559565b6101d26101cd366004610b5b565b610671565b60405161011a9190610d18565b6101566101ed366004610be2565b61067e565b61010d610722565b61010d610208366004610b75565b610733565b61015661021b366004610b5b565b610772565b600061022d60018561089d565b1561023957508061026e565b60035461026b906001600160801b03808216600160801b909204811691820316906102659085906108b2565b9061090b565b90505b9392505050565b6000610282600183610972565b90505b919050565b61029261097e565b6000546001600160a01b039081169116146102e2576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b6001600160a01b0381166103115760405162461bcd60e51b815260040161030890610d23565b60405180910390fd5b600480546001600160a01b0319166001600160a01b03831690811790915561033761097e565b6001600160a01b03167fc1416b5cdab50a9fbc872236e1aa54566c6deb40024e63a4b1737ecacf09d6f960405160405180910390a350565b6004546001600160a01b031690565b61038661097e565b6000546001600160a01b039081169116146103d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6003546001600160801b0380821692600160801b9092041690565b50565b61045561097e565b6000546001600160a01b039081169116146104a5576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b816001600160801b0316816001600160801b0316116104d65760405162461bcd60e51b815260040161030890610d66565b600380546001600160801b03838116600160801b028186166fffffffffffffffffffffffffffffffff19909316929092171617905561051361097e565b6001600160a01b03167f7501624ae38fb0df57a18102db88078470b15839a2e2ead878d453b5e4efe264838360405161054d929190610d9d565b60405180910390a25050565b61056161097e565b6000546001600160a01b039081169116146105b1576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b8080156105c457506105c460018361086a565b1561061557816001600160a01b03166105db61097e565b6001600160a01b03167f62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d8780860405160405180910390a361066d565b610620600183610888565b1561066d57816001600160a01b031661063761097e565b6001600160a01b03167f81aa155d9f5d2077495ed2bc4fc21b6d37d33f9f4cf55d8d4586325d5df4515f60405160405180910390a35b5050565b600061028260018361089d565b61068661097e565b6000546001600160a01b039081169116146106d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b60005b815181101561066d5761071a8282815181106106f157fe5b60200260200101516000015183838151811061070957fe5b602002602001015160200151610559565b6001016106d9565b600061072e6001610982565b905090565b600061074060018561089d565b1561074d5750600061026e565b60035461026b906001600160801b03600160801b8204811691610265918691166108b2565b61077a61097e565b6000546001600160a01b039081169116146107ca576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b6001600160a01b03811661080f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e076026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061087f836001600160a01b03841661098d565b90505b92915050565b600061087f836001600160a01b0384166109d7565b600061087f836001600160a01b038416610a9d565b6000826108c157506000610882565b828202828482816108ce57fe5b041461087f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e2d6021913960400191505060405180910390fd5b6000808211610961576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161096a57fe5b049392505050565b600061087f8383610ab5565b3390565b600061028282610b19565b60006109998383610a9d565b6109cf57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610882565b506000610882565b60008181526001830160205260408120548015610a935783546000198083019190810190600090879083908110610a0a57fe5b9060005260206000200154905080876000018481548110610a2757fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610a5757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610882565b6000915050610882565b60009081526001919091016020526040902054151590565b81546000908210610af75760405162461bcd60e51b8152600401808060200182810382526022815260200180610de56022913960400191505060405180910390fd5b826000018281548110610b0657fe5b9060005260206000200154905092915050565b5490565b80356001600160a01b038116811461028557600080fd5b8035801515811461028557600080fd5b80356001600160801b038116811461028557600080fd5b600060208284031215610b6c578081fd5b61087f82610b1d565b600080600060608486031215610b89578182fd5b610b9284610b1d565b9250610ba060208501610b1d565b9150604084013590509250925092565b60008060408385031215610bc2578182fd5b610bcb83610b1d565b9150610bd960208401610b34565b90509250929050565b60006020808385031215610bf4578182fd5b823567ffffffffffffffff80821115610c0b578384fd5b818501915085601f830112610c1e578384fd5b813581811115610c2a57fe5b610c378485830201610dc0565b818152848101908486016040808502870188018b1015610c55578889fd5b8896505b84871015610cb45780828c031215610c6f578889fd5b80518181018181108882111715610c8257fe5b8252610c8d83610b1d565b8152610c9a898401610b34565b818a01528452600196909601959287019290810190610c59565b50909998505050505050505050565b60008060408385031215610cd5578182fd5b610cde83610b44565b9150610bd960208401610b44565b600060208284031215610cfd578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b60208082526023908201527f4665654c6f6769633a20726563697069656e74206973207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252601d908201527f4665654c6f6769633a20666565526174652069732067746520746f2031000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610ddc57fe5b60405291905056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220e94be58dc8b61662ede26456586f11ea7e3cfb473a752d1c24ea74620d7ea31d64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806398d078b411610097578063adf10fc611610066578063adf10fc6146101df578063bd26697a146101f2578063be3945e4146101fa578063f2fde38b1461020d576100f5565b806398d078b4146101865780639c5f81cc146101995780639fde54f5146101ac578063ad5dff73146101bf576100f5565b806366d003ac116100d357806366d003ac14610158578063715018a6146101605780638da5cb5b14610168578063978bbdb914610170576100f5565b8063063f384f146100fa578063226a1a1a146101235780633bbed4a014610143575b600080fd5b61010d610108366004610b75565b610220565b60405161011a9190610db7565b60405180910390f35b610136610131366004610cec565b610275565b60405161011a9190610d04565b610156610151366004610b5b565b61028a565b005b61013661036f565b61015661037e565b610136610420565b61017861042f565b60405161011a929190610d9d565b610156610194366004610cec565b61044a565b6101566101a7366004610cc3565b61044d565b6101566101ba366004610bb0565b610559565b6101d26101cd366004610b5b565b610671565b60405161011a9190610d18565b6101566101ed366004610be2565b61067e565b61010d610722565b61010d610208366004610b75565b610733565b61015661021b366004610b5b565b610772565b600061022d60018561089d565b1561023957508061026e565b60035461026b906001600160801b03808216600160801b909204811691820316906102659085906108b2565b9061090b565b90505b9392505050565b6000610282600183610972565b90505b919050565b61029261097e565b6000546001600160a01b039081169116146102e2576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b6001600160a01b0381166103115760405162461bcd60e51b815260040161030890610d23565b60405180910390fd5b600480546001600160a01b0319166001600160a01b03831690811790915561033761097e565b6001600160a01b03167fc1416b5cdab50a9fbc872236e1aa54566c6deb40024e63a4b1737ecacf09d6f960405160405180910390a350565b6004546001600160a01b031690565b61038661097e565b6000546001600160a01b039081169116146103d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6003546001600160801b0380821692600160801b9092041690565b50565b61045561097e565b6000546001600160a01b039081169116146104a5576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b816001600160801b0316816001600160801b0316116104d65760405162461bcd60e51b815260040161030890610d66565b600380546001600160801b03838116600160801b028186166fffffffffffffffffffffffffffffffff19909316929092171617905561051361097e565b6001600160a01b03167f7501624ae38fb0df57a18102db88078470b15839a2e2ead878d453b5e4efe264838360405161054d929190610d9d565b60405180910390a25050565b61056161097e565b6000546001600160a01b039081169116146105b1576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b8080156105c457506105c460018361086a565b1561061557816001600160a01b03166105db61097e565b6001600160a01b03167f62a70abcb247f7e8afe5918a6e2686c3d44444fe3b3610d15ec517da62d8780860405160405180910390a361066d565b610620600183610888565b1561066d57816001600160a01b031661063761097e565b6001600160a01b03167f81aa155d9f5d2077495ed2bc4fc21b6d37d33f9f4cf55d8d4586325d5df4515f60405160405180910390a35b5050565b600061028260018361089d565b61068661097e565b6000546001600160a01b039081169116146106d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b60005b815181101561066d5761071a8282815181106106f157fe5b60200260200101516000015183838151811061070957fe5b602002602001015160200151610559565b6001016106d9565b600061072e6001610982565b905090565b600061074060018561089d565b1561074d5750600061026e565b60035461026b906001600160801b03600160801b8204811691610265918691166108b2565b61077a61097e565b6000546001600160a01b039081169116146107ca576040805162461bcd60e51b81526020600482018190526024820152600080516020610e4e833981519152604482015290519081900360640190fd5b6001600160a01b03811661080f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e076026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061087f836001600160a01b03841661098d565b90505b92915050565b600061087f836001600160a01b0384166109d7565b600061087f836001600160a01b038416610a9d565b6000826108c157506000610882565b828202828482816108ce57fe5b041461087f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e2d6021913960400191505060405180910390fd5b6000808211610961576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161096a57fe5b049392505050565b600061087f8383610ab5565b3390565b600061028282610b19565b60006109998383610a9d565b6109cf57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610882565b506000610882565b60008181526001830160205260408120548015610a935783546000198083019190810190600090879083908110610a0a57fe5b9060005260206000200154905080876000018481548110610a2757fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610a5757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610882565b6000915050610882565b60009081526001919091016020526040902054151590565b81546000908210610af75760405162461bcd60e51b8152600401808060200182810382526022815260200180610de56022913960400191505060405180910390fd5b826000018281548110610b0657fe5b9060005260206000200154905092915050565b5490565b80356001600160a01b038116811461028557600080fd5b8035801515811461028557600080fd5b80356001600160801b038116811461028557600080fd5b600060208284031215610b6c578081fd5b61087f82610b1d565b600080600060608486031215610b89578182fd5b610b9284610b1d565b9250610ba060208501610b1d565b9150604084013590509250925092565b60008060408385031215610bc2578182fd5b610bcb83610b1d565b9150610bd960208401610b34565b90509250929050565b60006020808385031215610bf4578182fd5b823567ffffffffffffffff80821115610c0b578384fd5b818501915085601f830112610c1e578384fd5b813581811115610c2a57fe5b610c378485830201610dc0565b818152848101908486016040808502870188018b1015610c55578889fd5b8896505b84871015610cb45780828c031215610c6f578889fd5b80518181018181108882111715610c8257fe5b8252610c8d83610b1d565b8152610c9a898401610b34565b818a01528452600196909601959287019290810190610c59565b50909998505050505050505050565b60008060408385031215610cd5578182fd5b610cde83610b44565b9150610bd960208401610b44565b600060208284031215610cfd578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b60208082526023908201527f4665654c6f6769633a20726563697069656e74206973207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252601d908201527f4665654c6f6769633a20666565526174652069732067746520746f2031000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610ddc57fe5b60405291905056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220e94be58dc8b61662ede26456586f11ea7e3cfb473a752d1c24ea74620d7ea31d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3349,
        "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9443,
        "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
        "label": "_exempts",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2680_storage"
      },
      {
        "astId": 9445,
        "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
        "label": "_feeRateNum",
        "offset": 0,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 9447,
        "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
        "label": "_feeRateDen",
        "offset": 16,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 9449,
        "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
        "label": "_recipient",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2680_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2679,
            "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2415_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2415_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2410,
            "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2414,
            "contract": "contracts/rewards/FeeLogic.sol:FeeLogic",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}