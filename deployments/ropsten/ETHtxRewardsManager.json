{
  "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultRecipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethmxRewards_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethtx_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethtxAMM_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpRewards_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "DefaultRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthmxRewardsAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthtxAMMAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "EthtxAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "LPRewardsAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnsupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardsTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SharesActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "SharesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SharesDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "SharesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SharesSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activateShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "activateSharesFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "addShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertETHtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "deactivateSharesFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethmxRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtxAMM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyRecipients",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnsupportedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "removeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setDefaultRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthmxRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthtxAMMAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setEthtxAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLPRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setRewardsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "setShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "sharesFor",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "active",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "total",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "2595870",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000400000000000010000000000000000010000000008000000000040000000000000000000000000000000200004000000000058000000000000000000000000800000209000200000000000000800008000000000000000000000100000000004800000000004000c0002000080020000000000000001000000000000000000000000000000001020000800000000000000000000000002000008206000000000000000000000010000000000000001000080000000000001000008008000022000000000000000028000200000000000080000000000000000000000000000000",
    "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495",
    "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x7d7a6e0febb00fa099988e85a4dcf58c7297875e1bd06fe1e764c71619ee3a20",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000c778417e063141139fce010982780140aa0cd5ab"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x825991f9f9f950375f4d3f04c94283f5f7ea10aa441c6d43cb0e4c7bdce517bf",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000e5c8964185cfe35af66c3da5acae8c87427e3cf7"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x913d9a69e403f9beaf246057172211793b96d95f3469f37e35c9cbebada8d228",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000e5c8964185cfe35af66c3da5acae8c87427e3cf7"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0xf9f4b296b0c32540acafb6c8937812d833013c92ebdc4c2ac0d9910132a1a26d",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000dc456ac4e0c1d88f0f32b9b116bebbd678d4b81d"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x6b280d88a71e3350b4e6b92556f8413347439e6bca3e3d9b21e93182d033d087",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000b18b8832e462d3d344dcb36c158584e3f8e28733"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0xc5d389b63caae09f667aec538ad0d98aab524b8f6896cc6125f65898e92d1343",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000002aac6811f1ae77e026b734d6e56ad3ca3796885c"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9992111,
        "transactionHash": "0xbe11196696b02419de004c640962e81043251209d671a44e3cf4f06aa3f968bc",
        "address": "0x9f2951FDBf5221079Bc510b5dae89050c8bCb455",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000005757dd711eae80e181e07cdbce43359ac1048394"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x632d54a69122913f15f7f14a7a9864811297b89dfbbc807c331c99b89db41495"
      }
    ],
    "blockNumber": 9992111,
    "cumulativeGasUsed": "6355585",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "0xe5c8964185cFe35aF66C3da5Acae8c87427e3Cf7",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0xe5c8964185cFe35aF66C3da5Acae8c87427e3Cf7",
    "0xDc456AC4e0C1D88f0f32b9B116BEBBd678D4b81D",
    "0xb18b8832E462D3d344DCb36c158584E3f8e28733",
    "0x2AAC6811f1aE77e026b734D6E56aD3ca3796885c"
  ],
  "solcInputHash": "5215b7c7bb7eaf379b141b0cd04d3a3c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethmxRewards_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethtx_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethtxAMM_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpRewards_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DefaultRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthmxRewardsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthtxAMMAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EthtxAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LPRewardsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnsupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SharesActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"SharesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SharesDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"SharesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SharesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"activateSharesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"addShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertETHtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deactivateSharesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethmxRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtxAMM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"removeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDefaultRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthmxRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthtxAMMAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthtxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLPRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sharesFor\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"active\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/ETHtxRewardsManager.sol\":\"ETHtxRewardsManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07779badf9435bce9a95e4527e892d83a2baae798ba87203db0b22679b40ef35\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7412b7c3acc6d3b2b6bad1dadc114e96daa3f82947d127f6184c84156720f88c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"contracts/exchanges/interfaces/IETHtxAMM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IETHtxAMM {\\n\\t/* Views */\\n\\n\\tfunction cRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 numerator, uint256 denominator);\\n\\n\\tfunction cRatioBelowTarget() external view returns (bool);\\n\\n\\tfunction ethForEthtx(uint256 amountETHtxOut) external view returns (uint256);\\n\\n\\tfunction ethFromEthtxAtRedemption(uint256 amountETHtxIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethtx() external view returns (address);\\n\\n\\tfunction ethtxFromEth(uint256 amountETHIn) external view returns (uint256);\\n\\n\\tfunction ethtxForEthAtRedemption(uint256 amountETHOut)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethSupply() external view returns (uint256);\\n\\n\\tfunction ethtxAvailable() external view returns (uint256);\\n\\n\\tfunction ethtxOutstanding() external view returns (uint256);\\n\\n\\tfunction feeLogic() external view returns (address);\\n\\n\\tfunction gasOracle() external view returns (address);\\n\\n\\tfunction gasPerETHtx() external pure returns (uint256);\\n\\n\\tfunction gasPrice() external view returns (uint256);\\n\\n\\tfunction gasPriceAtRedemption() external view returns (uint256);\\n\\n\\tfunction maxGasPrice() external view returns (uint256);\\n\\n\\tfunction targetCRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction weth() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction buy(uint256 deadline) external payable;\\n\\n\\tfunction buyWithWETH(uint256 amountIn, uint256 deadline) external;\\n\\n\\tfunction buyExact(uint256 amountOut, uint256 deadline) external payable;\\n\\n\\tfunction buyExactWithWETH(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction buyWithExactETH(uint256 amountOutMin, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable;\\n\\n\\tfunction buyWithExactWETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction redeem(uint256 amountIn, uint256 deadline) external;\\n\\n\\tfunction redeemExact(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction redeemWithExact(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction setEthtx(address account) external;\\n\\n\\tfunction setGasOracle(address account) external;\\n\\n\\tfunction setTargetCRatio(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setWETH(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent ETHtxSet(address indexed author, address indexed account);\\n\\tevent GasOracleSet(address indexed author, address indexed account);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent TargetCRatioSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent WETHSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0xe3319fc2b8380a33fa62691b20e54ff95106daaaedad5c4d34dc56b70c5e064b\",\"license\":\"MIT\"},\"contracts/rewards/ETHtxRewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../exchanges/interfaces/IETHtxAMM.sol\\\";\\nimport \\\"./interfaces/IETHtxRewardsManager.sol\\\";\\nimport \\\"./interfaces/IETHmxRewards.sol\\\";\\nimport \\\"./interfaces/ILPRewards.sol\\\";\\nimport \\\"./RewardsManager.sol\\\";\\n\\ncontract ETHtxRewardsManager is RewardsManager, IETHtxRewardsManager {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Mutable Private State */\\n\\n\\taddress private _ethmxRewards;\\n\\taddress private _ethtx;\\n\\taddress private _ethtxAMM;\\n\\taddress private _lpRewards;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(\\n\\t\\taddress owner_,\\n\\t\\taddress defaultRecipient_,\\n\\t\\taddress rewardsToken_,\\n\\t\\taddress ethmxRewards_,\\n\\t\\taddress ethtx_,\\n\\t\\taddress ethtxAMM_,\\n\\t\\taddress lpRewards_\\n\\t) RewardsManager(defaultRecipient_, rewardsToken_) {\\n\\t\\tsetEthmxRewardsAddress(ethmxRewards_);\\n\\t\\tsetEthtxAddress(ethtx_);\\n\\t\\tsetEthtxAMMAddress(ethtxAMM_);\\n\\t\\tsetLPRewardsAddress(lpRewards_);\\n\\t\\tif (owner_ != owner()) {\\n\\t\\t\\ttransferOwnership(owner_);\\n\\t\\t}\\n\\t}\\n\\n\\t/* External Mutators */\\n\\n\\tfunction convertETHtx() public override {\\n\\t\\tIERC20 ethtxHandle = IERC20(ethtx());\\n\\t\\tuint256 amount = ethtxHandle.balanceOf(address(this));\\n\\t\\tif (amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\taddress ethtxAMM_ = ethtxAMM(); // Gas savings\\n\\t\\tethtxHandle.safeIncreaseAllowance(ethtxAMM_, amount);\\n\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\tuint256 deadline = block.timestamp + 3600;\\n\\t\\tIETHtxAMM(ethtxAMM_).redeem(amount, deadline);\\n\\t}\\n\\n\\tfunction distributeRewards() external override returns (uint256) {\\n\\t\\tconvertETHtx();\\n\\t\\tuint256 rewards = sendRewards();\\n\\t\\tif (rewards != 0) {\\n\\t\\t\\tnotifyRecipients();\\n\\t\\t}\\n\\t\\treturn rewards;\\n\\t}\\n\\n\\tfunction notifyRecipients() public override {\\n\\t\\t_notifyEthmxRewards();\\n\\t\\t_notifyLpRewards();\\n\\t}\\n\\n\\tfunction sendRewards() public override returns (uint256) {\\n\\t\\tuint256 rewards = _currentRewardsBalance();\\n\\t\\tif (rewards == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 totalShares_ = totalShares();\\n\\n\\t\\tfor (uint256 i = 0; i < _recipients.length(); i++) {\\n\\t\\t\\t_sendTo(_recipients.at(i), totalShares_, rewards);\\n\\t\\t}\\n\\n\\t\\t_totalRewardsRedeemed += rewards;\\n\\t\\treturn rewards;\\n\\t}\\n\\n\\tfunction setEthmxRewardsAddress(address addr) public override onlyOwner {\\n\\t\\t_ethmxRewards = addr;\\n\\t\\temit EthmxRewardsAddressSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setEthtxAddress(address addr) public override onlyOwner {\\n\\t\\t_ethtx = addr;\\n\\t\\temit EthtxAddressSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setEthtxAMMAddress(address addr) public override onlyOwner {\\n\\t\\t_ethtxAMM = addr;\\n\\t\\temit EthtxAMMAddressSet(_msgSender(), addr);\\n\\t}\\n\\n\\tfunction setLPRewardsAddress(address addr) public override onlyOwner {\\n\\t\\t_lpRewards = addr;\\n\\t\\temit LPRewardsAddressSet(_msgSender(), addr);\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction ethmxRewards() public view override returns (address) {\\n\\t\\treturn _ethmxRewards;\\n\\t}\\n\\n\\tfunction ethtx() public view override returns (address) {\\n\\t\\treturn _ethtx;\\n\\t}\\n\\n\\tfunction ethtxAMM() public view override returns (address) {\\n\\t\\treturn _ethtxAMM;\\n\\t}\\n\\n\\tfunction lpRewards() public view override returns (address) {\\n\\t\\treturn _lpRewards;\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _notifyEthmxRewards() internal {\\n\\t\\tIETHmxRewards ethmxRewardsHandle = IETHmxRewards(ethmxRewards());\\n\\t\\tif (ethmxRewardsHandle.readyForUpdate()) {\\n\\t\\t\\tethmxRewardsHandle.updateAccrual();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _notifyLpRewards() internal {\\n\\t\\tILPRewards(lpRewards()).updateAccrual();\\n\\t}\\n\\n\\tfunction _sendTo(\\n\\t\\taddress account,\\n\\t\\tuint256 totalShares_,\\n\\t\\tuint256 totalRewards\\n\\t) internal {\\n\\t\\tShares storage s = _shares[account];\\n\\t\\tuint256 amount = totalRewards.mul(s.active).div(totalShares_);\\n\\n\\t\\tIERC20(_rewardsToken).safeTransfer(account, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x27f6efa2d4d237f1d4d2484c088309963e49fe1510ee84b8a7f69543847392b3\",\"license\":\"MIT\"},\"contracts/rewards/RewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\n\\ncontract RewardsManager is Ownable, IRewardsManager {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeCast for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\tusing SafeMath for uint128;\\n\\n\\t/* Types */\\n\\n\\tstruct Shares {\\n\\t\\tuint128 active;\\n\\t\\tuint128 total;\\n\\t}\\n\\n\\t/* Mutable Internal State */\\n\\n\\taddress internal _rewardsToken;\\n\\taddress internal _defaultRecipient;\\n\\tuint256 internal _totalRewardsRedeemed;\\n\\tEnumerableSet.AddressSet internal _recipients;\\n\\tmapping(address => Shares) internal _shares;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(address defaultRecipient_, address rewardsToken_) Ownable() {\\n\\t\\tsetRewardsToken(rewardsToken_);\\n\\t\\tsetDefaultRecipient(defaultRecipient_);\\n\\t}\\n\\n\\t/* External Views */\\n\\n\\tfunction defaultRecipient() external view override returns (address) {\\n\\t\\treturn _defaultRecipient;\\n\\t}\\n\\n\\tfunction rewardsToken() public view override returns (address) {\\n\\t\\treturn _rewardsToken;\\n\\t}\\n\\n\\tfunction sharesFor(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint128 active, uint128 total)\\n\\t{\\n\\t\\tShares storage s = _shares[account];\\n\\t\\treturn (s.active, s.total);\\n\\t}\\n\\n\\tfunction totalRewardsAccrued() external view override returns (uint256) {\\n\\t\\t// Overflow is OK\\n\\t\\treturn _currentRewardsBalance() + _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalRewardsRedeemed() external view override returns (uint256) {\\n\\t\\treturn _totalRewardsRedeemed;\\n\\t}\\n\\n\\tfunction totalShares() public view override returns (uint256 total) {\\n\\t\\tfor (uint256 i = 0; i < _recipients.length(); i++) {\\n\\t\\t\\ttotal += _shares[_recipients.at(i)].total;\\n\\t\\t}\\n\\t}\\n\\n\\t/* External Mutators */\\n\\n\\tfunction activateShares() external override {\\n\\t\\t_activate(_msgSender());\\n\\t}\\n\\n\\tfunction activateSharesFor(address account) external override onlyOwner {\\n\\t\\t_activate(account);\\n\\t}\\n\\n\\tfunction addShares(address account, uint128 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\taccount != address(0),\\n\\t\\t\\t\\\"RewardsManager: cannot add shares to zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taccount != address(this),\\n\\t\\t\\t\\\"RewardsManager: cannot add shares to this contract address\\\"\\n\\t\\t);\\n\\t\\trequire(amount != 0, \\\"RewardsManager: cannot add zero shares\\\");\\n\\n\\t\\tShares storage s = _shares[account];\\n\\t\\tif (s.active == 0) {\\n\\t\\t\\t// Add to inactive value\\n\\t\\t\\tShares storage d = _shares[_defaultRecipient];\\n\\t\\t\\td.active = d.active.add(amount).toUint128();\\n\\t\\t} else {\\n\\t\\t\\ts.active = s.active.add(amount).toUint128();\\n\\t\\t}\\n\\t\\ts.total = s.total.add(amount).toUint128();\\n\\t\\t_recipients.add(account);\\n\\t\\temit SharesAdded(_msgSender(), account, amount);\\n\\t}\\n\\n\\tfunction deactivateShares() external override {\\n\\t\\t_deactivate(_msgSender());\\n\\t}\\n\\n\\tfunction deactivateSharesFor(address account) external override onlyOwner {\\n\\t\\t_deactivate(account);\\n\\t}\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external override onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\ttoken != _rewardsToken,\\n\\t\\t\\t\\\"RewardsManager: cannot recover rewards token\\\"\\n\\t\\t);\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnsupported(_msgSender(), token, to, amount);\\n\\t}\\n\\n\\tfunction removeShares(address account, uint128 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(amount != 0, \\\"RewardsManager: cannot remove zero shares\\\");\\n\\n\\t\\tShares storage s = _shares[account];\\n\\t\\tif (s.active == 0) {\\n\\t\\t\\t// Remove from inactive value\\n\\t\\t\\tShares storage d = _shares[_defaultRecipient];\\n\\t\\t\\td.active = d.active.sub(amount).toUint128();\\n\\t\\t} else {\\n\\t\\t\\ts.active = s.active.sub(amount).toUint128();\\n\\t\\t}\\n\\t\\ts.total = s.total.sub(amount).toUint128();\\n\\t\\tif (s.total == 0) {\\n\\t\\t\\t_recipients.remove(account);\\n\\t\\t}\\n\\t\\temit SharesRemoved(_msgSender(), account, amount);\\n\\t}\\n\\n\\tfunction setDefaultRecipient(address account) public override onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\taccount != address(0),\\n\\t\\t\\t\\\"RewardsManager: cannot set to zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taccount != address(this),\\n\\t\\t\\t\\\"RewardsManager: cannot set to this contract\\\"\\n\\t\\t);\\n\\n\\t\\t// Activate\\n\\t\\t_activate(account);\\n\\n\\t\\t// Move any inactive shares\\n\\t\\tShares storage original = _shares[_defaultRecipient];\\n\\t\\tif (original.active > original.total) {\\n\\t\\t\\tuint128 inactive = original.active - original.total;\\n\\t\\t\\toriginal.active -= inactive;\\n\\n\\t\\t\\tShares storage next = _shares[account];\\n\\t\\t\\tnext.active = next.active.add(inactive).toUint128();\\n\\t\\t}\\n\\n\\t\\tif (original.total == 0) {\\n\\t\\t\\t_recipients.remove(_defaultRecipient);\\n\\t\\t}\\n\\t\\t_defaultRecipient = account;\\n\\t\\t_recipients.add(account);\\n\\t\\temit DefaultRecipientSet(_msgSender(), account);\\n\\t}\\n\\n\\tfunction setRewardsToken(address token) public override onlyOwner {\\n\\t\\t_rewardsToken = token;\\n\\t\\temit RewardsTokenSet(_msgSender(), token);\\n\\t}\\n\\n\\tfunction setShares(\\n\\t\\taddress account,\\n\\t\\tuint128 value,\\n\\t\\tbool isActive\\n\\t) external override onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\taccount != address(0),\\n\\t\\t\\t\\\"RewardsManager: cannot set shares for zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taccount != address(this),\\n\\t\\t\\t\\\"RewardsManager: cannot set shares for this contract address\\\"\\n\\t\\t);\\n\\n\\t\\t// Gas savings\\n\\t\\taddress defaultRecipient_ = _defaultRecipient;\\n\\t\\tShares storage d = _shares[defaultRecipient_];\\n\\n\\t\\tif (account == defaultRecipient_) {\\n\\t\\t\\td.active = d.active.sub(d.total).add(value).toUint128();\\n\\t\\t\\td.total = value;\\n\\t\\t\\temit SharesSet(_msgSender(), account, value, isActive);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tShares storage s = _shares[account];\\n\\n\\t\\tif (s.total != 0 && s.active == 0) {\\n\\t\\t\\t// Subtract old inactive value\\n\\t\\t\\td.active = d.active.sub(s.total).toUint128();\\n\\t\\t}\\n\\n\\t\\tif (!isActive) {\\n\\t\\t\\ts.active = 0;\\n\\t\\t\\t// Add new inactive value\\n\\t\\t\\td.active = d.active.add(value).toUint128();\\n\\t\\t} else {\\n\\t\\t\\ts.active = value;\\n\\t\\t}\\n\\n\\t\\ts.total = value;\\n\\t\\tif (value != 0) {\\n\\t\\t\\t_recipients.add(account);\\n\\t\\t} else {\\n\\t\\t\\t_recipients.remove(account);\\n\\t\\t}\\n\\t\\temit SharesSet(_msgSender(), account, value, isActive);\\n\\t}\\n\\n\\t/* Internal Views */\\n\\n\\tfunction _currentRewardsBalance() internal view returns (uint256) {\\n\\t\\treturn IERC20(_rewardsToken).balanceOf(address(this));\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _activate(address account) internal {\\n\\t\\tShares storage s = _shares[account];\\n\\n\\t\\t// Do nothing if already active\\n\\t\\tif (s.total == 0 || s.active > 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tShares storage d = _shares[_defaultRecipient];\\n\\n\\t\\ts.active = s.total;\\n\\t\\td.active = d.active.sub(s.total).toUint128();\\n\\t\\temit SharesActivated(_msgSender(), account);\\n\\t}\\n\\n\\tfunction _deactivate(address account) internal {\\n\\t\\t// Skip for the default recipient\\n\\t\\tif (account == _defaultRecipient) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tShares storage s = _shares[account];\\n\\n\\t\\t// Do nothing if already deactivated\\n\\t\\tif (s.active == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tShares storage d = _shares[_defaultRecipient];\\n\\n\\t\\ts.active = 0;\\n\\t\\td.active = d.active.add(s.total).toUint128();\\n\\t\\temit SharesDeactivated(_msgSender(), account);\\n\\t}\\n}\\n\",\"keccak256\":\"0x44a59a3bd3a781145fe63bef94c9f979a02657d2c6158527b7d3a4bc76e67aaf\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IETHmxRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IETHmxRewards {\\n\\t/* Views */\\n\\n\\tfunction accrualUpdateInterval() external view returns (uint256);\\n\\n\\tfunction accruedRewardsPerToken() external view returns (uint256);\\n\\n\\tfunction accruedRewardsPerTokenLast(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethmx() external view returns (address);\\n\\n\\tfunction lastAccrualUpdate() external view returns (uint256);\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastTotalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction readyForUpdate() external view returns (bool);\\n\\n\\tfunction rewardsBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction stakedBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction totalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction totalRewardsRedeemed() external view returns (uint256);\\n\\n\\tfunction totalStaked() external view returns (uint256);\\n\\n\\tfunction unredeemableRewards() external view returns (uint256);\\n\\n\\tfunction weth() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction exit() external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnstaked(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction redeemAllRewards() external;\\n\\n\\tfunction redeemReward(uint256 amount) external;\\n\\n\\tfunction setAccrualUpdateInterval(uint256 interval) external;\\n\\n\\tfunction setEthmx(address account) external;\\n\\n\\tfunction setWeth(address account) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction unpause() external;\\n\\n\\tfunction unstake(uint256 amount) external;\\n\\n\\tfunction unstakeAll() external;\\n\\n\\tfunction updateAccrual() external;\\n\\n\\tfunction updateReward() external;\\n\\n\\t/* Events */\\n\\n\\tevent AccrualUpdated(address indexed author, uint256 accruedRewards);\\n\\tevent AccrualUpdateIntervalSet(address indexed author, uint256 interval);\\n\\tevent ETHmxSet(address indexed author, address indexed account);\\n\\tevent RecoveredUnredeemableRewards(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnstaked(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardPaid(address indexed to, uint256 amount);\\n\\tevent Staked(address indexed account, uint256 amount);\\n\\tevent Unstaked(address indexed account, uint256 amount);\\n\\tevent WETHSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0x2acd4d00c7da930cd4613c28d7546713b68ea66379f5236848db694d5210291b\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IETHtxRewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IETHtxRewardsManager {\\n\\t/* Views */\\n\\n\\tfunction ethmxRewards() external view returns (address);\\n\\n\\tfunction ethtx() external view returns (address);\\n\\n\\tfunction ethtxAMM() external view returns (address);\\n\\n\\tfunction lpRewards() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction convertETHtx() external;\\n\\n\\tfunction distributeRewards() external returns (uint256);\\n\\n\\tfunction notifyRecipients() external;\\n\\n\\tfunction sendRewards() external returns (uint256);\\n\\n\\tfunction setEthmxRewardsAddress(address addr) external;\\n\\n\\tfunction setEthtxAddress(address addr) external;\\n\\n\\tfunction setEthtxAMMAddress(address addr) external;\\n\\n\\tfunction setLPRewardsAddress(address addr) external;\\n\\n\\t/* Events */\\n\\n\\tevent EthmxRewardsAddressSet(address indexed author, address indexed addr);\\n\\tevent EthtxAddressSet(address indexed author, address indexed addr);\\n\\tevent EthtxAMMAddressSet(address indexed author, address indexed addr);\\n\\tevent LPRewardsAddressSet(address indexed author, address indexed addr);\\n\\tevent RewardsSent(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0x6a97cae275a2eaaf4605532e85518ac14be1fe6fbc6058f65adc89fee299b923\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/ILPRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface ILPRewards {\\n\\t/* Views */\\n\\n\\tfunction accruedRewardsPerTokenFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction accruedRewardsPerTokenLastFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastRewardsBalanceOf(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastRewardsBalanceOfFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction lastTotalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction lastTotalRewardsAccruedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction numStakingTokens() external view returns (uint256);\\n\\n\\tfunction rewardsBalanceOf(address account) external view returns (uint256);\\n\\n\\tfunction rewardsBalanceOfFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction rewardsForToken(address token) external view returns (uint256);\\n\\n\\tfunction rewardsToken() external view returns (address);\\n\\n\\tfunction sharesFor(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction sharesPerToken(address token) external view returns (uint256);\\n\\n\\tfunction stakedBalanceOf(address account, address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction stakingTokenAt(uint256 index) external view returns (address);\\n\\n\\tfunction supportsStakingToken(address token) external view returns (bool);\\n\\n\\tfunction totalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction totalRewardsAccruedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction totalRewardsRedeemed() external view returns (uint256);\\n\\n\\tfunction totalRewardsRedeemedFor(address token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction totalShares() external view returns (uint256);\\n\\n\\tfunction totalSharesFor(address account) external view returns (uint256);\\n\\n\\tfunction totalSharesForToken(address token) external view returns (uint256);\\n\\n\\tfunction totalStaked(address token) external view returns (uint256);\\n\\n\\tfunction unredeemableRewards() external view returns (uint256);\\n\\n\\tfunction valuePerTokenImpl(address token) external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction addToken(address token, address tokenValueImpl) external;\\n\\n\\tfunction changeTokenValueImpl(address token, address tokenValueImpl)\\n\\t\\texternal;\\n\\n\\tfunction exit() external;\\n\\n\\tfunction exitFrom(address token) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnredeemableRewards(address to, uint256 amount) external;\\n\\n\\tfunction recoverUnstaked(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction redeemAllRewards() external;\\n\\n\\tfunction redeemAllRewardsFrom(address token) external;\\n\\n\\tfunction redeemReward(uint256 amount) external;\\n\\n\\tfunction redeemRewardFrom(address token, uint256 amount) external;\\n\\n\\tfunction removeToken(address token) external;\\n\\n\\tfunction setRewardsToken(address token) external;\\n\\n\\tfunction stake(address token, uint256 amount) external;\\n\\n\\tfunction unpause() external;\\n\\n\\tfunction unstake(address token, uint256 amount) external;\\n\\n\\tfunction unstakeAll() external;\\n\\n\\tfunction unstakeAllFrom(address token) external;\\n\\n\\tfunction updateAccrual() external;\\n\\n\\tfunction updateReward() external;\\n\\n\\tfunction updateRewardFor(address token) external;\\n\\n\\t/* Events */\\n\\n\\tevent AccrualUpdated(address indexed author, uint256 accruedRewards);\\n\\tevent RecoveredUnredeemableRewards(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RecoveredUnstaked(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardPaid(\\n\\t\\taddress indexed account,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardsTokenSet(address indexed author, address indexed token);\\n\\tevent Staked(address indexed account, address indexed token, uint256 amount);\\n\\tevent TokenAdded(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed tokenValueImpl\\n\\t);\\n\\tevent TokenRemoved(address indexed author, address indexed token);\\n\\tevent TokenValueImplChanged(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed tokenValueImpl\\n\\t);\\n\\tevent Unstaked(\\n\\t\\taddress indexed account,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0xe77d80aaaa45c6ad7818b4ffda229dd54e48a7a98f354de0abc9d41702a731f8\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IRewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IRewardsManager {\\n\\t/* Views */\\n\\n\\tfunction defaultRecipient() external view returns (address);\\n\\n\\tfunction rewardsToken() external view returns (address);\\n\\n\\tfunction sharesFor(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 active, uint128 total);\\n\\n\\tfunction totalRewardsAccrued() external view returns (uint256);\\n\\n\\tfunction totalRewardsRedeemed() external view returns (uint256);\\n\\n\\tfunction totalShares() external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction activateShares() external;\\n\\n\\tfunction activateSharesFor(address account) external;\\n\\n\\tfunction addShares(address account, uint128 amount) external;\\n\\n\\tfunction deactivateShares() external;\\n\\n\\tfunction deactivateSharesFor(address account) external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction removeShares(address account, uint128 amount) external;\\n\\n\\tfunction setDefaultRecipient(address account) external;\\n\\n\\tfunction setRewardsToken(address token) external;\\n\\n\\tfunction setShares(\\n\\t\\taddress account,\\n\\t\\tuint128 value,\\n\\t\\tbool isActive\\n\\t) external;\\n\\n\\t/* Events */\\n\\n\\tevent DefaultRecipientSet(address indexed author, address indexed account);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent RewardsTokenSet(address indexed author, address indexed token);\\n\\tevent SharesActivated(address indexed author, address indexed account);\\n\\tevent SharesAdded(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed account,\\n\\t\\tuint128 amount\\n\\t);\\n\\tevent SharesDeactivated(address indexed author, address indexed account);\\n\\tevent SharesRemoved(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed account,\\n\\t\\tuint128 amount\\n\\t);\\n\\tevent SharesSet(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed account,\\n\\t\\tuint128 value,\\n\\t\\tbool isActive\\n\\t);\\n}\\n\",\"keccak256\":\"0xf9b233f282a35a028a8f017b1ec02266bd180e449d18fa2a518249553d7c7501\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035e0380380620035e0833981810160405260e08110156200003757600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949593949293919290919085856000620000726200012b565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350916000805160206200356b833981519152908290a350620000b6816200012f565b620000c182620001eb565b50620000cf90508462000477565b620000da8362000533565b620000e582620005ef565b620000f081620006ab565b620000fa62000767565b6001600160a01b0316876001600160a01b0316146200011e576200011e8762000776565b5050505050505062000c79565b3390565b620001396200012b565b6000546001600160a01b039081169116146200018b576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b038316908117909155620001b36200012b565b6001600160a01b03167f7d7a6e0febb00fa099988e85a4dcf58c7297875e1bd06fe1e764c71619ee3a2060405160405180910390a350565b620001f56200012b565b6000546001600160a01b0390811691161462000247576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b6001600160a01b0381166200028e5760405162461bcd60e51b815260040180806020018281038252602a815260200180620035b6602a913960400191505060405180910390fd5b6001600160a01b038116301415620002d85760405162461bcd60e51b815260040180806020018281038252602b8152602001806200358b602b913960400191505060405180910390fd5b620002e38162000863565b6002546001600160a01b0316600090815260066020526040902080546001600160801b03600160801b8204811691161115620003b65780546001600160801b03600160801b820481168183169081039081900382166001600160801b03199093169290921783556001600160a01b038416600090815260066020908152604090912080549092620003999262000388928216918616906200197462000985821b17901c565b620009e960201b620019d71760201c565b81546001600160801b0319166001600160801b0391909116179055505b8054600160801b90046001600160801b0316620003f557600254620003f3906004906001600160a01b031662000a33602090811b62001a1b17901c565b505b600280546001600160a01b0319166001600160a01b0384161790556200042960048362000a4a602090811b62001a3017901c565b506001600160a01b0382166200043e6200012b565b6001600160a01b03167f825991f9f9f950375f4d3f04c94283f5f7ea10aa441c6d43cb0e4c7bdce517bf60405160405180910390a35050565b620004816200012b565b6000546001600160a01b03908116911614620004d3576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b038316908117909155620004fb6200012b565b6001600160a01b03167f913d9a69e403f9beaf246057172211793b96d95f3469f37e35c9cbebada8d22860405160405180910390a350565b6200053d6200012b565b6000546001600160a01b039081169116146200058f576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b038316908117909155620005b76200012b565b6001600160a01b03167ff9f4b296b0c32540acafb6c8937812d833013c92ebdc4c2ac0d9910132a1a26d60405160405180910390a350565b620005f96200012b565b6000546001600160a01b039081169116146200064b576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b600980546001600160a01b0319166001600160a01b038316908117909155620006736200012b565b6001600160a01b03167f6b280d88a71e3350b4e6b92556f8413347439e6bca3e3d9b21e93182d033d08760405160405180910390a350565b620006b56200012b565b6000546001600160a01b0390811691161462000707576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556200072f6200012b565b6001600160a01b03167fc5d389b63caae09f667aec538ad0d98aab524b8f6896cc6125f65898e92d134360405160405180910390a350565b6000546001600160a01b031690565b620007806200012b565b6000546001600160a01b03908116911614620007d2576040805162461bcd60e51b815260206004820181905260248201526000805160206200354b833981519152604482015290519081900360640190fd5b6001600160a01b038116620008195760405162461bcd60e51b8152600401808060200182810382526026815260200180620034fe6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206200356b83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526006602052604090208054600160801b90046001600160801b03161580620008a3575080546001600160801b031615155b15620008b0575062000982565b6002546001600160a01b0316600090815260066020908152604090912082546001600160801b031981166001600160801b03600160801b92839004811691909117808655835493946200091b9462000388949084169392049091169062001a4562000a61821b17901c565b81546001600160801b0319166001600160801b03919091161781556001600160a01b0383166200094a6200012b565b6001600160a01b03167f40b03d881bb709e31f47030e8d2981dfe8ba639a47b9d36367953e8e754a086060405160405180910390a350505b50565b600082820183811015620009e0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000600160801b821062000a2f5760405162461bcd60e51b8152600401808060200182810382526027815260200180620035246027913960400191505060405180910390fd5b5090565b6000620009e0836001600160a01b03841662000aab565b6000620009e0836001600160a01b03841662000b77565b6000620009e083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062000bc660201b60201c565b6000818152600183016020526040812054801562000b6c578354600019808301919081019060009087908390811062000ae057fe5b906000526020600020015490508087600001848154811062000afe57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908062000b2f57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050620009e3565b6000915050620009e3565b600062000b85838362000c61565b62000bbd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620009e3565b506000620009e3565b6000818484111562000c595760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000c1d57818101518382015260200162000c03565b50505050905090810190601f16801562000c4b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60009081526001919091016020526040902054151590565b6128758062000c896000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638da5cb5b1161010f578063c301e595116100a2578063e0a9da6a11610071578063e0a9da6a146104bf578063f14744b1146104f4578063f2fde38b146104fc578063fd14431014610522576101e5565b8063c301e59514610445578063cbc602761461046b578063d1af0c7d14610491578063de320cc114610499576101e5565b806395a1297a116100de57806395a1297a146103da57806395cb1b1e146103e2578063b1ebd5d6146103ea578063b4f0afb61461041f576101e5565b80638da5cb5b1461039c5780638ed6f262146103a4578063902dd186146103ca57806391387b15146103d2576101e5565b80634f7a6c3c116101875780636fd1bc83116101565780636fd1bc831461034e578063715018a614610356578063860c19f31461035e57806386a86d4114610366576101e5565b80634f7a6c3c1461028e5780636c7a0068146102b45780636eb854c8146102f15780636f4a2cd014610346576101e5565b80630c762141116101c35780630c762141146102205780632d281553146102285780633a98ef391461024e5780634e84544d14610268576101e5565b806303e4397f146101ea57806304c2861b146101f45780630b5e8df9146101fc575b600080fd5b6101f261052a565b005b6101f261053c565b61020461054c565b604080516001600160a01b039092168252519081900360200190f35b61020461055c565b6101f26004803603602081101561023e57600080fd5b50356001600160a01b031661056b565b6102566105cf565b60408051918252519081900360200190f35b6101f26004803603602081101561027e57600080fd5b50356001600160a01b031661062e565b6101f2600480360360208110156102a457600080fd5b50356001600160a01b03166106e4565b6101f2600480360360608110156102ca57600080fd5b506001600160a01b03813516906001600160801b036020820135169060400135151561092b565b6103176004803603602081101561030757600080fd5b50356001600160a01b0316610c99565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b610256610cc9565b6101f2610cf2565b6101f2610d02565b610256610da4565b6101f26004803603606081101561037c57600080fd5b506001600160a01b03813581169160208101359091169060400135610db7565b610204610ed1565b6101f2600480360360208110156103ba57600080fd5b50356001600160a01b0316610ee0565b610204610f41565b6101f2610f50565b610256611077565b61025661107d565b6101f26004803603604081101561040057600080fd5b5080356001600160a01b031690602001356001600160801b03166110e5565b6101f26004803603602081101561043557600080fd5b50356001600160a01b031661136e565b6101f26004803603602081101561045b57600080fd5b50356001600160a01b0316611424565b6101f26004803603602081101561048157600080fd5b50356001600160a01b03166114da565b610204611590565b6101f2600480360360208110156104af57600080fd5b50356001600160a01b031661159f565b6101f2600480360360408110156104d557600080fd5b5080356001600160a01b031690602001356001600160801b0316611655565b61020461185e565b6101f26004803603602081101561051257600080fd5b50356001600160a01b031661186d565b610204611965565b61053a610535611a87565b611a8b565b565b61053a610547611a87565b611b86565b6002546001600160a01b03165b90565b600a546001600160a01b031690565b610573611a87565b6000546001600160a01b039081169116146105c3576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6105cc81611b86565b50565b6000805b6105dd6004611c8d565b81101561062a57600660006105f3600484611c98565b6001600160a01b03168152602081019190915260400160002054600160801b90046001600160801b031691909101906001016105d3565b5090565b610636611a87565b6000546001600160a01b03908116911614610686576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0383169081179091556106ac611a87565b6001600160a01b03167f913d9a69e403f9beaf246057172211793b96d95f3469f37e35c9cbebada8d22860405160405180910390a350565b6106ec611a87565b6000546001600160a01b0390811691161461073c576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001600160a01b0381166107815760405162461bcd60e51b815260040180806020018281038252602a815260200180612816602a913960400191505060405180910390fd5b6001600160a01b0381163014156107c95760405162461bcd60e51b815260040180806020018281038252602b8152602001806127c1602b913960400191505060405180910390fd5b6107d281611b86565b6002546001600160a01b0316600090815260066020526040902080546001600160801b03600160801b82048116911611156108895780546001600160801b03600160801b820481168183169081039081900382166001600160801b03199093169290921783556001600160a01b03841660009081526006602052604090208054909161086c9161086791908116908516611974565b6119d7565b81546001600160801b0319166001600160801b0391909116179055505b8054600160801b90046001600160801b03166108b9576002546108b7906004906001600160a01b0316611a1b565b505b600280546001600160a01b0319166001600160a01b0384161790556108df600483611a30565b50816001600160a01b03166108f2611a87565b6001600160a01b03167f825991f9f9f950375f4d3f04c94283f5f7ea10aa441c6d43cb0e4c7bdce517bf60405160405180910390a35050565b610933611a87565b6000546001600160a01b03908116911614610983576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001600160a01b0383166109c85760405162461bcd60e51b815260040180806020018281038252603281526020018061266d6032913960400191505060405180910390fd5b6001600160a01b038316301415610a105760405162461bcd60e51b815260040180806020018281038252603b8152602001806125ba603b913960400191505060405180910390fd5b6002546001600160a01b03908116600081815260066020526040902090918516821415610afd578054610a6890610867906001600160801b0380881691610a629181811691600160801b900416611a45565b90611974565b81546001600160801b0319166001600160801b03918216178116600160801b918616919091021781556001600160a01b038516610aa3611a87565b6001600160a01b03167f4de46491e6981c5a2286f73b7825775a2141c4927704f3ba93a109c6cd9487ef868660405180836001600160801b0316815260200182151581526020019250505060405180910390a35050610c94565b6001600160a01b03851660009081526006602052604090208054600160801b90046001600160801b031615801590610b3d575080546001600160801b0316155b15610b835780548254610b6791610867916001600160801b0390811691600160801b900416611a45565b82546001600160801b0319166001600160801b03919091161782555b83610bd35780546001600160801b03191681558154610bb390610867906001600160801b03908116908816611974565b82546001600160801b0319166001600160801b0391909116178255610bed565b80546001600160801b0319166001600160801b0386161781555b80546001600160801b03808716600160801b81029190921617825515610c1e57610c18600487611a30565b50610c2b565b610c29600487611a1b565b505b856001600160a01b0316610c3d611a87565b6001600160a01b03167f4de46491e6981c5a2286f73b7825775a2141c4927704f3ba93a109c6cd9487ef878760405180836001600160801b0316815260200182151581526020019250505060405180910390a35050505b505050565b6001600160a01b03166000908152600660205260409020546001600160801b0380821692600160801b9092041690565b6000610cd3610f50565b6000610cdd61107d565b90508015610ced57610ced610cf2565b905090565b610cfa611ca4565b61053a611d70565b610d0a611a87565b6000546001600160a01b03908116911614610d5a576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000600354610db1611dcc565b01905090565b610dbf611a87565b6000546001600160a01b03908116911614610e0f576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001546001600160a01b0384811691161415610e5c5760405162461bcd60e51b815260040180806020018281038252602c8152602001806125f5602c913960400191505060405180910390fd5b610e706001600160a01b0384168383611e48565b816001600160a01b0316836001600160a01b0316610e8c611a87565b6001600160a01b03167feaf4cea276efdcae93a52ca2f4bfdd952992169289bf655b1870a4b20bdae7d6846040518082815260200191505060405180910390a4505050565b6000546001600160a01b031690565b610ee8611a87565b6000546001600160a01b03908116911614610f38576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6105cc81611a8b565b6008546001600160a01b031690565b6000610f5a610f41565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d6020811015610fd557600080fd5b5051905080610fe557505061053a565b6000610fef61185e565b90506110056001600160a01b0384168284611e9a565b60408051637cbc237360e01b815260048101849052610e1042016024820181905291516001600160a01b03841691637cbc237391604480830192600092919082900301818387803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b5050505050505050565b60035490565b600080611088611dcc565b905080611099576000915050610559565b60006110a36105cf565b905060005b6110b26004611c8d565b8110156110d6576110ce6110c7600483611c98565b8385611f85565b6001016110a8565b50506003805482019055905090565b6110ed611a87565b6000546001600160a01b0390811691161461113d576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001600160a01b0382166111825760405162461bcd60e51b81526004018080602001828103825260318152602001806127156031913960400191505060405180910390fd5b6001600160a01b0382163014156111ca5760405162461bcd60e51b815260040180806020018281038252603a815260200180612767603a913960400191505060405180910390fd5b6001600160801b03811661120f5760405162461bcd60e51b81526004018080602001828103825260268152602001806126216026913960400191505060405180910390fd5b6001600160a01b038216600090815260066020526040902080546001600160801b031661128d576002546001600160a01b03166000908152600660205260409020805461126d90610867906001600160801b03908116908616611974565b81546001600160801b0319166001600160801b03919091161790556112c6565b80546112aa90610867906001600160801b03908116908516611974565b81546001600160801b0319166001600160801b03919091161781555b80546112ea9061086790600160801b90046001600160801b03908116908516611974565b81546001600160801b03918216600160801b02911617815561130d600484611a30565b50826001600160a01b0316611320611a87565b6001600160a01b03167fb0526516c002a40f095ce404988798881dbee27cd25699cd9decde3702993da78460405180826001600160801b0316815260200191505060405180910390a3505050565b611376611a87565b6000546001600160a01b039081169116146113c6576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600980546001600160a01b0319166001600160a01b0383169081179091556113ec611a87565b6001600160a01b03167f6b280d88a71e3350b4e6b92556f8413347439e6bca3e3d9b21e93182d033d08760405160405180910390a350565b61142c611a87565b6000546001600160a01b0390811691161461147c576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0383169081179091556114a2611a87565b6001600160a01b03167ff9f4b296b0c32540acafb6c8937812d833013c92ebdc4c2ac0d9910132a1a26d60405160405180910390a350565b6114e2611a87565b6000546001600160a01b03908116911614611532576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b038316908117909155611558611a87565b6001600160a01b03167fc5d389b63caae09f667aec538ad0d98aab524b8f6896cc6125f65898e92d134360405160405180910390a350565b6001546001600160a01b031690565b6115a7611a87565b6000546001600160a01b039081169116146115f7576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b03831690811790915561161d611a87565b6001600160a01b03167f7d7a6e0febb00fa099988e85a4dcf58c7297875e1bd06fe1e764c71619ee3a2060405160405180910390a350565b61165d611a87565b6000546001600160a01b039081169116146116ad576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001600160801b0381166116f25760405162461bcd60e51b815260040180806020018281038252602981526020018061269f6029913960400191505060405180910390fd5b6001600160a01b038216600090815260066020526040902080546001600160801b0316611770576002546001600160a01b03166000908152600660205260409020805461175090610867906001600160801b03908116908616611a45565b81546001600160801b0319166001600160801b03919091161790556117a9565b805461178d90610867906001600160801b03908116908516611a45565b81546001600160801b0319166001600160801b03919091161781555b80546117cd9061086790600160801b90046001600160801b03908116908516611a45565b81546001600160801b03908116600160801b92821683021780845591909104166117fe576117fc600484611a1b565b505b826001600160a01b0316611810611a87565b6001600160a01b03167f5fb77bf2c7b86e2345c2fc7c204ec8d8c378d00526c58afbb2a61d3350b2df5c8460405180826001600160801b0316815260200191505060405180910390a3505050565b6009546001600160a01b031690565b611875611a87565b6000546001600160a01b039081169116146118c5576040805162461bcd60e51b815260206004820181905260248201526000805160206127a1833981519152604482015290519081900360640190fd5b6001600160a01b03811661190a5760405162461bcd60e51b81526004018080602001828103825260268152602001806126476026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b031690565b6000828201838110156119ce576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000600160801b821061062a5760405162461bcd60e51b81526004018080602001828103825260278152602001806126c86027913960400191505060405180910390fd5b60006119ce836001600160a01b038416611fdc565b60006119ce836001600160a01b0384166120a2565b60006119ce83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506120ec565b3390565b6002546001600160a01b0382811691161415611aa6576105cc565b6001600160a01b038116600090815260066020526040902080546001600160801b0316611ad357506105cc565b6002546001600160a01b0316600090815260066020526040902081546001600160801b0319168083558154611b1f91610867916001600160801b0390811691600160801b900416611974565b81546001600160801b0319166001600160801b03919091161781556001600160a01b038316611b4c611a87565b6001600160a01b03167f3fbaeb975b6f6e0cc02bfd572112307889d79b6d7154796814aff3e145df5dde60405160405180910390a3505050565b6001600160a01b03811660009081526006602052604090208054600160801b90046001600160801b03161580611bc5575080546001600160801b031615155b15611bd057506105cc565b6002546001600160a01b0316600090815260066020526040902081546001600160801b031981166001600160801b03600160801b928390048116919091178085558354611c269361086793918216920416611a45565b81546001600160801b0319166001600160801b03919091161781556001600160a01b038316611c53611a87565b6001600160a01b03167f40b03d881bb709e31f47030e8d2981dfe8ba639a47b9d36367953e8e754a086060405160405180910390a3505050565b60006119d182612188565b60006119ce838361218c565b6000611cae611965565b9050806001600160a01b031663bfb0efab6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ce957600080fd5b505afa158015611cfd573d6000803e3d6000fd5b505050506040513d6020811015611d1357600080fd5b5051156105cc57806001600160a01b0316633ad661276040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d5557600080fd5b505af1158015611d69573d6000803e3d6000fd5b5050505050565b611d7861055c565b6001600160a01b0316633ad661276040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611db257600080fd5b505af1158015611dc6573d6000803e3d6000fd5b50505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e1757600080fd5b505afa158015611e2b573d6000803e3d6000fd5b505050506040513d6020811015611e4157600080fd5b5051905090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c949084906121f0565b6000611f3082856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015611efe57600080fd5b505afa158015611f12573d6000803e3d6000fd5b505050506040513d6020811015611f2857600080fd5b505190611974565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150611dc69085906121f0565b6001600160a01b03831660009081526006602052604081208054909190611fc2908590611fbc9086906001600160801b03166122a1565b906122fa565b600154909150611d69906001600160a01b03168683611e48565b60008181526001830160205260408120548015612098578354600019808301919081019060009087908390811061200f57fe5b906000526020600020015490508087600001848154811061202c57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061205c57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506119d1565b60009150506119d1565b60006120ae838361233c565b6120e4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556119d1565b5060006119d1565b6000818484111561217b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612140578181015183820152602001612128565b50505050905090810190601f16801561216d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b5490565b815460009082106121ce5760405162461bcd60e51b81526004018080602001828103825260228152602001806125986022913960400191505060405180910390fd5b8260000182815481106121dd57fe5b9060005260206000200154905092915050565b6000612245826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123549092919063ffffffff16565b805190915015610c945780806020019051602081101561226457600080fd5b5051610c945760405162461bcd60e51b815260040180806020018281038252602a8152602001806127ec602a913960400191505060405180910390fd5b6000826122b0575060006119d1565b828202828482816122bd57fe5b04146119ce5760405162461bcd60e51b81526004018080602001828103825260218152602001806127466021913960400191505060405180910390fd5b60006119ce83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061236b565b60009081526001919091016020526040902054151590565b606061236384846000856123d0565b949350505050565b600081836123ba5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612140578181015183820152602001612128565b5060008385816123c657fe5b0495945050505050565b6060824710156124115760405162461bcd60e51b81526004018080602001828103825260268152602001806126ef6026913960400191505060405180910390fd5b61241a8561252b565b61246b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106124a95780518252601f19909201916020918201910161248a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461250b576040519150601f19603f3d011682016040523d82523d6000602084013e612510565b606091505b5091509150612520828286612531565b979650505050505050565b3b151590565b60608315612540575081612181565b8251156125505782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561214057818101518382015260200161212856fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473526577617264734d616e616765723a2063616e6e6f74207365742073686172657320666f72207468697320636f6e74726163742061646472657373526577617264734d616e616765723a2063616e6e6f74207265636f766572207265776172647320746f6b656e526577617264734d616e616765723a2063616e6e6f7420616464207a65726f207368617265734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373526577617264734d616e616765723a2063616e6e6f74207365742073686172657320666f72207a65726f2061646472657373526577617264734d616e616765723a2063616e6e6f742072656d6f7665207a65726f2073686172657353616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c526577617264734d616e616765723a2063616e6e6f74206164642073686172657320746f207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526577617264734d616e616765723a2063616e6e6f74206164642073686172657320746f207468697320636f6e747261637420616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526577617264734d616e616765723a2063616e6e6f742073657420746f207468697320636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564526577617264734d616e616765723a2063616e6e6f742073657420746f207a65726f2061646472657373a264697066735822122012a610814941fcffb72fabb3aa445fdd0943acfdb4f41d78659b0fd338de8dd864736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353616665436173743a2076616c756520646f65736e27742066697420696e2031323820626974734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0526577617264734d616e616765723a2063616e6e6f742073657420746f207468697320636f6e7472616374526577617264734d616e616765723a2063616e6e6f742073657420746f207a65726f2061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 912,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13271,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_rewardsToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13273,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_defaultRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13275,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_totalRewardsRedeemed",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13277,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_recipients",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)2731_storage"
      },
      {
        "astId": 13281,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_shares",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Shares)13269_storage)"
      },
      {
        "astId": 7766,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_ethmxRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7768,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_ethtx",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7770,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_ethtxAMM",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7772,
        "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
        "label": "_lpRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Shares)13269_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsManager.Shares)",
        "numberOfBytes": "32",
        "value": "t_struct(Shares)13269_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2731_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2730,
            "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2466_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2466_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2461,
            "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2465,
            "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Shares)13269_storage": {
        "encoding": "inplace",
        "label": "struct RewardsManager.Shares",
        "members": [
          {
            "astId": 13266,
            "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13268,
            "contract": "contracts/rewards/ETHtxRewardsManager.sol:ETHtxRewardsManager",
            "label": "total",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}