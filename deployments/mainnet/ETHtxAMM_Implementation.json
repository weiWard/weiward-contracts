{
  "address": "0x0D0699D30982274B06cebBd4bc7d34445A134dc0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ETHtxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GasOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredUnsupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "TargetCRatioSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WETHSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cRatioBelowTarget",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethSupplyTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountEthtxOut",
          "type": "uint256"
        }
      ],
      "name": "ethToExactEthtx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtxAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethtxOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountEthOut",
          "type": "uint256"
        }
      ],
      "name": "ethtxToExactEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountEthIn",
          "type": "uint256"
        }
      ],
      "name": "exactEthToEthtx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountEthtxIn",
          "type": "uint256"
        }
      ],
      "name": "exactEthtxToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeLogic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPerETHtx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceAtRedemption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ethtx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gasOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "targetCRatioNum",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "targetCRatioDen",
              "type": "uint128"
            }
          ],
          "internalType": "struct ETHtxAMM.ETHtxAMMArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "postInit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnsupportedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setEthtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setGasOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "name": "setTargetCRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapEthForEthtx",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapEthForExactEthtx",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "asWETH",
          "type": "bool"
        }
      ],
      "name": "swapEthtxForEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "asWETH",
          "type": "bool"
        }
      ],
      "name": "swapEthtxForExactEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactEthForEthtx",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "asWETH",
          "type": "bool"
        }
      ],
      "name": "swapExactEthtxForEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactWethForEthtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapWethForEthtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapWethForExactEthtx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "numerator",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "denominator",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x02e62a5cac6f29349b8975d293133d924bd3d4dab8f940de68877822c125c391",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394",
    "contractAddress": null,
    "transactionIndex": 171,
    "gasUsed": "3697949",
    "logsBloom": "0x
    "blockHash": "0x88a199a6187fcbc41db1bb130266d39c1d2304474e913a5555bee5d56862aeab",
    "transactionHash": "0x02e62a5cac6f29349b8975d293133d924bd3d4dab8f940de68877822c125c391",
    "logs": [
      {
        "transactionIndex": 171,
        "blockNumber": 12407121,
        "transactionHash": "0x02e62a5cac6f29349b8975d293133d924bd3d4dab8f940de68877822c125c391",
        "address": "0x0D0699D30982274B06cebBd4bc7d34445A134dc0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005757dd711eae80e181e07cdbce43359ac1048394"
        ],
        "data": "0x",
        "logIndex": 247,
        "blockHash": "0x88a199a6187fcbc41db1bb130266d39c1d2304474e913a5555bee5d56862aeab"
      }
    ],
    "blockNumber": 12407121,
    "cumulativeGasUsed": "13751300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757Dd711EaE80e181E07CdbCe43359Ac1048394"
  ],
  "solcInputHash": "3cacffe51216d1376f3121babfd97661",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ETHtxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GasOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredUnsupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"TargetCRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WETHSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRatioBelowTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSupplyTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEthtxOut\",\"type\":\"uint256\"}],\"name\":\"ethToExactEthtx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtxAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethtxOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEthOut\",\"type\":\"uint256\"}],\"name\":\"ethtxToExactEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEthIn\",\"type\":\"uint256\"}],\"name\":\"exactEthToEthtx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEthtxIn\",\"type\":\"uint256\"}],\"name\":\"exactEthtxToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPerETHtx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceAtRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ethtx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"targetCRatioNum\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"targetCRatioDen\",\"type\":\"uint128\"}],\"internalType\":\"struct ETHtxAMM.ETHtxAMMArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"postInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setEthtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setTargetCRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapEthForEthtx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapEthForExactEthtx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"asWETH\",\"type\":\"bool\"}],\"name\":\"swapEthtxForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"asWETH\",\"type\":\"bool\"}],\"name\":\"swapEthtxForExactEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactEthForEthtx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"asWETH\",\"type\":\"bool\"}],\"name\":\"swapExactEthtxForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactWethForEthtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapWethForEthtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapWethForExactEthtx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchanges/ETHtxAMM/ETHtxAMM.sol\":\"ETHtxAMM\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x20f2d2dc1bd6616bf85e695f9139c2a949cfc4bd8e2f4de0c5d0f9bb54f8df9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v3.4.0-solc-0.7/contracts/access/OwnableUpgradeable.sol\\n *\\n * Changes:\\n * - Added owner argument to initializer\\n * - Reformatted styling in line with this repository.\\n */\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/* solhint-disable func-name-mixedcase */\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tfunction __Ownable_init(address owner_) internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained(address owner_) internal initializer {\\n\\t\\t_owner = owner_;\\n\\t\\temit OwnershipTransferred(address(0), owner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5f32f6abe1fdaea0af2e09599e1bb2662cbfafe4bbc663a34d80a2bbfbb15220\",\"license\":\"MIT\"},\"contracts/exchanges/ETHtxAMM/ETHtxAMM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./ETHtxAMMData.sol\\\";\\nimport \\\"../interfaces/IETHtxAMM.sol\\\";\\nimport \\\"../../tokens/interfaces/IETHtx.sol\\\";\\nimport \\\"../../tokens/interfaces/IERC20TxFee.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../../rewards/interfaces/IFeeLogic.sol\\\";\\nimport \\\"../../oracles/interfaces/IGasPrice.sol\\\";\\nimport \\\"../../access/OwnableUpgradeable.sol\\\";\\n\\ncontract ETHtxAMM is\\n\\tInitializable,\\n\\tContextUpgradeable,\\n\\tOwnableUpgradeable,\\n\\tPausableUpgradeable,\\n\\tETHtxAMMData,\\n\\tIETHtxAMM\\n{\\n\\tusing Address for address payable;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint128;\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct ETHtxAMMArgs {\\n\\t\\taddress ethtx;\\n\\t\\taddress gasOracle;\\n\\t\\taddress weth;\\n\\t\\tuint128 targetCRatioNum;\\n\\t\\tuint128 targetCRatioDen;\\n\\t}\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(address owner_) {\\n\\t\\tinit(owner_);\\n\\t}\\n\\n\\t/* Initializer */\\n\\n\\tfunction init(address owner_) public virtual initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__Ownable_init_unchained(owner_);\\n\\t\\t__Pausable_init_unchained();\\n\\t}\\n\\n\\tfunction postInit(ETHtxAMMArgs memory _args) external virtual onlyOwner {\\n\\t\\taddress sender = _msgSender();\\n\\n\\t\\t_ethtx = _args.ethtx;\\n\\t\\temit ETHtxSet(sender, _args.ethtx);\\n\\n\\t\\t_gasOracle = _args.gasOracle;\\n\\t\\temit GasOracleSet(sender, _args.gasOracle);\\n\\n\\t\\t_weth = _args.weth;\\n\\t\\temit WETHSet(sender, _args.weth);\\n\\n\\t\\t_targetCRatioNum = _args.targetCRatioNum;\\n\\t\\t_targetCRatioDen = _args.targetCRatioDen;\\n\\t\\temit TargetCRatioSet(sender, _args.targetCRatioNum, _args.targetCRatioDen);\\n\\t}\\n\\n\\t/* Fallbacks */\\n\\n\\treceive() external payable {\\n\\t\\t// Only accept ETH via fallback from the WETH contract\\n\\t\\taddress weth_ = weth();\\n\\t\\tif (msg.sender != weth_) {\\n\\t\\t\\t// Otherwise try to convert it to WETH\\n\\t\\t\\tIWETH(weth_).deposit{ value: msg.value }();\\n\\t\\t}\\n\\t}\\n\\n\\t/* Modifiers */\\n\\n\\tmodifier ensure(uint256 deadline) {\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\trequire(deadline >= block.timestamp, \\\"ETHtxAMM: expired\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier priceIsFresh() {\\n\\t\\trequire(\\n\\t\\t\\t!IGasPrice(gasOracle()).hasPriceExpired(),\\n\\t\\t\\t\\\"ETHtxAMM: gas price is outdated\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/* External Mutators */\\n\\n\\tfunction swapEthForEthtx(uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\t_swapEthForEthtxRaw(msg.value, deadline, false);\\n\\t}\\n\\n\\tfunction swapWethForEthtx(uint256 amountIn, uint256 deadline)\\n\\t\\texternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\t_swapEthForEthtxRaw(amountIn, deadline, true);\\n\\t}\\n\\n\\tfunction swapEthForExactEthtx(uint256 amountOut, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\tuint256 amountInMax = msg.value;\\n\\t\\tuint256 amountIn =\\n\\t\\t\\t_swapEthForExactEthtx(amountInMax, amountOut, deadline, false);\\n\\t\\t// refund leftover ETH\\n\\t\\tif (amountInMax != amountIn) {\\n\\t\\t\\tpayable(_msgSender()).sendValue(amountInMax - amountIn);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction swapWethForExactEthtx(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline\\n\\t) external virtual override {\\n\\t\\t_swapEthForExactEthtx(amountInMax, amountOut, deadline, true);\\n\\t}\\n\\n\\tfunction swapExactEthForEthtx(uint256 amountOutMin, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t{\\n\\t\\t_swapExactEthForEthtx(msg.value, amountOutMin, deadline, false);\\n\\t}\\n\\n\\tfunction swapExactWethForEthtx(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline\\n\\t) external virtual override {\\n\\t\\t_swapExactEthForEthtx(amountIn, amountOutMin, deadline, true);\\n\\t}\\n\\n\\tfunction swapEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external virtual override ensure(deadline) priceIsFresh {\\n\\t\\trequire(amountIn != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\tuint256 amountOut = exactEthtxToEth(amountIn);\\n\\t\\t_swapEthtxForEth(_msgSender(), amountIn, amountOut, asWETH);\\n\\t}\\n\\n\\tfunction swapEthtxForExactEth(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external virtual override ensure(deadline) priceIsFresh {\\n\\t\\trequire(amountInMax != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\tuint256 amountIn = ethtxToExactEth(amountOut);\\n\\t\\trequire(amountIn <= amountInMax, \\\"ETHtxAMM: amountIn exceeds max\\\");\\n\\t\\t_swapEthtxForEth(_msgSender(), amountIn, amountOut, asWETH);\\n\\t}\\n\\n\\tfunction swapExactEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external virtual override ensure(deadline) priceIsFresh {\\n\\t\\trequire(amountIn != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\tuint256 amountOut = exactEthtxToEth(amountIn);\\n\\t\\trequire(amountOut >= amountOutMin, \\\"ETHtxAMM: amountOut below min\\\");\\n\\t\\t_swapEthtxForEth(_msgSender(), amountIn, amountOut, asWETH);\\n\\t}\\n\\n\\tfunction pause() external virtual override onlyOwner whenNotPaused {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external virtual override onlyOwner {\\n\\t\\trequire(token != weth(), \\\"ETHtxAMM: cannot recover WETH\\\");\\n\\t\\trequire(token != ethtx(), \\\"ETHtxAMM: cannot recover ETHtx\\\");\\n\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\n\\t\\temit RecoveredUnsupported(_msgSender(), token, to, amount);\\n\\t}\\n\\n\\tfunction setEthtx(address account) public virtual override onlyOwner {\\n\\t\\trequire(account != address(0), \\\"ETHtxAMM: ETHtx zero address\\\");\\n\\t\\t_ethtx = account;\\n\\t\\temit ETHtxSet(_msgSender(), account);\\n\\t}\\n\\n\\tfunction setGasOracle(address account) public virtual override onlyOwner {\\n\\t\\trequire(account != address(0), \\\"ETHtxAMM: gasOracle zero address\\\");\\n\\t\\t_gasOracle = account;\\n\\t\\temit GasOracleSet(_msgSender(), account);\\n\\t}\\n\\n\\tfunction setTargetCRatio(uint128 numerator, uint128 denominator)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(numerator != 0, \\\"ETHtxAMM: targetCRatio numerator is zero\\\");\\n\\t\\trequire(denominator != 0, \\\"ETHtxAMM: targetCRatio denominator is zero\\\");\\n\\t\\t_targetCRatioNum = numerator;\\n\\t\\t_targetCRatioDen = denominator;\\n\\t\\temit TargetCRatioSet(_msgSender(), numerator, denominator);\\n\\t}\\n\\n\\tfunction setWETH(address account) public virtual override onlyOwner {\\n\\t\\trequire(account != address(0), \\\"ETHtxAMM: WETH zero address\\\");\\n\\t\\t_weth = account;\\n\\t\\temit WETHSet(_msgSender(), account);\\n\\t}\\n\\n\\tfunction unpause() external virtual override onlyOwner whenPaused {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/* Public Pure */\\n\\n\\tfunction gasPerETHtx() public pure virtual override returns (uint256) {\\n\\t\\treturn 21000; // Per 1e18\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction cRatio()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256 numerator, uint256 denominator)\\n\\t{\\n\\t\\tnumerator = ethSupply();\\n\\t\\tdenominator = ethToExactEthtx(ethtxOutstanding());\\n\\t}\\n\\n\\tfunction cRatioBelowTarget() public view virtual override returns (bool) {\\n\\t\\t(uint256 cRatioNum, uint256 cRatioDen) = cRatio();\\n\\t\\tif (cRatioDen == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tuint256 current = cRatioNum.mul(1e18) / cRatioDen;\\n\\n\\t\\t(uint256 targetNum, uint256 targetDen) = targetCRatio();\\n\\t\\tuint256 target = targetNum.mul(1e18).div(targetDen);\\n\\n\\t\\treturn current < target;\\n\\t}\\n\\n\\tfunction ethNeeded() external view virtual override returns (uint256) {\\n\\t\\t(uint256 ethSupply_, uint256 ethOut) = cRatio();\\n\\t\\t(uint128 targetNum, uint128 targetDen) = targetCRatio();\\n\\n\\t\\tuint256 target = ethOut.mul(targetNum).div(targetDen);\\n\\n\\t\\tif (ethSupply_ > target) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn target - ethSupply_;\\n\\t}\\n\\n\\tfunction ethtx() public view virtual override returns (address) {\\n\\t\\treturn _ethtx;\\n\\t}\\n\\n\\tfunction exactEthToEthtx(uint256 amountEthIn)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _ethToEthtx(gasPrice(), amountEthIn);\\n\\t}\\n\\n\\tfunction ethToExactEthtx(uint256 amountEthtxOut)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _ethtxToEth(gasPrice(), amountEthtxOut);\\n\\t}\\n\\n\\tfunction exactEthtxToEth(uint256 amountEthtxIn)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Account for fee\\n\\t\\tuint256 fee =\\n\\t\\t\\tIFeeLogic(feeLogic()).getFee(_msgSender(), address(this), amountEthtxIn);\\n\\n\\t\\treturn _ethtxToEth(gasPriceAtRedemption(), amountEthtxIn.sub(fee));\\n\\t}\\n\\n\\tfunction ethtxToExactEth(uint256 amountEthOut)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 amountEthtx = _ethToEthtx(gasPriceAtRedemption(), amountEthOut);\\n\\n\\t\\t// Account for fee\\n\\t\\tuint256 amountBeforeFee =\\n\\t\\t\\tIFeeLogic(feeLogic()).undoFee(_msgSender(), address(this), amountEthtx);\\n\\n\\t\\treturn amountBeforeFee;\\n\\t}\\n\\n\\tfunction ethSupply() public view virtual override returns (uint256) {\\n\\t\\treturn IERC20(weth()).balanceOf(address(this));\\n\\t}\\n\\n\\tfunction ethSupplyTarget() external view virtual override returns (uint256) {\\n\\t\\t(uint128 targetNum, uint128 targetDen) = targetCRatio();\\n\\t\\treturn ethToExactEthtx(ethtxOutstanding()).mul(targetNum).div(targetDen);\\n\\t}\\n\\n\\tfunction ethtxAvailable() public view virtual override returns (uint256) {\\n\\t\\treturn IERC20(ethtx()).balanceOf(address(this));\\n\\t}\\n\\n\\tfunction ethtxOutstanding() public view virtual override returns (uint256) {\\n\\t\\treturn IERC20(ethtx()).totalSupply().sub(ethtxAvailable());\\n\\t}\\n\\n\\tfunction feeLogic() public view virtual override returns (address) {\\n\\t\\treturn IERC20TxFee(ethtx()).feeLogic();\\n\\t}\\n\\n\\tfunction gasOracle() public view virtual override returns (address) {\\n\\t\\treturn _gasOracle;\\n\\t}\\n\\n\\tfunction gasPrice() public view virtual override returns (uint256) {\\n\\t\\treturn IGasPrice(gasOracle()).gasPrice();\\n\\t}\\n\\n\\tfunction gasPriceAtRedemption()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Apply cap when collateral below target\\n\\t\\tuint256 gasPrice_ = gasPrice();\\n\\t\\tuint256 maxGasPrice_ = maxGasPrice();\\n\\t\\tif (gasPrice_ > maxGasPrice_) {\\n\\t\\t\\tgasPrice_ = maxGasPrice_;\\n\\t\\t}\\n\\t\\treturn gasPrice_;\\n\\t}\\n\\n\\tfunction maxGasPrice() public view virtual override returns (uint256) {\\n\\t\\tuint256 liability = ethtxOutstanding();\\n\\t\\tif (liability == 0) {\\n\\t\\t\\treturn gasPrice();\\n\\t\\t}\\n\\n\\t\\t(uint128 targetNum, uint128 targetDen) = targetCRatio();\\n\\n\\t\\tuint256 numerator = ethSupply().mul(1e18).mul(targetDen);\\n\\t\\tuint256 denominator = liability.mul(gasPerETHtx()).mul(targetNum);\\n\\t\\treturn numerator.div(denominator);\\n\\t}\\n\\n\\tfunction targetCRatio()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint128 numerator, uint128 denominator)\\n\\t{\\n\\t\\tnumerator = _targetCRatioNum;\\n\\t\\tdenominator = _targetCRatioDen;\\n\\t}\\n\\n\\tfunction weth() public view virtual override returns (address) {\\n\\t\\treturn _weth;\\n\\t}\\n\\n\\t/* Internal Pure */\\n\\n\\tfunction _ethtxToEth(uint256 gasPrice_, uint256 amountETHtx)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn gasPrice_.mul(amountETHtx).mul(gasPerETHtx()) / 1e18;\\n\\t}\\n\\n\\tfunction _ethToEthtx(uint256 gasPrice_, uint256 amountETH)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(gasPrice_ != 0, \\\"ETHtxAMM: gasPrice is zero\\\");\\n\\t\\treturn amountETH.mul(1e18) / gasPrice_.mul(gasPerETHtx());\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _swapEthForEthtxRaw(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 deadline,\\n\\t\\tbool useWETH\\n\\t) internal virtual ensure(deadline) priceIsFresh {\\n\\t\\trequire(amountIn != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\tuint256 amountOut = exactEthToEthtx(amountIn);\\n\\t\\t_swapEthForEthtx(_msgSender(), amountIn, amountOut, useWETH);\\n\\t}\\n\\n\\tfunction _swapEthForExactEthtx(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline,\\n\\t\\tbool useWETH\\n\\t) internal virtual ensure(deadline) priceIsFresh returns (uint256 amountIn) {\\n\\t\\trequire(amountInMax != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\t// Add 1 to account for rounding (can't get ETHtx for 0 wei)\\n\\t\\tamountIn = ethToExactEthtx(amountOut).add(1);\\n\\t\\trequire(amountIn <= amountInMax, \\\"ETHtxAMM: amountIn exceeds max\\\");\\n\\t\\t_swapEthForEthtx(_msgSender(), amountIn, amountOut, useWETH);\\n\\t}\\n\\n\\tfunction _swapExactEthForEthtx(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline,\\n\\t\\tbool useWETH\\n\\t) internal virtual ensure(deadline) priceIsFresh {\\n\\t\\trequire(amountIn != 0, \\\"ETHtxAMM: cannot swap zero\\\");\\n\\t\\tuint256 amountOut = exactEthToEthtx(amountIn);\\n\\t\\trequire(amountOut >= amountOutMin, \\\"ETHtxAMM: amountOut below min\\\");\\n\\t\\t_swapEthForEthtx(_msgSender(), amountIn, amountOut, useWETH);\\n\\t}\\n\\n\\tfunction _swapEthForEthtx(\\n\\t\\taddress account,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut,\\n\\t\\tbool useWETH\\n\\t) internal virtual {\\n\\t\\tuint256 availableSupply = IERC20(ethtx()).balanceOf(address(this));\\n\\t\\trequire(\\n\\t\\t\\tavailableSupply >= amountOut,\\n\\t\\t\\t\\\"ETHtxAMM: not enough ETHtx available\\\"\\n\\t\\t);\\n\\n\\t\\tif (useWETH) {\\n\\t\\t\\tIERC20(weth()).safeTransferFrom(account, address(this), amountIn);\\n\\t\\t} else {\\n\\t\\t\\tIWETH(weth()).deposit{ value: amountIn }();\\n\\t\\t}\\n\\n\\t\\t// Bypass fee by setting exemption for AMM contract\\n\\t\\tIERC20(ethtx()).safeTransfer(account, amountOut);\\n\\t}\\n\\n\\tfunction _swapEthtxForEth(\\n\\t\\taddress account,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut,\\n\\t\\tbool asWETH\\n\\t) internal virtual {\\n\\t\\t// Apply fee\\n\\t\\tIERC20(ethtx()).safeTransferFrom(account, address(this), amountIn);\\n\\n\\t\\tif (asWETH) {\\n\\t\\t\\tIERC20(weth()).safeTransfer(account, amountOut);\\n\\t\\t} else {\\n\\t\\t\\tIWETH(weth()).withdraw(amountOut);\\n\\t\\t\\tpayable(account).sendValue(amountOut);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xd96327f67707ed5e8c2764bbb01b363b2969f038a128f1efc513ca00ef4c8338\",\"license\":\"Apache-2.0\"},\"contracts/exchanges/ETHtxAMM/ETHtxAMMData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ETHtxAMMData {\\n\\taddress internal _gasOracle;\\n\\tuint128 internal _targetCRatioNum;\\n\\tuint128 internal _targetCRatioDen;\\n\\taddress internal _ethtx;\\n\\taddress internal _weth;\\n\\n\\tuint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x9da7503a2f6eb16cb53d61f3abaa5435f50231ba50c084fee03dd86362981bf3\",\"license\":\"Apache-2.0\"},\"contracts/exchanges/interfaces/IETHtxAMM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IETHtxAMM {\\n\\t/* Views */\\n\\n\\tfunction cRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 numerator, uint256 denominator);\\n\\n\\tfunction cRatioBelowTarget() external view returns (bool);\\n\\n\\tfunction ethNeeded() external view returns (uint256);\\n\\n\\tfunction ethtx() external view returns (address);\\n\\n\\tfunction exactEthToEthtx(uint256 amountEthIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethToExactEthtx(uint256 amountEthtxOut)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction exactEthtxToEth(uint256 amountEthtxIn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethtxToExactEth(uint256 amountEthOut)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction ethSupply() external view returns (uint256);\\n\\n\\tfunction ethSupplyTarget() external view returns (uint256);\\n\\n\\tfunction ethtxAvailable() external view returns (uint256);\\n\\n\\tfunction ethtxOutstanding() external view returns (uint256);\\n\\n\\tfunction feeLogic() external view returns (address);\\n\\n\\tfunction gasOracle() external view returns (address);\\n\\n\\tfunction gasPerETHtx() external pure returns (uint256);\\n\\n\\tfunction gasPrice() external view returns (uint256);\\n\\n\\tfunction gasPriceAtRedemption() external view returns (uint256);\\n\\n\\tfunction maxGasPrice() external view returns (uint256);\\n\\n\\tfunction targetCRatio()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction weth() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction swapEthForEthtx(uint256 deadline) external payable;\\n\\n\\tfunction swapWethForEthtx(uint256 amountIn, uint256 deadline) external;\\n\\n\\tfunction swapEthForExactEthtx(uint256 amountOut, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable;\\n\\n\\tfunction swapWethForExactEthtx(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactEthForEthtx(uint256 amountOutMin, uint256 deadline)\\n\\t\\texternal\\n\\t\\tpayable;\\n\\n\\tfunction swapExactWethForEthtx(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction swapEthtxForExactEth(\\n\\t\\tuint256 amountInMax,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction swapExactEthtxForEth(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\tuint256 deadline,\\n\\t\\tbool asWETH\\n\\t) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setEthtx(address account) external;\\n\\n\\tfunction setGasOracle(address account) external;\\n\\n\\tfunction setTargetCRatio(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setWETH(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent ETHtxSet(address indexed author, address indexed account);\\n\\tevent GasOracleSet(address indexed author, address indexed account);\\n\\tevent RecoveredUnsupported(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent TargetCRatioSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent WETHSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0x2e93eccde4cc455aa0e55c0dedb82a993b730d16d22f24aa4042e2c2ed19778e\",\"license\":\"Apache-2.0\"},\"contracts/oracles/interfaces/IGasPrice.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IGasPrice {\\n\\t/* Views */\\n\\n\\tfunction gasPrice() external view returns (uint256);\\n\\n\\tfunction hasPriceExpired() external view returns (bool);\\n\\n\\tfunction updateThreshold() external view returns (uint256);\\n\\n\\tfunction updatedAt() external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction setGasPrice(uint256 _gasPrice) external;\\n\\n\\tfunction setUpdateThreshold(uint256 _updateThreshold) external;\\n\\n\\t/* Events */\\n\\n\\tevent GasPriceUpdate(address indexed author, uint256 newValue);\\n\\tevent UpdateThresholdSet(address indexed author, uint256 value);\\n}\\n\",\"keccak256\":\"0xf4dfc6c61873daf6eb7f93f7453207048c746116af14943a7d4cf87fe72fe0f6\",\"license\":\"Apache-2.0\"},\"contracts/rewards/interfaces/IFeeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IFeeLogic {\\n\\t/* Types */\\n\\n\\tstruct ExemptData {\\n\\t\\taddress account;\\n\\t\\tbool isExempt;\\n\\t}\\n\\n\\t/* Views */\\n\\n\\tfunction exemptsAt(uint256 index) external view returns (address);\\n\\n\\tfunction exemptsLength() external view returns (uint256);\\n\\n\\tfunction feeRate()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint128 numerator, uint128 denominator);\\n\\n\\tfunction getFee(\\n\\t\\taddress sender,\\n\\t\\taddress recipient_,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\tfunction isExempt(address account) external view returns (bool);\\n\\n\\tfunction recipient() external view returns (address);\\n\\n\\tfunction undoFee(\\n\\t\\taddress sender,\\n\\t\\taddress recipient_,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction notify(uint256 amount) external;\\n\\n\\tfunction setExempt(address account, bool isExempt_) external;\\n\\n\\tfunction setExemptBatch(ExemptData[] memory batch) external;\\n\\n\\tfunction setFeeRate(uint128 numerator, uint128 denominator) external;\\n\\n\\tfunction setRecipient(address account) external;\\n\\n\\t/* Events */\\n\\n\\tevent ExemptAdded(address indexed author, address indexed account);\\n\\tevent ExemptRemoved(address indexed author, address indexed account);\\n\\tevent FeeRateSet(\\n\\t\\taddress indexed author,\\n\\t\\tuint128 numerator,\\n\\t\\tuint128 denominator\\n\\t);\\n\\tevent RecipientSet(address indexed author, address indexed account);\\n}\\n\",\"keccak256\":\"0x1330e9d9c8d17d3fea1fc0085d21020031f8520c7cff3ca4d73139a534d88e5c\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IERC20TxFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC20TxFee {\\n\\t/* Views */\\n\\n\\tfunction feeLogic() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf0e803a75c9d94a211b7a88d88e14676387e3ff0b82f84ddff9f067fa3363934\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IETHtx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2021 weiWard LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IETHtx {\\n\\t/* Views */\\n\\n\\tfunction minter() external view returns (address);\\n\\n\\t/* Mutators */\\n\\n\\tfunction burn(address account, uint256 amount) external;\\n\\n\\tfunction mint(address account, uint256 amount) external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction setFeeLogic(address account) external;\\n\\n\\tfunction setMinter(address account) external;\\n\\n\\tfunction unpause() external;\\n\\n\\t/* Events */\\n\\n\\tevent FeeLogicSet(address indexed author, address indexed account);\\n\\tevent MinterSet(address indexed author, address indexed account);\\n\\tevent Recovered(\\n\\t\\taddress indexed author,\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n}\\n\",\"keccak256\":\"0x14abcc6bc0b270b546a52c9951bd40b1314dc2e995561f90877161d028045b3b\",\"license\":\"Apache-2.0\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xa67afe56374106100a0f6b7c269319f9a44a7050fd489610859280e8a63c6ec3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620044ff380380620044ff833981016040819052620000349162000384565b6200003f8162000046565b50620003b4565b600054610100900460ff16806200006257506200006262000110565b8062000071575060005460ff16155b620000ae5760405162461bcd60e51b815260040180806020018281038252602e815260200180620044d1602e913960400191505060405180910390fd5b600054610100900460ff16158015620000da576000805460ff1961ff0019909116610100171660011790555b620000e46200012e565b620000ef82620001d8565b620000f9620002cb565b80156200010c576000805461ff00191690555b5050565b600062000128306200037e60201b6200254a1760201c565b15905090565b600054610100900460ff16806200014a57506200014a62000110565b8062000159575060005460ff16155b620001965760405162461bcd60e51b815260040180806020018281038252602e815260200180620044d1602e913960400191505060405180910390fd5b600054610100900460ff16158015620001c2576000805460ff1961ff0019909116610100171660011790555b8015620001d5576000805461ff00191690555b50565b600054610100900460ff1680620001f45750620001f462000110565b8062000203575060005460ff16155b620002405760405162461bcd60e51b815260040180806020018281038252602e815260200180620044d1602e913960400191505060405180910390fd5b600054610100900460ff161580156200026c576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156200010c576000805461ff00191690555050565b600054610100900460ff1680620002e75750620002e762000110565b80620002f6575060005460ff16155b620003335760405162461bcd60e51b815260040180806020018281038252602e815260200180620044d1602e913960400191505060405180910390fd5b600054610100900460ff161580156200035f576000805460ff1961ff0019909116610100171660011790555b6065805460ff191690558015620001d5576000805461ff001916905550565b3b151590565b60006020828403121562000396578081fd5b81516001600160a01b0381168114620003ad578182fd5b9392505050565b61410d80620003c46000396000f3fe6080604052600436106102d55760003560e01c80638456cb5911610179578063b563df2b116100d6578063dcbc98dc1161008a578063f2fde38b11610064578063f2fde38b14610798578063fa8c076f146107b8578063fe173b97146107d857610368565b8063dcbc98dc14610745578063df32db7714610765578063e7d29b531461078557610368565b8063bc2b3e5f116100bb578063bc2b3e5f146106f0578063d4d3ad0514610705578063db6647a41461072557610368565b8063b563df2b146106b0578063bbaebe88146106d057610368565b8063977507c41161012d578063a1caa48e11610112578063a1caa48e14610650578063a2bc9c2014610670578063a87b81521461069057610368565b8063977507c414610626578063a05d674f1461063b57610368565b80638da5cb5b1161015e5780638da5cb5b146105e75780638f365b69146105fc578063902dd1861461061157610368565b80638456cb59146105b257806386a86d41146105c757610368565b8063546146e3116102325780635d62a8dd116101e657806375de5f95116101c057806375de5f951461055c5780637de774691461057c578063805f751a1461058f57610368565b80635d62a8dd1461050f57806365ac74db14610524578063715018a61461054757610368565b8063575a9d1611610217578063575a9d16146104b85780635b769f3c146104da5780635c975abb146104fa57610368565b8063546146e3146104835780635572f2641461049857610368565b80633f4ba83a1161028957806348f084f01161026e57806348f084f0146104465780634d6a3cfb146104595780635028db1a1461046e57610368565b80633f4ba83a1461040f5780633fc8cef31461042457610368565b806322f7af25116102ba57806322f7af25146103ba5780633b4871bc146103da5780633de39c11146103fa57610368565b8063146252cb1461036d57806319ab453c1461039857610368565b366103685760006102e46107ed565b90503373ffffffffffffffffffffffffffffffffffffffff821614610365578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b50505050505b50005b600080fd5b34801561037957600080fd5b5061038261080a565b60405161038f9190613fb7565b60405180910390f35b3480156103a457600080fd5b506103b86103b336600461397e565b6108a1565b005b3480156103c657600080fd5b506103b86103d5366004613a9f565b6109cf565b3480156103e657600080fd5b506103b86103f5366004613a12565b610bc7565b34801561040657600080fd5b50610382610e8b565b34801561041b57600080fd5b506103b8610f30565b34801561043057600080fd5b506104396107ed565b60405161038f9190613bc5565b6103b8610454366004613ad1565b611055565b34801561046557600080fd5b50610382611064565b34801561047a57600080fd5b5061043961106e565b34801561048f57600080fd5b506103826110f5565b3480156104a457600080fd5b506103826104b3366004613ad1565b6110fb565b3480156104c457600080fd5b506104cd611116565b60405161038f9190613c17565b3480156104e657600080fd5b506103b86104f536600461397e565b6111a9565b34801561050657600080fd5b506104cd61132e565b34801561051b57600080fd5b50610439611337565b34801561053057600080fd5b50610539611353565b60405161038f929190613fc0565b34801561055357600080fd5b506103b8611371565b34801561056857600080fd5b506103b8610577366004613b5a565b611488565b6103b861058a366004613b01565b61149b565b34801561059b57600080fd5b506105a46114dd565b60405161038f929190613f94565b3480156105be57600080fd5b506103b861150e565b3480156105d357600080fd5b506103b86105e23660046139b6565b611632565b3480156105f357600080fd5b5061043961185d565b34801561060857600080fd5b50610382611879565b34801561061d57600080fd5b50610439611911565b34801561063257600080fd5b5061038261192d565b34801561064757600080fd5b506103826119ae565b34801561065c57600080fd5b5061038261066b366004613ad1565b6119d9565b34801561067c57600080fd5b506103b861068b366004613b22565b6119ec565b34801561069c57600080fd5b506103b86106ab36600461397e565b611b41565b3480156106bc57600080fd5b506103826106cb366004613ad1565b611cc6565b3480156106dc57600080fd5b506103826106eb366004613ad1565b611d81565b3480156106fc57600080fd5b50610382611e42565b34801561071157600080fd5b506103b8610720366004613b85565b611e91565b34801561073157600080fd5b506103b8610740366004613b01565b612021565b34801561075157600080fd5b506103b8610760366004613b5a565b61202d565b34801561077157600080fd5b506103b8610780366004613b85565b61203f565b6103b8610793366004613b01565b6121c7565b3480156107a457600080fd5b506103b86107b336600461397e565b6121d4565b3480156107c457600080fd5b506103b86107d336600461397e565b612376565b3480156107e457600080fd5b506103826124fb565b609a5473ffffffffffffffffffffffffffffffffffffffff165b90565b6000610814611911565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161084c9190613bc5565b60206040518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190613ae9565b905090565b600054610100900460ff16806108ba57506108ba612550565b806108c8575060005460ff16155b61091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561098357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b61098b612561565b61099482612674565b61099c6127f6565b80156109cb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6109d7612931565b73ffffffffffffffffffffffffffffffffffffffff166109f561185d565b73ffffffffffffffffffffffffffffffffffffffff1614610a7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6fffffffffffffffffffffffffffffffff8216610ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613cfc565b60405180910390fd5b6fffffffffffffffffffffffffffffffff8116610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613e24565b609880546fffffffffffffffffffffffffffffffff838116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921716179055610b74612931565b73ffffffffffffffffffffffffffffffffffffffff167f9af9b815b340cc536d9c60d950fdae6e7d2932ec908595257787b6a7f4dec3728383604051610bbb929190613f94565b60405180910390a25050565b610bcf612931565b73ffffffffffffffffffffffffffffffffffffffff16610bed61185d565b73ffffffffffffffffffffffffffffffffffffffff1614610c6f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000610c79612931565b8251609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405192935091908316907f771296b6c631391f79de88226814060fdb511864a4e620f8085f4534f20b5f8490600090a36020820151609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405190918316907f580c76d0bfa674377787c86b7e4910624b8de2f31c4f8284196ac7ce68a3a57b90600090a3604082810151609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091559151908316907f9cfa0588ff5ff3789d20735024d004bfb8db496d5117712e136adbfe97af41d790600090a360608201516098805460808501516fffffffffffffffffffffffffffffffff818116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317169190911790915560405173ffffffffffffffffffffffffffffffffffffffff8416927f9af9b815b340cc536d9c60d950fdae6e7d2932ec908595257787b6a7f4dec37292610bbb92613f94565b600080610e96611879565b905080610ead57610ea56124fb565b915050610807565b600080610eb86114dd565b915091506000610eee826fffffffffffffffffffffffffffffffff16610ee8670de0b6b3a7640000610ee8611064565b90612935565b90506000610f1a846fffffffffffffffffffffffffffffffff16610ee8610f136110f5565b8890612935565b9050610f2682826129b1565b9550505050505090565b610f38612931565b73ffffffffffffffffffffffffffffffffffffffff16610f5661185d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610fe061132e565b61104b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b611053612a32565b565b61106134826000612b20565b50565b60006108146107ed565b6000611078611911565b73ffffffffffffffffffffffffffffffffffffffff16635028db1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bd57600080fd5b505afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c919061399a565b61520890565b600061110e6111086124fb565b83612c6e565b90505b919050565b6000806000611123611353565b91509150806000141561113b57600092505050610807565b60008161115084670de0b6b3a7640000612935565b8161115757fe5b0490506000806111656114dd565b6fffffffffffffffffffffffffffffffff9182169350169050600061119c8261119685670de0b6b3a7640000612935565b906129b1565b9093109550505050505090565b6111b1612931565b73ffffffffffffffffffffffffffffffffffffffff166111cf61185d565b73ffffffffffffffffffffffffffffffffffffffff161461125157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661129e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613ded565b609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556112e9612931565b73ffffffffffffffffffffffffffffffffffffffff167f9cfa0588ff5ff3789d20735024d004bfb8db496d5117712e136adbfe97af41d760405160405180910390a350565b60655460ff1690565b60975473ffffffffffffffffffffffffffffffffffffffff1690565b60008061135e611064565b915061136b6104b3611879565b90509091565b611379612931565b73ffffffffffffffffffffffffffffffffffffffff1661139761185d565b73ffffffffffffffffffffffffffffffffffffffff161461141957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6114958383836001612c95565b50505050565b3460006114aa82858584612c95565b9050808214611495576114958183036114c1612931565b73ffffffffffffffffffffffffffffffffffffffff1690612e31565b6098546fffffffffffffffffffffffffffffffff808216927001000000000000000000000000000000009092041690565b611516612931565b73ffffffffffffffffffffffffffffffffffffffff1661153461185d565b73ffffffffffffffffffffffffffffffffffffffff16146115b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6115be61132e565b1561162a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b611053612f57565b61163a612931565b73ffffffffffffffffffffffffffffffffffffffff1661165861185d565b73ffffffffffffffffffffffffffffffffffffffff16146116da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6116e26107ed565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611747576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eb8565b61174f611911565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c59565b6117d573ffffffffffffffffffffffffffffffffffffffff8416838361301f565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1661180b612931565b73ffffffffffffffffffffffffffffffffffffffff167feaf4cea276efdcae93a52ca2f4bfdd952992169289bf655b1870a4b20bdae7d6846040516118509190613fb7565b60405180910390a4505050565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b600061089c61188661080a565b61188e611911565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b9190613ae9565b906130ac565b60995473ffffffffffffffffffffffffffffffffffffffff1690565b600080600061193a611353565b915091506000806119496114dd565b91509150600061198a826fffffffffffffffffffffffffffffffff16611196856fffffffffffffffffffffffffffffffff168761293590919063ffffffff16565b9050808511156119a257600095505050505050610807565b93909303935050505090565b6000806119b96124fb565b905060006119c5610e8b565b9050808211156119d3578091505b50905090565b600061110e6119e66124fb565b83613123565b8142811015611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b611a2f611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac91906139f6565b15611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b83611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000611b2585611d81565b9050611b3a611b32612931565b868386613180565b5050505050565b611b49612931565b73ffffffffffffffffffffffffffffffffffffffff16611b6761185d565b73ffffffffffffffffffffffffffffffffffffffff1614611be957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613cc7565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155611c81612931565b73ffffffffffffffffffffffffffffffffffffffff167f580c76d0bfa674377787c86b7e4910624b8de2f31c4f8284196ac7ce68a3a57b60405160405180910390a350565b600080611cda611cd46119ae565b84613123565b90506000611ce661106e565b73ffffffffffffffffffffffffffffffffffffffff1663063f384f611d09612931565b30856040518463ffffffff1660e01b8152600401611d2993929190613be6565b60206040518083038186803b158015611d4157600080fd5b505afa158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190613ae9565b949350505050565b600080611d8c61106e565b73ffffffffffffffffffffffffffffffffffffffff1663be3945e4611daf612931565b30866040518463ffffffff1660e01b8152600401611dcf93929190613be6565b60206040518083038186803b158015611de757600080fd5b505afa158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f9190613ae9565b9050611e3b611e2c6119ae565b611e3685846130ac565b612c6e565b9392505050565b6000806000611e4f6114dd565b91509150611e8a816fffffffffffffffffffffffffffffffff16611196846fffffffffffffffffffffffffffffffff16610ee86104b3611879565b9250505090565b8142811015611ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b611ed4611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5191906139f6565b15611f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b84611fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000611fca85611cc6565b905085811115612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c22565b612019612011612931565b828786613180565b505050505050565b6109cb82826001612b20565b61203a8383836001613274565b505050565b814281101561207a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612082611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c757600080fd5b505afa1580156120db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ff91906139f6565b15612136576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b8461216d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b600061217886611d81565b9050848110156121b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d59565b6120196121bf612931565b878386613180565b6109cb3483836000613274565b6121dc612931565b73ffffffffffffffffffffffffffffffffffffffff166121fa61185d565b73ffffffffffffffffffffffffffffffffffffffff161461227c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166122e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613fff6026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61237e612931565b73ffffffffffffffffffffffffffffffffffffffff1661239c61185d565b73ffffffffffffffffffffffffffffffffffffffff161461241e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661246b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613e81565b609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556124b6612931565b73ffffffffffffffffffffffffffffffffffffffff167f771296b6c631391f79de88226814060fdb511864a4e620f8085f4534f20b5f8460405160405180910390a350565b6000612505611337565b73ffffffffffffffffffffffffffffffffffffffff1663fe173b976040518163ffffffff1660e01b815260040160206040518083038186803b15801561086457600080fd5b3b151590565b600061255b3061254a565b15905090565b600054610100900460ff168061257a575061257a612550565b80612588575060005460ff16155b6125dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561264357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b801561106157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061268d575061268d612550565b8061269b575060005460ff16155b6126f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561275657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156109cb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b600054610100900460ff168061280f575061280f612550565b8061281d575060005460ff16155b612872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff161580156128d857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055801561106157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b3390565b600082612944575060006129ab565b8282028284828161295157fe5b04146129a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061408d6021913960400191505060405180910390fd5b90505b92915050565b6000808211612a2157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612a2a57fe5b049392505050565b612a3a61132e565b612aa557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612af6612931565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190a1565b8142811015612b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612b63611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015612ba857600080fd5b505afa158015612bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be091906139f6565b15612c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b83612c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000612c59856119d9565b9050611b3a612c66612931565b8683866133f8565b6000670de0b6b3a7640000612c8e612c846110f5565b610ee88686612935565b81612a2a57fe5b60008242811015612cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612cda611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1f57600080fd5b505afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5791906139f6565b15612d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b85612dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b612dd96001612dd3876110fb565b90613555565b915085821115612e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c22565b612e28612e20612931565b8387866133f8565b50949350505050565b80471015612ea057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114612ef8576040519150601f19603f3d011682016040523d82523d6000602084013e612efd565b606091505b505090508061203a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180614025603a913960400191505060405180910390fd5b612f5f61132e565b15612fcb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af6612931565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261203a9084906135c9565b60008282111561311d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261315c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f26565b61316e6131676110f5565b8490612935565b612c8e83670de0b6b3a7640000612935565b6131ac84308561318e611911565b73ffffffffffffffffffffffffffffffffffffffff169291906136a1565b80156131e1576131dc84836131bf6107ed565b73ffffffffffffffffffffffffffffffffffffffff16919061301f565b611495565b6131e96107ed565b73ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016132219190613fb7565b600060405180830381600087803b15801561323b57600080fd5b505af115801561324f573d6000803e3d6000fd5b506114959250505073ffffffffffffffffffffffffffffffffffffffff851683612e31565b81428110156132af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b6132b7611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b1580156132fc57600080fd5b505afa158015613310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333491906139f6565b1561336b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b846133a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b60006133ad866119d9565b9050848110156133e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d59565b6120196133f4612931565b8783865b6000613402611911565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161343a9190613bc5565b60206040518083038186803b15801561345257600080fd5b505afa158015613466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348a9190613ae9565b9050828110156134c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d90565b81156134df576134da85308661318e6107ed565b613548565b6134e76107ed565b73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b50505050505b611b3a85846131bf611911565b6000828201838110156129a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061362b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166137369092919063ffffffff16565b80519091501561203a5780806020019051602081101561364a57600080fd5b505161203a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806140ae602a913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114959085906135c9565b6060611d7984846000858561374a8561254a565b6137b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061381e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016137e1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613880576040519150601f19603f3d011682016040523d82523d6000602084013e613885565b606091505b50915091506138958282866138a0565b979650505050505050565b606083156138af575081611e3b565b8251156138bf5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561392357818101518382015260200161390b565b50505050905090810190601f1680156139505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80356fffffffffffffffffffffffffffffffff8116811461111157600080fd5b60006020828403121561398f578081fd5b81356129a881613fce565b6000602082840312156139ab578081fd5b81516129a881613fce565b6000806000606084860312156139ca578182fd5b83356139d581613fce565b925060208401356139e581613fce565b929592945050506040919091013590565b600060208284031215613a07578081fd5b81516129a881613ff0565b600060a08284031215613a23578081fd5b60405160a0810181811067ffffffffffffffff82111715613a4057fe5b6040528235613a4e81613fce565b81526020830135613a5e81613fce565b60208201526040830135613a7181613fce565b6040820152613a826060840161395e565b6060820152613a936080840161395e565b60808201529392505050565b60008060408385031215613ab1578182fd5b613aba8361395e565b9150613ac86020840161395e565b90509250929050565b600060208284031215613ae2578081fd5b5035919050565b600060208284031215613afa578081fd5b5051919050565b60008060408385031215613b13578182fd5b50508035926020909101359150565b600080600060608486031215613b36578283fd5b83359250602084013591506040840135613b4f81613ff0565b809150509250925092565b600080600060608486031215613b6e578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613b9a578081fd5b8435935060208501359250604085013591506060850135613bba81613ff0565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b6020808252601e908201527f4554487478414d4d3a20616d6f756e74496e2065786365656473206d61780000604082015260600190565b6020808252601e908201527f4554487478414d4d3a2063616e6e6f74207265636f7665722045544874780000604082015260600190565b6020808252601f908201527f4554487478414d4d3a20676173207072696365206973206f7574646174656400604082015260600190565b6020808252818101527f4554487478414d4d3a206761734f7261636c65207a65726f2061646472657373604082015260600190565b60208082526028908201527f4554487478414d4d3a2074617267657443526174696f206e756d657261746f7260408201527f206973207a65726f000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f4554487478414d4d3a20616d6f756e744f75742062656c6f77206d696e000000604082015260600190565b60208082526024908201527f4554487478414d4d3a206e6f7420656e6f75676820455448747820617661696c60408201527f61626c6500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4554487478414d4d3a2057455448207a65726f20616464726573730000000000604082015260600190565b6020808252602a908201527f4554487478414d4d3a2074617267657443526174696f2064656e6f6d696e617460408201527f6f72206973207a65726f00000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4554487478414d4d3a204554487478207a65726f206164647265737300000000604082015260600190565b6020808252601d908201527f4554487478414d4d3a2063616e6e6f74207265636f7665722057455448000000604082015260600190565b6020808252601a908201527f4554487478414d4d3a2063616e6e6f742073776170207a65726f000000000000604082015260600190565b6020808252601a908201527f4554487478414d4d3a206761735072696365206973207a65726f000000000000604082015260600190565b60208082526011908201527f4554487478414d4d3a2065787069726564000000000000000000000000000000604082015260600190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b90815260200190565b918252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff8116811461106157600080fd5b801515811461106157600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a7763016e67b45b67722e8d91788e4a327dc51e79d73ae5e1df81ef40497853464736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c80638456cb5911610179578063b563df2b116100d6578063dcbc98dc1161008a578063f2fde38b11610064578063f2fde38b14610798578063fa8c076f146107b8578063fe173b97146107d857610368565b8063dcbc98dc14610745578063df32db7714610765578063e7d29b531461078557610368565b8063bc2b3e5f116100bb578063bc2b3e5f146106f0578063d4d3ad0514610705578063db6647a41461072557610368565b8063b563df2b146106b0578063bbaebe88146106d057610368565b8063977507c41161012d578063a1caa48e11610112578063a1caa48e14610650578063a2bc9c2014610670578063a87b81521461069057610368565b8063977507c414610626578063a05d674f1461063b57610368565b80638da5cb5b1161015e5780638da5cb5b146105e75780638f365b69146105fc578063902dd1861461061157610368565b80638456cb59146105b257806386a86d41146105c757610368565b8063546146e3116102325780635d62a8dd116101e657806375de5f95116101c057806375de5f951461055c5780637de774691461057c578063805f751a1461058f57610368565b80635d62a8dd1461050f57806365ac74db14610524578063715018a61461054757610368565b8063575a9d1611610217578063575a9d16146104b85780635b769f3c146104da5780635c975abb146104fa57610368565b8063546146e3146104835780635572f2641461049857610368565b80633f4ba83a1161028957806348f084f01161026e57806348f084f0146104465780634d6a3cfb146104595780635028db1a1461046e57610368565b80633f4ba83a1461040f5780633fc8cef31461042457610368565b806322f7af25116102ba57806322f7af25146103ba5780633b4871bc146103da5780633de39c11146103fa57610368565b8063146252cb1461036d57806319ab453c1461039857610368565b366103685760006102e46107ed565b90503373ffffffffffffffffffffffffffffffffffffffff821614610365578073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b50505050505b50005b600080fd5b34801561037957600080fd5b5061038261080a565b60405161038f9190613fb7565b60405180910390f35b3480156103a457600080fd5b506103b86103b336600461397e565b6108a1565b005b3480156103c657600080fd5b506103b86103d5366004613a9f565b6109cf565b3480156103e657600080fd5b506103b86103f5366004613a12565b610bc7565b34801561040657600080fd5b50610382610e8b565b34801561041b57600080fd5b506103b8610f30565b34801561043057600080fd5b506104396107ed565b60405161038f9190613bc5565b6103b8610454366004613ad1565b611055565b34801561046557600080fd5b50610382611064565b34801561047a57600080fd5b5061043961106e565b34801561048f57600080fd5b506103826110f5565b3480156104a457600080fd5b506103826104b3366004613ad1565b6110fb565b3480156104c457600080fd5b506104cd611116565b60405161038f9190613c17565b3480156104e657600080fd5b506103b86104f536600461397e565b6111a9565b34801561050657600080fd5b506104cd61132e565b34801561051b57600080fd5b50610439611337565b34801561053057600080fd5b50610539611353565b60405161038f929190613fc0565b34801561055357600080fd5b506103b8611371565b34801561056857600080fd5b506103b8610577366004613b5a565b611488565b6103b861058a366004613b01565b61149b565b34801561059b57600080fd5b506105a46114dd565b60405161038f929190613f94565b3480156105be57600080fd5b506103b861150e565b3480156105d357600080fd5b506103b86105e23660046139b6565b611632565b3480156105f357600080fd5b5061043961185d565b34801561060857600080fd5b50610382611879565b34801561061d57600080fd5b50610439611911565b34801561063257600080fd5b5061038261192d565b34801561064757600080fd5b506103826119ae565b34801561065c57600080fd5b5061038261066b366004613ad1565b6119d9565b34801561067c57600080fd5b506103b861068b366004613b22565b6119ec565b34801561069c57600080fd5b506103b86106ab36600461397e565b611b41565b3480156106bc57600080fd5b506103826106cb366004613ad1565b611cc6565b3480156106dc57600080fd5b506103826106eb366004613ad1565b611d81565b3480156106fc57600080fd5b50610382611e42565b34801561071157600080fd5b506103b8610720366004613b85565b611e91565b34801561073157600080fd5b506103b8610740366004613b01565b612021565b34801561075157600080fd5b506103b8610760366004613b5a565b61202d565b34801561077157600080fd5b506103b8610780366004613b85565b61203f565b6103b8610793366004613b01565b6121c7565b3480156107a457600080fd5b506103b86107b336600461397e565b6121d4565b3480156107c457600080fd5b506103b86107d336600461397e565b612376565b3480156107e457600080fd5b506103826124fb565b609a5473ffffffffffffffffffffffffffffffffffffffff165b90565b6000610814611911565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161084c9190613bc5565b60206040518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190613ae9565b905090565b600054610100900460ff16806108ba57506108ba612550565b806108c8575060005460ff16155b61091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561098357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b61098b612561565b61099482612674565b61099c6127f6565b80156109cb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6109d7612931565b73ffffffffffffffffffffffffffffffffffffffff166109f561185d565b73ffffffffffffffffffffffffffffffffffffffff1614610a7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6fffffffffffffffffffffffffffffffff8216610ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613cfc565b60405180910390fd5b6fffffffffffffffffffffffffffffffff8116610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613e24565b609880546fffffffffffffffffffffffffffffffff838116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921716179055610b74612931565b73ffffffffffffffffffffffffffffffffffffffff167f9af9b815b340cc536d9c60d950fdae6e7d2932ec908595257787b6a7f4dec3728383604051610bbb929190613f94565b60405180910390a25050565b610bcf612931565b73ffffffffffffffffffffffffffffffffffffffff16610bed61185d565b73ffffffffffffffffffffffffffffffffffffffff1614610c6f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000610c79612931565b8251609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405192935091908316907f771296b6c631391f79de88226814060fdb511864a4e620f8085f4534f20b5f8490600090a36020820151609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811790915560405190918316907f580c76d0bfa674377787c86b7e4910624b8de2f31c4f8284196ac7ce68a3a57b90600090a3604082810151609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091559151908316907f9cfa0588ff5ff3789d20735024d004bfb8db496d5117712e136adbfe97af41d790600090a360608201516098805460808501516fffffffffffffffffffffffffffffffff818116700100000000000000000000000000000000028186167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317169190911790915560405173ffffffffffffffffffffffffffffffffffffffff8416927f9af9b815b340cc536d9c60d950fdae6e7d2932ec908595257787b6a7f4dec37292610bbb92613f94565b600080610e96611879565b905080610ead57610ea56124fb565b915050610807565b600080610eb86114dd565b915091506000610eee826fffffffffffffffffffffffffffffffff16610ee8670de0b6b3a7640000610ee8611064565b90612935565b90506000610f1a846fffffffffffffffffffffffffffffffff16610ee8610f136110f5565b8890612935565b9050610f2682826129b1565b9550505050505090565b610f38612931565b73ffffffffffffffffffffffffffffffffffffffff16610f5661185d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610fe061132e565b61104b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b611053612a32565b565b61106134826000612b20565b50565b60006108146107ed565b6000611078611911565b73ffffffffffffffffffffffffffffffffffffffff16635028db1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bd57600080fd5b505afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c919061399a565b61520890565b600061110e6111086124fb565b83612c6e565b90505b919050565b6000806000611123611353565b91509150806000141561113b57600092505050610807565b60008161115084670de0b6b3a7640000612935565b8161115757fe5b0490506000806111656114dd565b6fffffffffffffffffffffffffffffffff9182169350169050600061119c8261119685670de0b6b3a7640000612935565b906129b1565b9093109550505050505090565b6111b1612931565b73ffffffffffffffffffffffffffffffffffffffff166111cf61185d565b73ffffffffffffffffffffffffffffffffffffffff161461125157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661129e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613ded565b609a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556112e9612931565b73ffffffffffffffffffffffffffffffffffffffff167f9cfa0588ff5ff3789d20735024d004bfb8db496d5117712e136adbfe97af41d760405160405180910390a350565b60655460ff1690565b60975473ffffffffffffffffffffffffffffffffffffffff1690565b60008061135e611064565b915061136b6104b3611879565b90509091565b611379612931565b73ffffffffffffffffffffffffffffffffffffffff1661139761185d565b73ffffffffffffffffffffffffffffffffffffffff161461141957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6114958383836001612c95565b50505050565b3460006114aa82858584612c95565b9050808214611495576114958183036114c1612931565b73ffffffffffffffffffffffffffffffffffffffff1690612e31565b6098546fffffffffffffffffffffffffffffffff808216927001000000000000000000000000000000009092041690565b611516612931565b73ffffffffffffffffffffffffffffffffffffffff1661153461185d565b73ffffffffffffffffffffffffffffffffffffffff16146115b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6115be61132e565b1561162a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b611053612f57565b61163a612931565b73ffffffffffffffffffffffffffffffffffffffff1661165861185d565b73ffffffffffffffffffffffffffffffffffffffff16146116da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6116e26107ed565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611747576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eb8565b61174f611911565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c59565b6117d573ffffffffffffffffffffffffffffffffffffffff8416838361301f565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1661180b612931565b73ffffffffffffffffffffffffffffffffffffffff167feaf4cea276efdcae93a52ca2f4bfdd952992169289bf655b1870a4b20bdae7d6846040516118509190613fb7565b60405180910390a4505050565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b600061089c61188661080a565b61188e611911565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b9190613ae9565b906130ac565b60995473ffffffffffffffffffffffffffffffffffffffff1690565b600080600061193a611353565b915091506000806119496114dd565b91509150600061198a826fffffffffffffffffffffffffffffffff16611196856fffffffffffffffffffffffffffffffff168761293590919063ffffffff16565b9050808511156119a257600095505050505050610807565b93909303935050505090565b6000806119b96124fb565b905060006119c5610e8b565b9050808211156119d3578091505b50905090565b600061110e6119e66124fb565b83613123565b8142811015611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b611a2f611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac91906139f6565b15611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b83611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000611b2585611d81565b9050611b3a611b32612931565b868386613180565b5050505050565b611b49612931565b73ffffffffffffffffffffffffffffffffffffffff16611b6761185d565b73ffffffffffffffffffffffffffffffffffffffff1614611be957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613cc7565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155611c81612931565b73ffffffffffffffffffffffffffffffffffffffff167f580c76d0bfa674377787c86b7e4910624b8de2f31c4f8284196ac7ce68a3a57b60405160405180910390a350565b600080611cda611cd46119ae565b84613123565b90506000611ce661106e565b73ffffffffffffffffffffffffffffffffffffffff1663063f384f611d09612931565b30856040518463ffffffff1660e01b8152600401611d2993929190613be6565b60206040518083038186803b158015611d4157600080fd5b505afa158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190613ae9565b949350505050565b600080611d8c61106e565b73ffffffffffffffffffffffffffffffffffffffff1663be3945e4611daf612931565b30866040518463ffffffff1660e01b8152600401611dcf93929190613be6565b60206040518083038186803b158015611de757600080fd5b505afa158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f9190613ae9565b9050611e3b611e2c6119ae565b611e3685846130ac565b612c6e565b9392505050565b6000806000611e4f6114dd565b91509150611e8a816fffffffffffffffffffffffffffffffff16611196846fffffffffffffffffffffffffffffffff16610ee86104b3611879565b9250505090565b8142811015611ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b611ed4611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5191906139f6565b15611f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b84611fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000611fca85611cc6565b905085811115612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c22565b612019612011612931565b828786613180565b505050505050565b6109cb82826001612b20565b61203a8383836001613274565b505050565b814281101561207a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612082611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c757600080fd5b505afa1580156120db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ff91906139f6565b15612136576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b8461216d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b600061217886611d81565b9050848110156121b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d59565b6120196121bf612931565b878386613180565b6109cb3483836000613274565b6121dc612931565b73ffffffffffffffffffffffffffffffffffffffff166121fa61185d565b73ffffffffffffffffffffffffffffffffffffffff161461227c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166122e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613fff6026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61237e612931565b73ffffffffffffffffffffffffffffffffffffffff1661239c61185d565b73ffffffffffffffffffffffffffffffffffffffff161461241e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661246b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613e81565b609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556124b6612931565b73ffffffffffffffffffffffffffffffffffffffff167f771296b6c631391f79de88226814060fdb511864a4e620f8085f4534f20b5f8460405160405180910390a350565b6000612505611337565b73ffffffffffffffffffffffffffffffffffffffff1663fe173b976040518163ffffffff1660e01b815260040160206040518083038186803b15801561086457600080fd5b3b151590565b600061255b3061254a565b15905090565b600054610100900460ff168061257a575061257a612550565b80612588575060005460ff16155b6125dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561264357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b801561106157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061268d575061268d612550565b8061269b575060005460ff16155b6126f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff1615801561275657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156109cb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b600054610100900460ff168061280f575061280f612550565b8061281d575060005460ff16155b612872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061405f602e913960400191505060405180910390fd5b600054610100900460ff161580156128d857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055801561106157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b3390565b600082612944575060006129ab565b8282028284828161295157fe5b04146129a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061408d6021913960400191505060405180910390fd5b90505b92915050565b6000808211612a2157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612a2a57fe5b049392505050565b612a3a61132e565b612aa557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612af6612931565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190a1565b8142811015612b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612b63611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015612ba857600080fd5b505afa158015612bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be091906139f6565b15612c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b83612c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b6000612c59856119d9565b9050611b3a612c66612931565b8683866133f8565b6000670de0b6b3a7640000612c8e612c846110f5565b610ee88686612935565b81612a2a57fe5b60008242811015612cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b612cda611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1f57600080fd5b505afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5791906139f6565b15612d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b85612dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b612dd96001612dd3876110fb565b90613555565b915085821115612e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c22565b612e28612e20612931565b8387866133f8565b50949350505050565b80471015612ea057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114612ef8576040519150601f19603f3d011682016040523d82523d6000602084013e612efd565b606091505b505090508061203a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180614025603a913960400191505060405180910390fd5b612f5f61132e565b15612fcb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b606580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af6612931565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261203a9084906135c9565b60008282111561311d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261315c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f26565b61316e6131676110f5565b8490612935565b612c8e83670de0b6b3a7640000612935565b6131ac84308561318e611911565b73ffffffffffffffffffffffffffffffffffffffff169291906136a1565b80156131e1576131dc84836131bf6107ed565b73ffffffffffffffffffffffffffffffffffffffff16919061301f565b611495565b6131e96107ed565b73ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016132219190613fb7565b600060405180830381600087803b15801561323b57600080fd5b505af115801561324f573d6000803e3d6000fd5b506114959250505073ffffffffffffffffffffffffffffffffffffffff851683612e31565b81428110156132af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613f5d565b6132b7611337565b73ffffffffffffffffffffffffffffffffffffffff16639e2437146040518163ffffffff1660e01b815260040160206040518083038186803b1580156132fc57600080fd5b505afa158015613310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333491906139f6565b1561336b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613c90565b846133a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613eef565b60006133ad866119d9565b9050848110156133e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d59565b6120196133f4612931565b8783865b6000613402611911565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161343a9190613bc5565b60206040518083038186803b15801561345257600080fd5b505afa158015613466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348a9190613ae9565b9050828110156134c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090613d90565b81156134df576134da85308661318e6107ed565b613548565b6134e76107ed565b73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b50505050505b611b3a85846131bf611911565b6000828201838110156129a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061362b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166137369092919063ffffffff16565b80519091501561203a5780806020019051602081101561364a57600080fd5b505161203a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806140ae602a913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114959085906135c9565b6060611d7984846000858561374a8561254a565b6137b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061381e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016137e1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613880576040519150601f19603f3d011682016040523d82523d6000602084013e613885565b606091505b50915091506138958282866138a0565b979650505050505050565b606083156138af575081611e3b565b8251156138bf5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561392357818101518382015260200161390b565b50505050905090810190601f1680156139505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80356fffffffffffffffffffffffffffffffff8116811461111157600080fd5b60006020828403121561398f578081fd5b81356129a881613fce565b6000602082840312156139ab578081fd5b81516129a881613fce565b6000806000606084860312156139ca578182fd5b83356139d581613fce565b925060208401356139e581613fce565b929592945050506040919091013590565b600060208284031215613a07578081fd5b81516129a881613ff0565b600060a08284031215613a23578081fd5b60405160a0810181811067ffffffffffffffff82111715613a4057fe5b6040528235613a4e81613fce565b81526020830135613a5e81613fce565b60208201526040830135613a7181613fce565b6040820152613a826060840161395e565b6060820152613a936080840161395e565b60808201529392505050565b60008060408385031215613ab1578182fd5b613aba8361395e565b9150613ac86020840161395e565b90509250929050565b600060208284031215613ae2578081fd5b5035919050565b600060208284031215613afa578081fd5b5051919050565b60008060408385031215613b13578182fd5b50508035926020909101359150565b600080600060608486031215613b36578283fd5b83359250602084013591506040840135613b4f81613ff0565b809150509250925092565b600080600060608486031215613b6e578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613b9a578081fd5b8435935060208501359250604085013591506060850135613bba81613ff0565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b6020808252601e908201527f4554487478414d4d3a20616d6f756e74496e2065786365656473206d61780000604082015260600190565b6020808252601e908201527f4554487478414d4d3a2063616e6e6f74207265636f7665722045544874780000604082015260600190565b6020808252601f908201527f4554487478414d4d3a20676173207072696365206973206f7574646174656400604082015260600190565b6020808252818101527f4554487478414d4d3a206761734f7261636c65207a65726f2061646472657373604082015260600190565b60208082526028908201527f4554487478414d4d3a2074617267657443526174696f206e756d657261746f7260408201527f206973207a65726f000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f4554487478414d4d3a20616d6f756e744f75742062656c6f77206d696e000000604082015260600190565b60208082526024908201527f4554487478414d4d3a206e6f7420656e6f75676820455448747820617661696c60408201527f61626c6500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4554487478414d4d3a2057455448207a65726f20616464726573730000000000604082015260600190565b6020808252602a908201527f4554487478414d4d3a2074617267657443526174696f2064656e6f6d696e617460408201527f6f72206973207a65726f00000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4554487478414d4d3a204554487478207a65726f206164647265737300000000604082015260600190565b6020808252601d908201527f4554487478414d4d3a2063616e6e6f74207265636f7665722057455448000000604082015260600190565b6020808252601a908201527f4554487478414d4d3a2063616e6e6f742073776170207a65726f000000000000604082015260600190565b6020808252601a908201527f4554487478414d4d3a206761735072696365206973207a65726f000000000000604082015260600190565b60208082526011908201527f4554487478414d4d3a2065787069726564000000000000000000000000000000604082015260600190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b90815260200190565b918252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff8116811461106157600080fd5b801515811461106157600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a7763016e67b45b67722e8d91788e4a327dc51e79d73ae5e1df81ef40497853464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 353,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3458,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3577,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 375,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 466,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7066,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_gasOracle",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 7068,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_targetCRatioNum",
        "offset": 0,
        "slot": "152",
        "type": "t_uint128"
      },
      {
        "astId": 7070,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_targetCRatioDen",
        "offset": 16,
        "slot": "152",
        "type": "t_uint128"
      },
      {
        "astId": 7072,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_ethtx",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 7074,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "_weth",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 7078,
        "contract": "contracts/exchanges/ETHtxAMM/ETHtxAMM.sol:ETHtxAMM",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}